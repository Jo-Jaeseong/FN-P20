
P20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000400  08040000  08040000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000185ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000009b0  08018780  08018780  00019780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08019130  08019130  0001c400  2**0
                  CONTENTS
  5 .ARM          00000008  08019130  08019130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08019138  08019138  0001c400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08019138  08019138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801913c  0801913c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001fc  20000000  08019140  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000019a0  200001fc  0801933c  0001b1fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001b9c  0801933c  0001bb9c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c400  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fbce  00000000  00000000  0001c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008370  00000000  00000000  0004bffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002758  00000000  00000000  00054370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001dc2  00000000  00000000  00056ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030deb  00000000  00000000  0005888a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f231  00000000  00000000  00089675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0b81  00000000  00000000  000c88a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b9427  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ae00  00000000  00000000  001b946c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  001c426c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018764 	.word	0x08018764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08018764 	.word	0x08018764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <DoorLatch>:
#include "hardware.h"

// ------------------- Variables -------------------

// ------------------- Functions -------------------
void DoorLatch(int onoff){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	DC6(onoff);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f887 	bl	8001054 <DC6>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <Fan>:
#include "hardware.h"

// ------------------- Variables -------------------

// ------------------- Functions -------------------
void Fan(int onoff){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	DC7(onoff);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f894 	bl	8001084 <DC7>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DC1>:

int DoorHeater_flag, AC2_flag, ChamberBackHeater_flag, VaporizerHeater_flag, AC5_flag, VacuumPump_flag, Plasma_flag, AC8_flag;	//AC
int VacuumValve_flag, DC2_flag, DC3_flag, VentValve_flag, InjectionValve_flag, DoorLatch_flag, Fan_flag, ChamberHeater_flag, PeristalticPump_flag;	//DC

//DC
void DC1(int onoff){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d105      	bne.n	8000f7e <DC1+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT1_GPIO_Port, GPIO_OUT1_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2101      	movs	r1, #1
 8000f76:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <DC1+0x2c>)
 8000f78:	f005 f98a 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT1_GPIO_Port, GPIO_OUT1_Pin, GPIO_PIN_RESET);
	}
}
 8000f7c:	e004      	b.n	8000f88 <DC1+0x24>
		HAL_GPIO_WritePin(GPIO_OUT1_GPIO_Port, GPIO_OUT1_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <DC1+0x2c>)
 8000f84:	f005 f984 	bl	8006290 <HAL_GPIO_WritePin>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000

08000f94 <DC2>:

void DC2(int onoff){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d105      	bne.n	8000fae <DC2+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT2_GPIO_Port, GPIO_OUT2_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <DC2+0x2c>)
 8000fa8:	f005 f972 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT2_GPIO_Port, GPIO_OUT2_Pin, GPIO_PIN_RESET);
	}
}
 8000fac:	e004      	b.n	8000fb8 <DC2+0x24>
		HAL_GPIO_WritePin(GPIO_OUT2_GPIO_Port, GPIO_OUT2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <DC2+0x2c>)
 8000fb4:	f005 f96c 	bl	8006290 <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <DC3>:

void DC3(int onoff){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <DC3+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT3_GPIO_Port, GPIO_OUT3_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <DC3+0x2c>)
 8000fd8:	f005 f95a 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT3_GPIO_Port, GPIO_OUT3_Pin, GPIO_PIN_RESET);
	}
}
 8000fdc:	e004      	b.n	8000fe8 <DC3+0x24>
		HAL_GPIO_WritePin(GPIO_OUT3_GPIO_Port, GPIO_OUT3_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <DC3+0x2c>)
 8000fe4:	f005 f954 	bl	8006290 <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <DC4>:

void DC4(int onoff){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d105      	bne.n	800100e <DC4+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT4_GPIO_Port, GPIO_OUT4_Pin, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2108      	movs	r1, #8
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <DC4+0x2c>)
 8001008:	f005 f942 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT4_GPIO_Port, GPIO_OUT4_Pin, GPIO_PIN_RESET);
	}
}
 800100c:	e004      	b.n	8001018 <DC4+0x24>
		HAL_GPIO_WritePin(GPIO_OUT4_GPIO_Port, GPIO_OUT4_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2108      	movs	r1, #8
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <DC4+0x2c>)
 8001014:	f005 f93c 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <DC5>:

void DC5(int onoff){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <DC5+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT5_GPIO_Port, GPIO_OUT5_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <DC5+0x2c>)
 8001038:	f005 f92a 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT5_GPIO_Port, GPIO_OUT5_Pin, GPIO_PIN_RESET);
	}
}
 800103c:	e004      	b.n	8001048 <DC5+0x24>
		HAL_GPIO_WritePin(GPIO_OUT5_GPIO_Port, GPIO_OUT5_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2110      	movs	r1, #16
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <DC5+0x2c>)
 8001044:	f005 f924 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000

08001054 <DC6>:

void DC6(int onoff){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d105      	bne.n	800106e <DC6+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT6_GPIO_Port, GPIO_OUT6_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2120      	movs	r1, #32
 8001066:	4806      	ldr	r0, [pc, #24]	@ (8001080 <DC6+0x2c>)
 8001068:	f005 f912 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT6_GPIO_Port, GPIO_OUT6_Pin, GPIO_PIN_RESET);
	}
}
 800106c:	e004      	b.n	8001078 <DC6+0x24>
		HAL_GPIO_WritePin(GPIO_OUT6_GPIO_Port, GPIO_OUT6_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2120      	movs	r1, #32
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <DC6+0x2c>)
 8001074:	f005 f90c 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021000 	.word	0x40021000

08001084 <DC7>:

void DC7(int onoff){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d105      	bne.n	800109e <DC7+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT7_GPIO_Port, GPIO_OUT7_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2140      	movs	r1, #64	@ 0x40
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <DC7+0x2c>)
 8001098:	f005 f8fa 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT7_GPIO_Port, GPIO_OUT7_Pin, GPIO_PIN_RESET);
	}
}
 800109c:	e004      	b.n	80010a8 <DC7+0x24>
		HAL_GPIO_WritePin(GPIO_OUT7_GPIO_Port, GPIO_OUT7_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2140      	movs	r1, #64	@ 0x40
 80010a2:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <DC7+0x2c>)
 80010a4:	f005 f8f4 	bl	8006290 <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <DC8>:

void DC8(int onoff){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d106      	bne.n	80010d0 <DC8+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT8_GPIO_Port, GPIO_OUT8_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c8:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <DC8+0x30>)
 80010ca:	f005 f8e1 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT8_GPIO_Port, GPIO_OUT8_Pin, GPIO_PIN_RESET);
	}
}
 80010ce:	e005      	b.n	80010dc <DC8+0x28>
		HAL_GPIO_WritePin(GPIO_OUT8_GPIO_Port, GPIO_OUT8_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <DC8+0x30>)
 80010d8:	f005 f8da 	bl	8006290 <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020800 	.word	0x40020800

080010e8 <AC1>:

//AC
void AC1(int onoff){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d106      	bne.n	8001104 <AC1+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT11_GPIO_Port, GPIO_OUT11_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <AC1+0x30>)
 80010fe:	f005 f8c7 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT11_GPIO_Port, GPIO_OUT11_Pin, GPIO_PIN_SET);
	}
}
 8001102:	e005      	b.n	8001110 <AC1+0x28>
		HAL_GPIO_WritePin(GPIO_OUT11_GPIO_Port, GPIO_OUT11_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	4803      	ldr	r0, [pc, #12]	@ (8001118 <AC1+0x30>)
 800110c:	f005 f8c0 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000

0800111c <AC2>:

void AC2(int onoff){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d106      	bne.n	8001138 <AC2+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT12_GPIO_Port, GPIO_OUT12_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001130:	4806      	ldr	r0, [pc, #24]	@ (800114c <AC2+0x30>)
 8001132:	f005 f8ad 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT12_GPIO_Port, GPIO_OUT12_Pin, GPIO_PIN_SET);
	}
}
 8001136:	e005      	b.n	8001144 <AC2+0x28>
		HAL_GPIO_WritePin(GPIO_OUT12_GPIO_Port, GPIO_OUT12_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <AC2+0x30>)
 8001140:	f005 f8a6 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000

08001150 <AC3>:

void AC3(int onoff){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d106      	bne.n	800116c <AC3+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT13_GPIO_Port, GPIO_OUT13_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <AC3+0x30>)
 8001166:	f005 f893 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT13_GPIO_Port, GPIO_OUT13_Pin, GPIO_PIN_SET);
	}
}
 800116a:	e005      	b.n	8001178 <AC3+0x28>
		HAL_GPIO_WritePin(GPIO_OUT13_GPIO_Port, GPIO_OUT13_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <AC3+0x30>)
 8001174:	f005 f88c 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000

08001184 <AC4>:

void AC4(int onoff){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d106      	bne.n	80011a0 <AC4+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT14_GPIO_Port, GPIO_OUT14_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001198:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <AC4+0x30>)
 800119a:	f005 f879 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT14_GPIO_Port, GPIO_OUT14_Pin, GPIO_PIN_SET);
	}
}
 800119e:	e005      	b.n	80011ac <AC4+0x28>
		HAL_GPIO_WritePin(GPIO_OUT14_GPIO_Port, GPIO_OUT14_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <AC4+0x30>)
 80011a8:	f005 f872 	bl	8006290 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <AC5>:

void AC5(int onoff){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <AC5+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT15_GPIO_Port, GPIO_OUT15_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011cc:	4806      	ldr	r0, [pc, #24]	@ (80011e8 <AC5+0x30>)
 80011ce:	f005 f85f 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT15_GPIO_Port, GPIO_OUT15_Pin, GPIO_PIN_SET);
	}
}
 80011d2:	e005      	b.n	80011e0 <AC5+0x28>
		HAL_GPIO_WritePin(GPIO_OUT15_GPIO_Port, GPIO_OUT15_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <AC5+0x30>)
 80011dc:	f005 f858 	bl	8006290 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <AC6>:

void AC6(int onoff){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d106      	bne.n	8001208 <AC6+0x1c>
		HAL_GPIO_WritePin(GPIO_OUT16_GPIO_Port, GPIO_OUT16_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001200:	4806      	ldr	r0, [pc, #24]	@ (800121c <AC6+0x30>)
 8001202:	f005 f845 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT16_GPIO_Port, GPIO_OUT16_Pin, GPIO_PIN_SET);
	}
}
 8001206:	e005      	b.n	8001214 <AC6+0x28>
		HAL_GPIO_WritePin(GPIO_OUT16_GPIO_Port, GPIO_OUT16_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <AC6+0x30>)
 8001210:	f005 f83e 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40021000 	.word	0x40021000

08001220 <AC7>:

void AC7(int onoff){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d105      	bne.n	800123a <AC7+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT17_GPIO_Port, GPIO_OUT17_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <AC7+0x2c>)
 8001234:	f005 f82c 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT17_GPIO_Port, GPIO_OUT17_Pin, GPIO_PIN_SET);
	}
}
 8001238:	e004      	b.n	8001244 <AC7+0x24>
		HAL_GPIO_WritePin(GPIO_OUT17_GPIO_Port, GPIO_OUT17_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <AC7+0x2c>)
 8001240:	f005 f826 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000

08001250 <AC8>:

void AC8(int onoff){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <AC8+0x1a>
		HAL_GPIO_WritePin(GPIO_OUT18_GPIO_Port, GPIO_OUT18_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <AC8+0x2c>)
 8001264:	f005 f814 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_OUT18_GPIO_Port, GPIO_OUT18_Pin, GPIO_PIN_SET);
	}
}
 8001268:	e004      	b.n	8001274 <AC8+0x24>
		HAL_GPIO_WritePin(GPIO_OUT18_GPIO_Port, GPIO_OUT18_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4803      	ldr	r0, [pc, #12]	@ (800127c <AC8+0x2c>)
 8001270:	f005 f80e 	bl	8006290 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020400 	.word	0x40020400

08001280 <DoorHeater>:
 * 챔버1 - ChamberHeater
 * 챔버2 - ChamberbackHeater
 * 기화기 - VaporizerHeater
 *
 */
void DoorHeater(int onoff){
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	AC1(onoff);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <AC1>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <ChamberHeater>:

void ChamberHeater(int onoff){
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	DC8(onoff);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff08 	bl	80010b4 <DC8>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <ChamberBackHeater>:

void ChamberBackHeater(int onoff){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	AC3(onoff);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff4b 	bl	8001150 <AC3>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <VaporizerHeater>:

void VaporizerHeater(int onoff){
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	AC4(onoff);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff5a 	bl	8001184 <AC4>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <TurnOnPeristalticPump>:
#define PERI_PWM	&htim4
#define PERI_PWM_CH	TIM_CHANNEL_3



void TurnOnPeristalticPump(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	else{
		HAL_TIM_PWM_Start(PERI_PWM, PERI_PWM_CH);  //startup PeristalticPumpPwm
	}
	*/
	//HAL_TIM_PWM_Start(PERI_PWM, PERI_PWM_CH);  //startup PeristalticPumpPwm
	HAL_GPIO_WritePin(GPIO_OUT26_GPIO_Port, GPIO_OUT26_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TurnOnPeristalticPump+0x14>)
 80012e2:	f004 ffd5 	bl	8006290 <HAL_GPIO_WritePin>

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40020400 	.word	0x40020400

080012f0 <TurnOffPeristalticPump>:

void TurnOffPeristalticPump(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Stop(PERI_PWM, PERI_PWM_CH);  //Stop PeristalticPumpPwm
	HAL_GPIO_WritePin(GPIO_OUT26_GPIO_Port, GPIO_OUT26_Pin, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2180      	movs	r1, #128	@ 0x80
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TurnOffPeristalticPump+0x14>)
 80012fa:	f004 ffc9 	bl	8006290 <HAL_GPIO_WritePin>

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40020400 	.word	0x40020400

08001308 <PeristalticSpeed>:


void PeristalticSpeed(){	// 분당 분사량 조절
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	TIM5->CNT=0;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <PeristalticSpeed+0x20>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM5->ARR = 20000;
 8001312:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <PeristalticSpeed+0x20>)
 8001314:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001318:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	else{
		TIM5->ARR = DeviceInfo.Peri1_12_Value;
	}
	*/
	HAL_TIM_PWM_Start(PERI_PWM, PERI_PWM_CH);  //startup PeristalticPumpPwm
 800131a:	2108      	movs	r1, #8
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <PeristalticSpeed+0x24>)
 800131e:	f00a f92f 	bl	800b580 <HAL_TIM_PWM_Start>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40000c00 	.word	0x40000c00
 800132c:	200005a0 	.word	0x200005a0

08001330 <PeriPump>:

void PeriPump(int onoff){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if(onoff==1){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d102      	bne.n	8001344 <PeriPump+0x14>
		TurnOnPeristalticPump();
 800133e:	f7ff ffcb 	bl	80012d8 <TurnOnPeristalticPump>
	}
	else{
		TurnOffPeristalticPump();
	}
}
 8001342:	e001      	b.n	8001348 <PeriPump+0x18>
		TurnOffPeristalticPump();
 8001344:	f7ff ffd4 	bl	80012f0 <TurnOffPeristalticPump>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <Plasma>:
int PlasmaOnTime=1;
int PlasmaOffTime=0;
int PlasmaControl_flag=0;

// ------------------- Functions -------------------
void Plasma(int onoff){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	AC7(onoff);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff61 	bl	8001220 <AC7>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <VacuumValve>:
 * 과수 - InjectionValve - GPIO_OUT5(DC)
 *
 */

//VacuumValve
void VacuumValve(int onoff){
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	DC1(onoff);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fdf8 	bl	8000f64 <DC1>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <VentValve>:

//VentValve
void VentValve(int onoff){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	DC4(onoff);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fe35 	bl	8000ff4 <DC4>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <InjectionValve>:

//InjectionValve
void InjectionValve(int onoff){
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	DC5(onoff);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fe42 	bl	8001024 <DC5>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <VacuumPump>:
#include "hardware.h"

// ------------------- Variables -------------------

// ------------------- Functions -------------------
void VacuumPump(int onoff){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	AC6(onoff);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff1b 	bl	80011ec <AC6>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <W25Q128_ChipSelect>:

void W25Q128_Init(void) {
    HAL_GPIO_WritePin(W25Q128_CS_GPIO_Port, W25Q128_CS_Pin, GPIO_PIN_SET);
}

void W25Q128_ChipSelect(uint8_t state) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
    if(state == 0) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <W25Q128_ChipSelect+0x1e>
        HAL_GPIO_WritePin(W25Q128_CS_GPIO_Port, W25Q128_CS_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d6:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <W25Q128_ChipSelect+0x34>)
 80013d8:	f004 ff5a 	bl	8006290 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(W25Q128_CS_GPIO_Port, W25Q128_CS_Pin, GPIO_PIN_SET);
    }
}
 80013dc:	e005      	b.n	80013ea <W25Q128_ChipSelect+0x2a>
        HAL_GPIO_WritePin(W25Q128_CS_GPIO_Port, W25Q128_CS_Pin, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <W25Q128_ChipSelect+0x34>)
 80013e6:	f004 ff53 	bl	8006290 <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40020000 	.word	0x40020000

080013f8 <W25Q128_WriteEnable>:

void W25Q128_WriteEnable(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    W25Q128_ChipSelect(0);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ffde 	bl	80013c0 <W25Q128_ChipSelect>
    uint8_t cmd = CMD_WRITE_ENABLE;
 8001404:	2306      	movs	r3, #6
 8001406:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 8001408:	1df9      	adds	r1, r7, #7
 800140a:	2364      	movs	r3, #100	@ 0x64
 800140c:	2201      	movs	r2, #1
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <W25Q128_WriteEnable+0x2c>)
 8001410:	f009 fa59 	bl	800a8c6 <HAL_SPI_Transmit>
    W25Q128_ChipSelect(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffd3 	bl	80013c0 <W25Q128_ChipSelect>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200004f0 	.word	0x200004f0

08001428 <W25Q128_WritePage>:

void W25Q128_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	4613      	mov	r3, r2
 8001434:	80fb      	strh	r3, [r7, #6]
    W25Q128_WriteEnable(); // 쓰기 활성화 명령을 보냄
 8001436:	f7ff ffdf 	bl	80013f8 <W25Q128_WriteEnable>

    W25Q128_ChipSelect(0); // 칩 선택
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff ffc0 	bl	80013c0 <W25Q128_ChipSelect>

    uint8_t cmd[4];
    cmd[0] = CMD_PAGE_PROGRAM;
 8001440:	2302      	movs	r3, #2
 8001442:	753b      	strb	r3, [r7, #20]
    cmd[1] = (WriteAddr & 0xFF0000) >> 16; // 주소의 상위 바이트
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	b2db      	uxtb	r3, r3
 800144a:	757b      	strb	r3, [r7, #21]
    cmd[2] = (WriteAddr & 0xFF00) >> 8;    // 주소의 중간 바이트
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b2db      	uxtb	r3, r3
 8001452:	75bb      	strb	r3, [r7, #22]
    cmd[3] = WriteAddr & 0xFF;             // 주소의 하위 바이트
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	75fb      	strb	r3, [r7, #23]

    HAL_SPI_Transmit(&hspi1, cmd, 4, 100); // 페이지 프로그램 명령과 주소 전송
 800145a:	f107 0114 	add.w	r1, r7, #20
 800145e:	2364      	movs	r3, #100	@ 0x64
 8001460:	2204      	movs	r2, #4
 8001462:	4816      	ldr	r0, [pc, #88]	@ (80014bc <W25Q128_WritePage+0x94>)
 8001464:	f009 fa2f 	bl	800a8c6 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, pBuffer, NumByteToWrite, 100); // 실제 데이터 전송
 8001468:	88fa      	ldrh	r2, [r7, #6]
 800146a:	2364      	movs	r3, #100	@ 0x64
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	4813      	ldr	r0, [pc, #76]	@ (80014bc <W25Q128_WritePage+0x94>)
 8001470:	f009 fa29 	bl	800a8c6 <HAL_SPI_Transmit>

    W25Q128_ChipSelect(1); // 칩 선택 해제
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff ffa3 	bl	80013c0 <W25Q128_ChipSelect>

    // 쓰기 작업이 완료될 때까지 대기
    uint8_t status;
    do {
        W25Q128_ChipSelect(0);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff ffa0 	bl	80013c0 <W25Q128_ChipSelect>
        HAL_SPI_Transmit(&hspi1, (uint8_t[]){CMD_READ_STATUS_REG}, 1, 100);
 8001480:	2305      	movs	r3, #5
 8001482:	743b      	strb	r3, [r7, #16]
 8001484:	f107 0110 	add.w	r1, r7, #16
 8001488:	2364      	movs	r3, #100	@ 0x64
 800148a:	2201      	movs	r2, #1
 800148c:	480b      	ldr	r0, [pc, #44]	@ (80014bc <W25Q128_WritePage+0x94>)
 800148e:	f009 fa1a 	bl	800a8c6 <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, &status, 1, 100);
 8001492:	f107 0113 	add.w	r1, r7, #19
 8001496:	2364      	movs	r3, #100	@ 0x64
 8001498:	2201      	movs	r2, #1
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <W25Q128_WritePage+0x94>)
 800149c:	f009 fb56 	bl	800ab4c <HAL_SPI_Receive>
        W25Q128_ChipSelect(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff ff8d 	bl	80013c0 <W25Q128_ChipSelect>
    } while (status & 0x01); // 쓰기 작업 중 상태 레지스터의 LSB가 1인지 확인
 80014a6:	7cfb      	ldrb	r3, [r7, #19]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e4      	bne.n	800147a <W25Q128_WritePage+0x52>
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200004f0 	.word	0x200004f0

080014c0 <W25Q128_ReadData>:

void W25Q128_ReadData(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
	W25Q128_ChipSelect(0); // 칩 선택
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ff76 	bl	80013c0 <W25Q128_ChipSelect>
    uint8_t cmd[4];
    cmd[0] = CMD_READ_DATA;
 80014d4:	2303      	movs	r3, #3
 80014d6:	753b      	strb	r3, [r7, #20]
    cmd[1] = (ReadAddr & 0xFF0000) >> 16; // 주소의 상위 바이트
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	0c1b      	lsrs	r3, r3, #16
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	757b      	strb	r3, [r7, #21]
    cmd[2] = (ReadAddr & 0xFF00) >> 8;    // 주소의 중간 바이트
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	75bb      	strb	r3, [r7, #22]
    cmd[3] = ReadAddr & 0xFF;             // 주소의 하위 바이트
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	75fb      	strb	r3, [r7, #23]
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY); // 읽기 명령과 주소 전송
 80014ee:	f107 0114 	add.w	r1, r7, #20
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	2204      	movs	r2, #4
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <W25Q128_ReadData+0x5c>)
 80014fa:	f009 f9e4 	bl	800a8c6 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, pBuffer, NumByteToRead, HAL_MAX_DELAY); // 데이터 읽기
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <W25Q128_ReadData+0x5c>)
 8001508:	f009 fb20 	bl	800ab4c <HAL_SPI_Receive>
    W25Q128_ChipSelect(1); // 칩 선택 해제
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ff57 	bl	80013c0 <W25Q128_ChipSelect>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200004f0 	.word	0x200004f0

08001520 <Write_Flash>:

__attribute__((__section__(".user_data"))) const char userConfig[1024];

extern char test1234[4];

void Write_Flash(){
 8001520:	b5b0      	push	{r4, r5, r7, lr}
 8001522:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8001526:	af00      	add	r7, sp, #0
	unsigned char ucData[1024]={};
 8001528:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800152c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	3304      	adds	r3, #4
 8001536:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f015 fb37 	bl	8016bb0 <memset>

	ucData[0]=1;
 8001542:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001546:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
	ucData[1]=2;
 800154e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001552:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001556:	2202      	movs	r2, #2
 8001558:	705a      	strb	r2, [r3, #1]
	ucData[2]=3;
 800155a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800155e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8001562:	2203      	movs	r2, #3
 8001564:	709a      	strb	r2, [r3, #2]
	ucData[3]=4;
 8001566:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800156a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 800156e:	2204      	movs	r2, #4
 8001570:	70da      	strb	r2, [r3, #3]

	HAL_FLASH_Unlock();
 8001572:	f004 fb2f 	bl	8005bd4 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <Write_Flash+0xb8>)
 8001578:	22b3      	movs	r2, #179	@ 0xb3
 800157a:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 800157c:	2102      	movs	r1, #2
 800157e:	2006      	movs	r0, #6
 8001580:	f004 fc8a 	bl	8005e98 <FLASH_Erase_Sector>

	for(int i = 0; i < 1024; i++) {
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 800158a:	e019      	b.n	80015c0 <Write_Flash+0xa0>
	 HAL_FLASH_Program(TYPEPROGRAM_BYTE, (uint32_t)&userConfig[0] + i, ucData[i]);
 800158c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <Write_Flash+0xbc>)
 8001592:	1899      	adds	r1, r3, r2
 8001594:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001598:	f2a3 4204 	subw	r2, r3, #1028	@ 0x404
 800159c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2200      	movs	r2, #0
 80015a8:	461c      	mov	r4, r3
 80015aa:	4615      	mov	r5, r2
 80015ac:	4622      	mov	r2, r4
 80015ae:	462b      	mov	r3, r5
 80015b0:	2000      	movs	r0, #0
 80015b2:	f004 fabb 	bl	8005b2c <HAL_FLASH_Program>
	for(int i = 0; i < 1024; i++) {
 80015b6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80015ba:	3301      	adds	r3, #1
 80015bc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 80015c0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015c8:	dbe0      	blt.n	800158c <Write_Flash+0x6c>
	}

	HAL_FLASH_Lock();
 80015ca:	f004 fb25 	bl	8005c18 <HAL_FLASH_Lock>
}
 80015ce:	bf00      	nop
 80015d0:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bdb0      	pop	{r4, r5, r7, pc}
 80015d8:	40023c00 	.word	0x40023c00
 80015dc:	08040000 	.word	0x08040000

080015e0 <Read_Flash>:

void Read_Flash(){
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	test1234[0]=userConfig[0];
 80015e4:	2200      	movs	r2, #0
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <Read_Flash+0x28>)
 80015e8:	701a      	strb	r2, [r3, #0]
	test1234[1]=userConfig[1];
 80015ea:	2200      	movs	r2, #0
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <Read_Flash+0x28>)
 80015ee:	705a      	strb	r2, [r3, #1]
	test1234[2]=userConfig[2];
 80015f0:	2200      	movs	r2, #0
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <Read_Flash+0x28>)
 80015f4:	709a      	strb	r2, [r3, #2]
	test1234[3]=userConfig[3];
 80015f6:	2200      	movs	r2, #0
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <Read_Flash+0x28>)
 80015fa:	70da      	strb	r2, [r3, #3]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000750 	.word	0x20000750

0800160c <HAL_TIM_PeriodElapsedCallback>:

extern unsigned char LCD_rx_data[30];
extern UART_HandleTypeDef huart1;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12e      	bne.n	800167c <HAL_TIM_PeriodElapsedCallback+0x70>
		mscounter++;
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001626:	6013      	str	r3, [r2, #0]
		if((mscounter % 10) == 0) {

		}
		if((mscounter % 100) == 0) {
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800162e:	fba3 1302 	umull	r1, r3, r3, r2
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2164      	movs	r1, #100	@ 0x64
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x3a>
			Timer_DeliSecond_Flag = 1;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
		}
		if((mscounter % 500) == 0){
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800164c:	fba3 1302 	umull	r1, r3, r3, r2
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x5a>
			Timer_Half_1s_Flag = 1;
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
		}
		if(mscounter == 1000) {
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800166e:	d105      	bne.n	800167c <HAL_TIM_PeriodElapsedCallback+0x70>
			mscounter = 0;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
			Timer_1s_Flag = 1;
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40001400 	.word	0x40001400
 800168c:	2000025c 	.word	0x2000025c
 8001690:	51eb851f 	.word	0x51eb851f
 8001694:	20000260 	.word	0x20000260
 8001698:	10624dd3 	.word	0x10624dd3
 800169c:	20000261 	.word	0x20000261
 80016a0:	20000262 	.word	0x20000262

080016a4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <HAL_UART_RxCpltCallback+0x24>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d102      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x18>
    {
    	UART_Receive_Flag = 1;
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_UART_RxCpltCallback+0x28>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
    	//
    	//HAL_UART_Receive_IT(&huart1, (uint8_t*)LCD_rx_data, 9);

    }

}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40011000 	.word	0x40011000
 80016cc:	20000263 	.word	0x20000263

080016d0 <InitLCD>:
extern char test1234[4], ReadTest[4];




void InitLCD(void){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80016d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d8:	f002 fdc0 	bl	800425c <HAL_Delay>
	DisplayPage(70);
 80016dc:	2046      	movs	r0, #70	@ 0x46
 80016de:	f000 f80f 	bl	8001700 <DisplayPage>
	HAL_Delay(100);
 80016e2:	2064      	movs	r0, #100	@ 0x64
 80016e4:	f002 fdba 	bl	800425c <HAL_Delay>
    HAL_UART_Receive_IT(LCD_USART, (uint8_t*)LCD_rx_data, 9);
 80016e8:	2209      	movs	r2, #9
 80016ea:	4903      	ldr	r1, [pc, #12]	@ (80016f8 <InitLCD+0x28>)
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <InitLCD+0x2c>)
 80016ee:	f00a fdd6 	bl	800c29e <HAL_UART_Receive_IT>
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000264 	.word	0x20000264
 80016fc:	20000630 	.word	0x20000630

08001700 <DisplayPage>:

void DisplayPage(int page){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	LCD_page[6] = page;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <DisplayPage+0x24>)
 800170e:	719a      	strb	r2, [r3, #6]
    HAL_UART_Transmit(LCD_USART, LCD_page, 7, 10);
 8001710:	230a      	movs	r3, #10
 8001712:	2207      	movs	r2, #7
 8001714:	4903      	ldr	r1, [pc, #12]	@ (8001724 <DisplayPage+0x24>)
 8001716:	4804      	ldr	r0, [pc, #16]	@ (8001728 <DisplayPage+0x28>)
 8001718:	f00a fd36 	bl	800c188 <HAL_UART_Transmit>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000000 	.word	0x20000000
 8001728:	20000630 	.word	0x20000630

0800172c <DisplayVacuumSensor>:

void DisplayVacuumSensor(){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	DisplayPageValue(0x5F,0x91,Pressure*10);
 8001730:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <DisplayVacuumSensor+0x28>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800173a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001742:	ee17 2a90 	vmov	r2, s15
 8001746:	2191      	movs	r1, #145	@ 0x91
 8001748:	205f      	movs	r0, #95	@ 0x5f
 800174a:	f000 f805 	bl	8001758 <DisplayPageValue>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000300 	.word	0x20000300

08001758 <DisplayPageValue>:

void DisplayPageValue(int page ,int index, int value){
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	unsigned char   PageValue[8] = {0x5A, 0xA5, 0x05, 0x82, 0x00, 0x00, 0x00, 0x00};
 8001764:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <DisplayPageValue+0x4c>)
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800176e:	e883 0003 	stmia.w	r3, {r0, r1}
	PageValue[4] = page;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	753b      	strb	r3, [r7, #20]
	PageValue[5] = index;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	757b      	strb	r3, [r7, #21]
	PageValue[6] = value >> 8;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	121b      	asrs	r3, r3, #8
 8001782:	b2db      	uxtb	r3, r3
 8001784:	75bb      	strb	r3, [r7, #22]
	PageValue[7] = value & 0xff;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	75fb      	strb	r3, [r7, #23]
    HAL_UART_Transmit(LCD_USART, PageValue, 8, 10);
 800178c:	f107 0110 	add.w	r1, r7, #16
 8001790:	230a      	movs	r3, #10
 8001792:	2208      	movs	r2, #8
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <DisplayPageValue+0x50>)
 8001796:	f00a fcf7 	bl	800c188 <HAL_UART_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	08018780 	.word	0x08018780
 80017a8:	20000630 	.word	0x20000630

080017ac <LCD_Process>:

void LCD_Process(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
	int iValue;
    switch(LCD_rx_data[4]) {
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <LCD_Process+0x60>)
 80017b4:	791b      	ldrb	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <LCD_Process+0x14>
 80017ba:	2b6f      	cmp	r3, #111	@ 0x6f
 80017bc:	d00a      	beq.n	80017d4 <LCD_Process+0x28>
 80017be:	e01c      	b.n	80017fa <LCD_Process+0x4e>
        case 0 :    //button
            LCD_Function_Process(LCD_rx_data[5], LCD_rx_data[8]);
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <LCD_Process+0x60>)
 80017c2:	795b      	ldrb	r3, [r3, #5]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <LCD_Process+0x60>)
 80017c8:	7a1b      	ldrb	r3, [r3, #8]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f000 f821 	bl	8001814 <LCD_Function_Process>
			break;
 80017d2:	e012      	b.n	80017fa <LCD_Process+0x4e>
        case 0x6F :
			iValue = LCD_rx_data[7];
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <LCD_Process+0x60>)
 80017d6:	79db      	ldrb	r3, [r3, #7]
 80017d8:	607b      	str	r3, [r7, #4]
			iValue <<= 8;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
			iValue |= LCD_rx_data[8];
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <LCD_Process+0x60>)
 80017e2:	7a1b      	ldrb	r3, [r3, #8]
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	607b      	str	r3, [r7, #4]
			LCD_70(LCD_rx_data[5], iValue);
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <LCD_Process+0x60>)
 80017ee:	795b      	ldrb	r3, [r3, #5]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f81e 	bl	8001834 <LCD_70>
			break;
 80017f8:	bf00      	nop
    }
    HAL_UART_Receive_IT(LCD_USART, (uint8_t*)LCD_rx_data, 9);
 80017fa:	2209      	movs	r2, #9
 80017fc:	4903      	ldr	r1, [pc, #12]	@ (800180c <LCD_Process+0x60>)
 80017fe:	4804      	ldr	r0, [pc, #16]	@ (8001810 <LCD_Process+0x64>)
 8001800:	f00a fd4d 	bl	800c29e <HAL_UART_Receive_IT>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000264 	.word	0x20000264
 8001810:	20000630 	.word	0x20000630

08001814 <LCD_Function_Process>:

void LCD_Function_Process(int index, int value){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    switch(index){
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d103      	bne.n	800182c <LCD_Function_Process+0x18>
        case 2:
        	TestButton(value);
 8001824:	6838      	ldr	r0, [r7, #0]
 8001826:	f000 f9c7 	bl	8001bb8 <TestButton>
            break;
 800182a:	bf00      	nop
    }
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <LCD_70>:

void LCD_70(int index, int value){	//
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	switch(index) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <LCD_70+0x16>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b01      	cmp	r3, #1
					DisplayPageValue(0x5F,0x71,RFIDData.production_number);
					break;
				}
			break;
		case 0x01 :
			break;
 8001848:	e1ae      	b.n	8001ba8 <LCD_70+0x374>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	3b01      	subs	r3, #1
 800184e:	2b11      	cmp	r3, #17
 8001850:	f200 81a9 	bhi.w	8001ba6 <LCD_70+0x372>
 8001854:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <LCD_70+0x28>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	080018a5 	.word	0x080018a5
 8001860:	080018cd 	.word	0x080018cd
 8001864:	08001903 	.word	0x08001903
 8001868:	08001931 	.word	0x08001931
 800186c:	0800195f 	.word	0x0800195f
 8001870:	08001983 	.word	0x08001983
 8001874:	080019a7 	.word	0x080019a7
 8001878:	080019cf 	.word	0x080019cf
 800187c:	080019f7 	.word	0x080019f7
 8001880:	08001a1b 	.word	0x08001a1b
 8001884:	08001a3f 	.word	0x08001a3f
 8001888:	08001a63 	.word	0x08001a63
 800188c:	08001a87 	.word	0x08001a87
 8001890:	08001aab 	.word	0x08001aab
 8001894:	08001acf 	.word	0x08001acf
 8001898:	08001af3 	.word	0x08001af3
 800189c:	08001b17 	.word	0x08001b17
 80018a0:	08001b8f 	.word	0x08001b8f
					if(DoorHeater_flag==1){
 80018a4:	4ba2      	ldr	r3, [pc, #648]	@ (8001b30 <LCD_70+0x2fc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <LCD_70+0x86>
						DoorHeater(0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fce7 	bl	8001280 <DoorHeater>
						DoorHeater_flag=0;
 80018b2:	4b9f      	ldr	r3, [pc, #636]	@ (8001b30 <LCD_70+0x2fc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e005      	b.n	80018c6 <LCD_70+0x92>
						DoorHeater(1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff fce0 	bl	8001280 <DoorHeater>
						DoorHeater_flag=1;
 80018c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001b30 <LCD_70+0x2fc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
					Write_Flash();
 80018c6:	f7ff fe2b 	bl	8001520 <Write_Flash>
					break;
 80018ca:	e16c      	b.n	8001ba6 <LCD_70+0x372>
					if(AC2_flag==1){
 80018cc:	4b99      	ldr	r3, [pc, #612]	@ (8001b34 <LCD_70+0x300>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <LCD_70+0xae>
						AC2(0);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fc21 	bl	800111c <AC2>
						AC2_flag=0;
 80018da:	4b96      	ldr	r3, [pc, #600]	@ (8001b34 <LCD_70+0x300>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e005      	b.n	80018ee <LCD_70+0xba>
						AC2(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff fc1a 	bl	800111c <AC2>
						AC2_flag=1;
 80018e8:	4b92      	ldr	r3, [pc, #584]	@ (8001b34 <LCD_70+0x300>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]
					Read_Flash();
 80018ee:	f7ff fe77 	bl	80015e0 <Read_Flash>
					DisplayPageValue(0x5F,0x71,test1234[0]);
 80018f2:	4b91      	ldr	r3, [pc, #580]	@ (8001b38 <LCD_70+0x304>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	2171      	movs	r1, #113	@ 0x71
 80018fa:	205f      	movs	r0, #95	@ 0x5f
 80018fc:	f7ff ff2c 	bl	8001758 <DisplayPageValue>
					break;
 8001900:	e151      	b.n	8001ba6 <LCD_70+0x372>
					if(ChamberBackHeater_flag==1){
 8001902:	4b8e      	ldr	r3, [pc, #568]	@ (8001b3c <LCD_70+0x308>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d106      	bne.n	8001918 <LCD_70+0xe4>
						ChamberBackHeater(0);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fcce 	bl	80012ac <ChamberBackHeater>
						ChamberBackHeater_flag=0;
 8001910:	4b8a      	ldr	r3, [pc, #552]	@ (8001b3c <LCD_70+0x308>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e005      	b.n	8001924 <LCD_70+0xf0>
						ChamberBackHeater(1);
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fcc7 	bl	80012ac <ChamberBackHeater>
						ChamberBackHeater_flag=1;
 800191e:	4b87      	ldr	r3, [pc, #540]	@ (8001b3c <LCD_70+0x308>)
 8001920:	2201      	movs	r2, #1
 8001922:	601a      	str	r2, [r3, #0]
					W25Q128_WritePage(test1234, 0x000000, 4);
 8001924:	2204      	movs	r2, #4
 8001926:	2100      	movs	r1, #0
 8001928:	4883      	ldr	r0, [pc, #524]	@ (8001b38 <LCD_70+0x304>)
 800192a:	f7ff fd7d 	bl	8001428 <W25Q128_WritePage>
					break;
 800192e:	e13a      	b.n	8001ba6 <LCD_70+0x372>
					if(VaporizerHeater_flag==1){
 8001930:	4b83      	ldr	r3, [pc, #524]	@ (8001b40 <LCD_70+0x30c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <LCD_70+0x112>
						VaporizerHeater(0);
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fcc2 	bl	80012c2 <VaporizerHeater>
						VaporizerHeater_flag=0;
 800193e:	4b80      	ldr	r3, [pc, #512]	@ (8001b40 <LCD_70+0x30c>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e005      	b.n	8001952 <LCD_70+0x11e>
						VaporizerHeater(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f7ff fcbb 	bl	80012c2 <VaporizerHeater>
						VaporizerHeater_flag=1;
 800194c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b40 <LCD_70+0x30c>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
					W25Q128_ReadData(ReadTest, 0x000000, 4);
 8001952:	2204      	movs	r2, #4
 8001954:	2100      	movs	r1, #0
 8001956:	487b      	ldr	r0, [pc, #492]	@ (8001b44 <LCD_70+0x310>)
 8001958:	f7ff fdb2 	bl	80014c0 <W25Q128_ReadData>
					break;
 800195c:	e123      	b.n	8001ba6 <LCD_70+0x372>
					if(AC5_flag==1){
 800195e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b48 <LCD_70+0x314>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <LCD_70+0x140>
						AC5(0);
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff fc26 	bl	80011b8 <AC5>
						AC5_flag=0;
 800196c:	4b76      	ldr	r3, [pc, #472]	@ (8001b48 <LCD_70+0x314>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
					break;
 8001972:	e118      	b.n	8001ba6 <LCD_70+0x372>
						AC5(1);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fc1f 	bl	80011b8 <AC5>
						AC5_flag=1;
 800197a:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <LCD_70+0x314>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
					break;
 8001980:	e111      	b.n	8001ba6 <LCD_70+0x372>
					if(VacuumPump_flag==1){
 8001982:	4b72      	ldr	r3, [pc, #456]	@ (8001b4c <LCD_70+0x318>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d106      	bne.n	8001998 <LCD_70+0x164>
						VacuumPump(0);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fd0c 	bl	80013a8 <VacuumPump>
						VacuumPump_flag=0;
 8001990:	4b6e      	ldr	r3, [pc, #440]	@ (8001b4c <LCD_70+0x318>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
					break;
 8001996:	e106      	b.n	8001ba6 <LCD_70+0x372>
						VacuumPump(1);
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fd05 	bl	80013a8 <VacuumPump>
						VacuumPump_flag=1;
 800199e:	4b6b      	ldr	r3, [pc, #428]	@ (8001b4c <LCD_70+0x318>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
					break;
 80019a4:	e0ff      	b.n	8001ba6 <LCD_70+0x372>
					if(Plasma_flag==1){
 80019a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b50 <LCD_70+0x31c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <LCD_70+0x188>
						Plasma(0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fcce 	bl	8001350 <Plasma>
						Plasma_flag=0;
 80019b4:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <LCD_70+0x31c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e005      	b.n	80019c8 <LCD_70+0x194>
						Plasma(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fcc7 	bl	8001350 <Plasma>
						Plasma_flag=1;
 80019c2:	4b63      	ldr	r3, [pc, #396]	@ (8001b50 <LCD_70+0x31c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
					SaveToSDCard();
 80019c8:	f000 fe88 	bl	80026dc <SaveToSDCard>
					break;
 80019cc:	e0eb      	b.n	8001ba6 <LCD_70+0x372>
					if(AC8_flag==1){
 80019ce:	4b61      	ldr	r3, [pc, #388]	@ (8001b54 <LCD_70+0x320>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d106      	bne.n	80019e4 <LCD_70+0x1b0>
						AC8(0);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fc3a 	bl	8001250 <AC8>
						AC8_flag=0;
 80019dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b54 <LCD_70+0x320>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e005      	b.n	80019f0 <LCD_70+0x1bc>
						AC8(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fc33 	bl	8001250 <AC8>
						AC8_flag=1;
 80019ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001b54 <LCD_70+0x320>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
					SaveToUSBMemory();
 80019f0:	f000 feaa 	bl	8002748 <SaveToUSBMemory>
					break;
 80019f4:	e0d7      	b.n	8001ba6 <LCD_70+0x372>
					if(VacuumValve_flag==1){
 80019f6:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <LCD_70+0x324>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d106      	bne.n	8001a0c <LCD_70+0x1d8>
						VacuumValve(0);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fcb1 	bl	8001366 <VacuumValve>
						VacuumValve_flag=0;
 8001a04:	4b54      	ldr	r3, [pc, #336]	@ (8001b58 <LCD_70+0x324>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
					break;
 8001a0a:	e0cc      	b.n	8001ba6 <LCD_70+0x372>
						VacuumValve(1);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff fcaa 	bl	8001366 <VacuumValve>
						VacuumValve_flag=1;
 8001a12:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <LCD_70+0x324>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
					break;
 8001a18:	e0c5      	b.n	8001ba6 <LCD_70+0x372>
					if(DC2_flag==1){
 8001a1a:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <LCD_70+0x328>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d106      	bne.n	8001a30 <LCD_70+0x1fc>
						DC2(0);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fab6 	bl	8000f94 <DC2>
						DC2_flag=0;
 8001a28:	4b4c      	ldr	r3, [pc, #304]	@ (8001b5c <LCD_70+0x328>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
					break;
 8001a2e:	e0ba      	b.n	8001ba6 <LCD_70+0x372>
						DC2(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff faaf 	bl	8000f94 <DC2>
						DC2_flag=1;
 8001a36:	4b49      	ldr	r3, [pc, #292]	@ (8001b5c <LCD_70+0x328>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
					break;
 8001a3c:	e0b3      	b.n	8001ba6 <LCD_70+0x372>
					if(DC3_flag==1){
 8001a3e:	4b48      	ldr	r3, [pc, #288]	@ (8001b60 <LCD_70+0x32c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d106      	bne.n	8001a54 <LCD_70+0x220>
						DC3(0);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff fabc 	bl	8000fc4 <DC3>
						DC3_flag=0;
 8001a4c:	4b44      	ldr	r3, [pc, #272]	@ (8001b60 <LCD_70+0x32c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
					break;
 8001a52:	e0a8      	b.n	8001ba6 <LCD_70+0x372>
						DC3(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fab5 	bl	8000fc4 <DC3>
						DC3_flag=1;
 8001a5a:	4b41      	ldr	r3, [pc, #260]	@ (8001b60 <LCD_70+0x32c>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
					break;
 8001a60:	e0a1      	b.n	8001ba6 <LCD_70+0x372>
					if(VentValve_flag==1){
 8001a62:	4b40      	ldr	r3, [pc, #256]	@ (8001b64 <LCD_70+0x330>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d106      	bne.n	8001a78 <LCD_70+0x244>
						VentValve(0);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fc86 	bl	800137c <VentValve>
						VentValve_flag=0;
 8001a70:	4b3c      	ldr	r3, [pc, #240]	@ (8001b64 <LCD_70+0x330>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
					break;
 8001a76:	e096      	b.n	8001ba6 <LCD_70+0x372>
						VentValve(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fc7f 	bl	800137c <VentValve>
						VentValve_flag=1;
 8001a7e:	4b39      	ldr	r3, [pc, #228]	@ (8001b64 <LCD_70+0x330>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
					break;
 8001a84:	e08f      	b.n	8001ba6 <LCD_70+0x372>
					if(InjectionValve_flag==1){
 8001a86:	4b38      	ldr	r3, [pc, #224]	@ (8001b68 <LCD_70+0x334>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d106      	bne.n	8001a9c <LCD_70+0x268>
						InjectionValve(0);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fc7f 	bl	8001392 <InjectionValve>
						InjectionValve_flag=0;
 8001a94:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <LCD_70+0x334>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
					break;
 8001a9a:	e084      	b.n	8001ba6 <LCD_70+0x372>
						InjectionValve(1);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f7ff fc78 	bl	8001392 <InjectionValve>
						InjectionValve_flag=1;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <LCD_70+0x334>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
					break;
 8001aa8:	e07d      	b.n	8001ba6 <LCD_70+0x372>
					if(DoorLatch_flag==1){
 8001aaa:	4b30      	ldr	r3, [pc, #192]	@ (8001b6c <LCD_70+0x338>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <LCD_70+0x28c>
						DoorLatch(0);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fa40 	bl	8000f38 <DoorLatch>
						DoorLatch_flag=0;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <LCD_70+0x338>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
					break;
 8001abe:	e072      	b.n	8001ba6 <LCD_70+0x372>
						DoorLatch(1);
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fa39 	bl	8000f38 <DoorLatch>
						DoorLatch_flag=1;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <LCD_70+0x338>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
					break;
 8001acc:	e06b      	b.n	8001ba6 <LCD_70+0x372>
					if(Fan_flag==1){
 8001ace:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <LCD_70+0x33c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <LCD_70+0x2b0>
						Fan(0);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fa39 	bl	8000f4e <Fan>
						Fan_flag=0;
 8001adc:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <LCD_70+0x33c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
					break;
 8001ae2:	e060      	b.n	8001ba6 <LCD_70+0x372>
						Fan(1);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff fa32 	bl	8000f4e <Fan>
						Fan_flag=1;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <LCD_70+0x33c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
					break;
 8001af0:	e059      	b.n	8001ba6 <LCD_70+0x372>
					if(ChamberHeater_flag==1){
 8001af2:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <LCD_70+0x340>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d106      	bne.n	8001b08 <LCD_70+0x2d4>
						ChamberHeater(0);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fbcb 	bl	8001296 <ChamberHeater>
						ChamberHeater_flag=0;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <LCD_70+0x340>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
					break;
 8001b06:	e04e      	b.n	8001ba6 <LCD_70+0x372>
						ChamberHeater(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fbc4 	bl	8001296 <ChamberHeater>
						ChamberHeater_flag=1;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <LCD_70+0x340>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
					break;
 8001b14:	e047      	b.n	8001ba6 <LCD_70+0x372>
					if(PeristalticPump_flag==1){
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <LCD_70+0x344>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d12e      	bne.n	8001b7c <LCD_70+0x348>
						PeristalticSpeed();
 8001b1e:	f7ff fbf3 	bl	8001308 <PeristalticSpeed>
						PeriPump(0);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fc04 	bl	8001330 <PeriPump>
						PeristalticPump_flag=0;
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <LCD_70+0x344>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
					break;
 8001b2e:	e03a      	b.n	8001ba6 <LCD_70+0x372>
 8001b30:	20000218 	.word	0x20000218
 8001b34:	2000021c 	.word	0x2000021c
 8001b38:	20000750 	.word	0x20000750
 8001b3c:	20000220 	.word	0x20000220
 8001b40:	20000224 	.word	0x20000224
 8001b44:	20000754 	.word	0x20000754
 8001b48:	20000228 	.word	0x20000228
 8001b4c:	2000022c 	.word	0x2000022c
 8001b50:	20000230 	.word	0x20000230
 8001b54:	20000234 	.word	0x20000234
 8001b58:	20000238 	.word	0x20000238
 8001b5c:	2000023c 	.word	0x2000023c
 8001b60:	20000240 	.word	0x20000240
 8001b64:	20000244 	.word	0x20000244
 8001b68:	20000248 	.word	0x20000248
 8001b6c:	2000024c 	.word	0x2000024c
 8001b70:	20000250 	.word	0x20000250
 8001b74:	20000254 	.word	0x20000254
 8001b78:	20000258 	.word	0x20000258
						PeristalticSpeed();
 8001b7c:	f7ff fbc4 	bl	8001308 <PeristalticSpeed>
						PeriPump(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff fbd5 	bl	8001330 <PeriPump>
						PeristalticPump_flag=1;
 8001b86:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <LCD_70+0x37c>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
					break;
 8001b8c:	e00b      	b.n	8001ba6 <LCD_70+0x372>
					InitRFID();
 8001b8e:	f000 f95c 	bl	8001e4a <InitRFID>
					ReadRFID();
 8001b92:	f000 f963 	bl	8001e5c <ReadRFID>
					DisplayPageValue(0x5F,0x71,RFIDData.production_number);
 8001b96:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <LCD_70+0x380>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2171      	movs	r1, #113	@ 0x71
 8001b9e:	205f      	movs	r0, #95	@ 0x5f
 8001ba0:	f7ff fdda 	bl	8001758 <DisplayPageValue>
					break;
 8001ba4:	bf00      	nop
			break;
 8001ba6:	bf00      	nop
	}
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000258 	.word	0x20000258
 8001bb4:	20000298 	.word	0x20000298

08001bb8 <TestButton>:

void TestButton(int key){	//02XX
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <DisplayPartsTESTIcon>:

void DisplayPartsTESTIcon(int index1, int index2, int value){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	unsigned char   icon_display[8] = {0x5A, 0xA5, 0x05, 0x82, 0x00, 0x00, 0x00, 0x01};
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <DisplayPartsTESTIcon+0x44>)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001be2:	e883 0003 	stmia.w	r3, {r0, r1}
	icon_display[4] = index1;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	753b      	strb	r3, [r7, #20]
	icon_display[5] = index2;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	757b      	strb	r3, [r7, #21]
	icon_display[7] = value;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(LCD_USART, icon_display, 8, 10);
 8001bf8:	f107 0110 	add.w	r1, r7, #16
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	2208      	movs	r2, #8
 8001c00:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <DisplayPartsTESTIcon+0x48>)
 8001c02:	f00a fac1 	bl	800c188 <HAL_UART_Transmit>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08018788 	.word	0x08018788
 8001c14:	20000630 	.word	0x20000630

08001c18 <DisplayIcon>:

void DisplayIcon(){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	DisplayPartsTESTIcon(0x5F,0x10,DoorHandleCheck());
 8001c1c:	f000 fdca 	bl	80027b4 <DoorHandleCheck>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	2110      	movs	r1, #16
 8001c26:	205f      	movs	r0, #95	@ 0x5f
 8001c28:	f7ff ffd0 	bl	8001bcc <DisplayPartsTESTIcon>
	DisplayPartsTESTIcon(0x5F,0x20,DoorLatchCheck());
 8001c2c:	f000 fdda 	bl	80027e4 <DoorLatchCheck>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	2120      	movs	r1, #32
 8001c36:	205f      	movs	r0, #95	@ 0x5f
 8001c38:	f7ff ffc8 	bl	8001bcc <DisplayPartsTESTIcon>
	DisplayPartsTESTIcon(0x5F,0x30,BottleCheck());
 8001c3c:	f000 fdda 	bl	80027f4 <BottleCheck>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	2130      	movs	r1, #48	@ 0x30
 8001c46:	205f      	movs	r0, #95	@ 0x5f
 8001c48:	f7ff ffc0 	bl	8001bcc <DisplayPartsTESTIcon>
	DisplayPartsTESTIcon(0x5F,0x50,LevelSensor1Check());
 8001c4c:	f000 fdea 	bl	8002824 <LevelSensor1Check>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	2150      	movs	r1, #80	@ 0x50
 8001c56:	205f      	movs	r0, #95	@ 0x5f
 8001c58:	f7ff ffb8 	bl	8001bcc <DisplayPartsTESTIcon>
	DisplayPartsTESTIcon(0x5F,0x60,LevelSensor2Check());
 8001c5c:	f000 fdfa 	bl	8002854 <LevelSensor2Check>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	2160      	movs	r1, #96	@ 0x60
 8001c66:	205f      	movs	r0, #95	@ 0x5f
 8001c68:	f7ff ffb0 	bl	8001bcc <DisplayPartsTESTIcon>
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <DisplayTemprature>:

void DisplayTemprature(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	DisplayPageValue(0x5F,0x81,Temperature[0]*10);
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <DisplayTemprature+0x80>)
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c86:	ee17 2a90 	vmov	r2, s15
 8001c8a:	2181      	movs	r1, #129	@ 0x81
 8001c8c:	205f      	movs	r0, #95	@ 0x5f
 8001c8e:	f7ff fd63 	bl	8001758 <DisplayPageValue>
	DisplayPageValue(0x5F,0x85,Temperature[1]*10);
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <DisplayTemprature+0x80>)
 8001c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c98:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca4:	ee17 2a90 	vmov	r2, s15
 8001ca8:	2185      	movs	r1, #133	@ 0x85
 8001caa:	205f      	movs	r0, #95	@ 0x5f
 8001cac:	f7ff fd54 	bl	8001758 <DisplayPageValue>
	DisplayPageValue(0x5F,0x89,Temperature[2]*10);
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <DisplayTemprature+0x80>)
 8001cb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc2:	ee17 2a90 	vmov	r2, s15
 8001cc6:	2189      	movs	r1, #137	@ 0x89
 8001cc8:	205f      	movs	r0, #95	@ 0x5f
 8001cca:	f7ff fd45 	bl	8001758 <DisplayPageValue>
	DisplayPageValue(0x5F,0x8D,Temperature[3]*10);
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <DisplayTemprature+0x80>)
 8001cd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cd4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001cd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce0:	ee17 2a90 	vmov	r2, s15
 8001ce4:	218d      	movs	r1, #141	@ 0x8d
 8001ce6:	205f      	movs	r0, #95	@ 0x5f
 8001ce8:	f7ff fd36 	bl	8001758 <DisplayPageValue>

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002c4 	.word	0x200002c4

08001cf4 <loop>:
int tempcnt=0;
extern int Pressure, Pressure2;

extern uint32_t uiDensity, adcData[10];

void loop(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	if(UART_Receive_Flag) {
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <loop+0x50>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <loop+0x16>
		UART_Receive_Flag = 0;
 8001d00:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <loop+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
		LCD_Process();
 8001d06:	f7ff fd51 	bl	80017ac <LCD_Process>
	}
	if(Timer_DeliSecond_Flag) {
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <loop+0x54>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d004      	beq.n	8001d1c <loop+0x28>
	  Timer_DeliSecond_Flag=0;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <loop+0x54>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
	  DeliSecondProcess();
 8001d18:	f000 f81e 	bl	8001d58 <DeliSecondProcess>
	}
	if(Timer_Half_1s_Flag){
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <loop+0x58>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <loop+0x3a>
	  Timer_Half_1s_Flag=0;
 8001d24:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <loop+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
	  HalfSecondProcess();
 8001d2a:	f000 f857 	bl	8001ddc <HalfSecondProcess>
	}
	if(Timer_1s_Flag) {
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <loop+0x5c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <loop+0x4c>
	  Timer_1s_Flag=0;
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <loop+0x5c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]

	  OneSecondProcess();
 8001d3c:	f000 f86a 	bl	8001e14 <OneSecondProcess>
	}
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000263 	.word	0x20000263
 8001d48:	20000260 	.word	0x20000260
 8001d4c:	20000261 	.word	0x20000261
 8001d50:	20000262 	.word	0x20000262
 8001d54:	00000000 	.word	0x00000000

08001d58 <DeliSecondProcess>:

int data1 = 0;

void DeliSecondProcess(void){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

	GetValue();
 8001d5c:	f000 fea0 	bl	8002aa0 <GetValue>
	DisplayVacuumSensor();
 8001d60:	f7ff fce4 	bl	800172c <DisplayVacuumSensor>
	data1 *= .9;
 8001d64:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <DeliSecondProcess+0x70>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbdb 	bl	8000524 <__aeabi_i2d>
 8001d6e:	a314      	add	r3, pc, #80	@ (adr r3, 8001dc0 <DeliSecondProcess+0x68>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc40 	bl	80005f8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe feea 	bl	8000b58 <__aeabi_d2iz>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a10      	ldr	r2, [pc, #64]	@ (8001dc8 <DeliSecondProcess+0x70>)
 8001d88:	6013      	str	r3, [r2, #0]
	data1 += Pressure2;
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <DeliSecondProcess+0x70>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <DeliSecondProcess+0x74>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc8 <DeliSecondProcess+0x70>)
 8001d96:	6013      	str	r3, [r2, #0]
	printf("max:4095, min:3500, data1:%d, data2:%d, data3:%d  \n",data1/10, Pressure, Pressure2);
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <DeliSecondProcess+0x70>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <DeliSecondProcess+0x78>)
 8001d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001da2:	1092      	asrs	r2, r2, #2
 8001da4:	17db      	asrs	r3, r3, #31
 8001da6:	1ad1      	subs	r1, r2, r3
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <DeliSecondProcess+0x7c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <DeliSecondProcess+0x74>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <DeliSecondProcess+0x80>)
 8001db2:	f014 fe13 	bl	80169dc <iprintf>

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	3feccccc 	.word	0x3feccccc
 8001dc8:	2000028c 	.word	0x2000028c
 8001dcc:	20000304 	.word	0x20000304
 8001dd0:	66666667 	.word	0x66666667
 8001dd4:	20000300 	.word	0x20000300
 8001dd8:	08018790 	.word	0x08018790

08001ddc <HalfSecondProcess>:

void HalfSecondProcess(void){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	DisplayIcon();
 8001de0:	f7ff ff1a 	bl	8001c18 <DisplayIcon>
	Check_Temp(tempcnt);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HalfSecondProcess+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fe15 	bl	8002a18 <Check_Temp>
	if(tempcnt>=3){
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <HalfSecondProcess+0x34>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	dd03      	ble.n	8001dfe <HalfSecondProcess+0x22>
		tempcnt=0;
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HalfSecondProcess+0x34>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e004      	b.n	8001e08 <HalfSecondProcess+0x2c>
	}
	else{
		tempcnt++;
 8001dfe:	4b04      	ldr	r3, [pc, #16]	@ (8001e10 <HalfSecondProcess+0x34>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a02      	ldr	r2, [pc, #8]	@ (8001e10 <HalfSecondProcess+0x34>)
 8001e06:	6013      	str	r3, [r2, #0]
	}
	DisplayTemprature();
 8001e08:	f7ff ff32 	bl	8001c70 <DisplayTemprature>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000288 	.word	0x20000288

08001e14 <OneSecondProcess>:

void OneSecondProcess(void){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	TenSecondCount++;
 8001e18:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <OneSecondProcess+0x24>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <OneSecondProcess+0x24>)
 8001e20:	6013      	str	r3, [r2, #0]
	if(TenSecondCount==10){
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <OneSecondProcess+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b0a      	cmp	r3, #10
 8001e28:	d104      	bne.n	8001e34 <OneSecondProcess+0x20>
		TenSecondProcess();
 8001e2a:	f000 f807 	bl	8001e3c <TenSecondProcess>
		TenSecondCount=0;
 8001e2e:	4b02      	ldr	r3, [pc, #8]	@ (8001e38 <OneSecondProcess+0x24>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
	}


}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000284 	.word	0x20000284

08001e3c <TenSecondProcess>:

void TenSecondProcess(void){
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <InitRFID>:
int checkret;

struct RFID_format RFIDData;

void InitRFID(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
	MFRC522_Init();
 8001e4e:	f000 f89d 	bl	8001f8c <MFRC522_Init>
	MFRC522_Setup('A');
 8001e52:	2041      	movs	r0, #65	@ 0x41
 8001e54:	f000 f976 	bl	8002144 <MFRC522_Setup>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <ReadRFID>:



uint32_t ReadRFID(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
	//user code begin
	uint8_t RFIDbuffer[20] = "";
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
	uint8_t CardID[5] = { 0x00, };
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	733b      	strb	r3, [r7, #12]
	uint8_t SectorKeyA[6] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
 8001e7c:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <ReadRFID+0x124>)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e84:	6018      	str	r0, [r3, #0]
 8001e86:	3304      	adds	r3, #4
 8001e88:	8019      	strh	r1, [r3, #0]

	int ret = MFRC522_Check(CardID);
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f992 	bl	80021b8 <MFRC522_Check>
 8001e94:	6278      	str	r0, [r7, #36]	@ 0x24

	ret = MFRC522_SelectTag(CardID);
 8001e96:	f107 0308 	add.w	r3, r7, #8
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fb3c 	bl	8002518 <MFRC522_SelectTag>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24

	ret = MFRC522_Auth((uint8_t) PICC_AUTHENT1B, (uint8_t) 0,
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	463a      	mov	r2, r7
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2061      	movs	r0, #97	@ 0x61
 8001eae:	f000 fb89 	bl	80025c4 <MFRC522_Auth>
 8001eb2:	6278      	str	r0, [r7, #36]	@ 0x24
				(uint8_t*) SectorKeyA, (uint8_t*) CardID);
	ret = MFRC522_Read(1, RFIDbuffer);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 fbe1 	bl	8002682 <MFRC522_Read>
 8001ec0:	6278      	str	r0, [r7, #36]	@ 0x24
#if 0
	for (int i = 0x0; i < 0x40; i += 4) {
		ret = MFRC522_Read(i, RFIDbuffer + i * 16);
	}
#endif
	if(RFIDbuffer[0]!='C' && RFIDbuffer[1]!='B' && RFIDbuffer[2]!='T'){
 8001ec2:	7c3b      	ldrb	r3, [r7, #16]
 8001ec4:	2b43      	cmp	r3, #67	@ 0x43
 8001ec6:	d019      	beq.n	8001efc <ReadRFID+0xa0>
 8001ec8:	7c7b      	ldrb	r3, [r7, #17]
 8001eca:	2b42      	cmp	r3, #66	@ 0x42
 8001ecc:	d016      	beq.n	8001efc <ReadRFID+0xa0>
 8001ece:	7cbb      	ldrb	r3, [r7, #18]
 8001ed0:	2b54      	cmp	r3, #84	@ 0x54
 8001ed2:	d013      	beq.n	8001efc <ReadRFID+0xa0>
		ret=-2;
 8001ed4:	f06f 0301 	mvn.w	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
		checkret=-2;
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <ReadRFID+0x128>)
 8001edc:	f06f 0201 	mvn.w	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
		RFIDData.production_year=0;
 8001ee2:	4b29      	ldr	r3, [pc, #164]	@ (8001f88 <ReadRFID+0x12c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
		RFIDData.production_month=0;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <ReadRFID+0x12c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
		RFIDData.production_day=0;
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <ReadRFID+0x12c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
		RFIDData.production_number=0;
 8001ef4:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <ReadRFID+0x12c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	e03c      	b.n	8001f76 <ReadRFID+0x11a>
	}
	else{
		ret=1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
		checkret=1;
 8001f00:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <ReadRFID+0x128>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

		RFIDData.production_year=(RFIDbuffer[6]-'0')*10+(RFIDbuffer[7]-'0');
 8001f06:	7dbb      	ldrb	r3, [r7, #22]
 8001f08:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	461a      	mov	r2, r3
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	3b30      	subs	r3, #48	@ 0x30
 8001f1a:	4413      	add	r3, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <ReadRFID+0x12c>)
 8001f20:	601a      	str	r2, [r3, #0]
		RFIDData.production_month=(RFIDbuffer[8]-'0')*10+(RFIDbuffer[9]-'0');
 8001f22:	7e3b      	ldrb	r3, [r7, #24]
 8001f24:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	461a      	mov	r2, r3
 8001f32:	7e7b      	ldrb	r3, [r7, #25]
 8001f34:	3b30      	subs	r3, #48	@ 0x30
 8001f36:	4413      	add	r3, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <ReadRFID+0x12c>)
 8001f3c:	605a      	str	r2, [r3, #4]
		RFIDData.production_day=(RFIDbuffer[10]-'0')*10+(RFIDbuffer[11]-'0');
 8001f3e:	7ebb      	ldrb	r3, [r7, #26]
 8001f40:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	7efb      	ldrb	r3, [r7, #27]
 8001f50:	3b30      	subs	r3, #48	@ 0x30
 8001f52:	4413      	add	r3, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <ReadRFID+0x12c>)
 8001f58:	609a      	str	r2, [r3, #8]
		RFIDData.production_number=(RFIDbuffer[12]-'0')*10+(RFIDbuffer[13]-'0');
 8001f5a:	7f3b      	ldrb	r3, [r7, #28]
 8001f5c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	461a      	mov	r2, r3
 8001f6a:	7f7b      	ldrb	r3, [r7, #29]
 8001f6c:	3b30      	subs	r3, #48	@ 0x30
 8001f6e:	4413      	add	r3, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <ReadRFID+0x12c>)
 8001f74:	60da      	str	r2, [r3, #12]
	}
	return ret;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	//user code end
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3728      	adds	r7, #40	@ 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	080187c4 	.word	0x080187c4
 8001f84:	20000294 	.word	0x20000294
 8001f88:	20000298 	.word	0x20000298

08001f8c <MFRC522_Init>:

/**
 * @brief Initialize communication with RFID reader
 */
void MFRC522_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	//MFRC522_HAL_Init();
	uint8_t temp = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	70fb      	strb	r3, [r7, #3]

	for (int i = 0; i < 20; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	e008      	b.n	8001fae <MFRC522_Init+0x22>
	{
		//MFRC522_HAL_Transmit(0x00);
		//temp = i;
#if USE_SPI
		//MFRC522_HAL_Transmit(0x00);
		HAL_SPI_Transmit(&hspi2, &temp, 1, 10);
 8001f9c:	1cf9      	adds	r1, r7, #3
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	480e      	ldr	r0, [pc, #56]	@ (8001fdc <MFRC522_Init+0x50>)
 8001fa4:	f008 fc8f 	bl	800a8c6 <HAL_SPI_Transmit>
	for (int i = 0; i < 20; i++)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3301      	adds	r3, #1
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b13      	cmp	r3, #19
 8001fb2:	ddf3      	ble.n	8001f9c <MFRC522_Init+0x10>
#else
		HAL_UART_Transmit(&huart5, &temp, 1, 10);
#endif
	}

	MFRC522_SoftReset();
 8001fb4:	f000 f86e 	bl	8002094 <MFRC522_SoftReset>
	HAL_Delay(100);
 8001fb8:	2064      	movs	r0, #100	@ 0x64
 8001fba:	f002 f94f 	bl	800425c <HAL_Delay>

	temp = MFRC522_ReadReg(MFRC522_COMMAND_REG);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 f838 	bl	8002034 <MFRC522_ReadReg>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	70fb      	strb	r3, [r7, #3]
	temp = MFRC522_ReadReg(MFRC522_VERSION_REG);
 8001fc8:	2037      	movs	r0, #55	@ 0x37
 8001fca:	f000 f833 	bl	8002034 <MFRC522_ReadReg>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	70fb      	strb	r3, [r7, #3]
	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//MFRC522_WriteReg(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//MFRC522_WriteReg(RFCfgReg, 0x7F);   		//RxGain = 48dB

	// AntennaOn();
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000548 	.word	0x20000548

08001fe0 <MFRC522_WriteReg>:
 * @brief Write to a register
 * @param address
 * @param data
 */
void MFRC522_WriteReg(uint8_t address, uint8_t data)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460a      	mov	r2, r1
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	4613      	mov	r3, r2
 8001fee:	71bb      	strb	r3, [r7, #6]
	// MSB = 0 for write
	// send register address
	uint8_t txBuffer[2];
	txBuffer[0] = (address << 1) & 0x7f;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = data;
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	737b      	strb	r3, [r7, #13]

#if USE_SPI
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2110      	movs	r1, #16
 8002006:	4809      	ldr	r0, [pc, #36]	@ (800202c <MFRC522_WriteReg+0x4c>)
 8002008:	f004 f942 	bl	8006290 <HAL_GPIO_WritePin>
	//MFRC522_HAL_Select();
	//while(SPI_I2S_GetFlagStatus(SPI1,SPI_FLAG_TXE) == RESET);
	HAL_SPI_Transmit(&hspi2, txBuffer, 2, 100);
 800200c:	f107 010c 	add.w	r1, r7, #12
 8002010:	2364      	movs	r3, #100	@ 0x64
 8002012:	2202      	movs	r2, #2
 8002014:	4806      	ldr	r0, [pc, #24]	@ (8002030 <MFRC522_WriteReg+0x50>)
 8002016:	f008 fc56 	bl	800a8c6 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(&hspi2, &data, 1, 10);
	//MFRC522_HAL_Transmit(((address << 1) & 0x7f));
	//MFRC522_HAL_Transmit(data);

	//MFRC522_HAL_Deselect();
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800201a:	2201      	movs	r2, #1
 800201c:	2110      	movs	r1, #16
 800201e:	4803      	ldr	r0, [pc, #12]	@ (800202c <MFRC522_WriteReg+0x4c>)
 8002020:	f004 f936 	bl	8006290 <HAL_GPIO_WritePin>
#else
	HAL_UART_Transmit(&huart5, txBuffer, 2, 10);
#endif
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40020000 	.word	0x40020000
 8002030:	20000548 	.word	0x20000548

08002034 <MFRC522_ReadReg>:
 * @brief Read a register
 * @param address
 * @return
 */
uint8_t MFRC522_ReadReg(uint8_t address)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]

	// MSB = 1 for read
	// send register address
	uint8_t txBuffer[2];
	uint8_t rxBuffer[2];
	txBuffer[0] = ((address << 1) & 0x7f) | 0x80;
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	b25b      	sxtb	r3, r3
 8002044:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002048:	b25b      	sxtb	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = 0xff;
 800204e:	23ff      	movs	r3, #255	@ 0xff
 8002050:	737b      	strb	r3, [r7, #13]

#if USE_SPI
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2110      	movs	r1, #16
 8002056:	480d      	ldr	r0, [pc, #52]	@ (800208c <MFRC522_ReadReg+0x58>)
 8002058:	f004 f91a 	bl	8006290 <HAL_GPIO_WritePin>
	//MFRC522_HAL_Select();

	//while(SPI_I2S_GetFlagStatus(SPI1,SPI_FLAG_TXE) == RESET);
	HAL_SPI_Transmit(&hspi2, txBuffer, 1, 100);
 800205c:	f107 010c 	add.w	r1, r7, #12
 8002060:	2364      	movs	r3, #100	@ 0x64
 8002062:	2201      	movs	r2, #1
 8002064:	480a      	ldr	r0, [pc, #40]	@ (8002090 <MFRC522_ReadReg+0x5c>)
 8002066:	f008 fc2e 	bl	800a8c6 <HAL_SPI_Transmit>
	//txBuffer[0] = 0xff;
	//HAL_SPI_TransmitReceive(&hspi2, txBuffer, rxBuffer, 2, 100);
	//HAL_SPI_TransmitReceive(&hspi2, txBuffer, rxBuffer, 1, 100);
	//while(SPI_I2S_GetFlagStatus(SPI1, SPI_FLAG_RXNE) == RESET);
	HAL_SPI_Receive(&hspi2, rxBuffer, 1, 100);
 800206a:	f107 0108 	add.w	r1, r7, #8
 800206e:	2364      	movs	r3, #100	@ 0x64
 8002070:	2201      	movs	r2, #1
 8002072:	4807      	ldr	r0, [pc, #28]	@ (8002090 <MFRC522_ReadReg+0x5c>)
 8002074:	f008 fd6a 	bl	800ab4c <HAL_SPI_Receive>
	//ret = MFRC522_HAL_Transmit(0x00);
	//HAL_SPI_Receive(&hspi2, &ret, 1, 100);

	//MFRC522_HAL_Deselect();
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2110      	movs	r1, #16
 800207c:	4803      	ldr	r0, [pc, #12]	@ (800208c <MFRC522_ReadReg+0x58>)
 800207e:	f004 f907 	bl	8006290 <HAL_GPIO_WritePin>
#else
	HAL_UART_Transmit(&huart5, txBuffer, 1, 10);
    HAL_UART_Receive(&huart5, (uint8_t*)rxBuffer, 1, 10);
#endif
	return rxBuffer[0];
 8002082:	7a3b      	ldrb	r3, [r7, #8]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40020000 	.word	0x40020000
 8002090:	20000548 	.word	0x20000548

08002094 <MFRC522_SoftReset>:

/**
 * @brief Execute soft reset
 */
void MFRC522_SoftReset(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	MFRC522_WriteReg(MFRC522_COMMAND_REG, CMD_SOFT_RESET);
 8002098:	210f      	movs	r1, #15
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff ffa0 	bl	8001fe0 <MFRC522_WriteReg>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters : reg - register address ; mask - set value
 * Return value: None
 */
void SetBitMask(unsigned char reg, unsigned char mask)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	460a      	mov	r2, r1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71bb      	strb	r3, [r7, #6]
    unsigned char tmp;
    tmp = MFRC522_ReadReg(reg);
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffbc 	bl	8002034 <MFRC522_ReadReg>
 80020bc:	4603      	mov	r3, r0
 80020be:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteReg(reg, tmp | mask);  // set bit mask
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff87 	bl	8001fe0 <MFRC522_WriteReg>
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <ClearBitMask>:
 * Description : clear RC522 register bit
 * Input parameters : reg - register address ; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(unsigned char reg, unsigned char mask)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	460a      	mov	r2, r1
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	4613      	mov	r3, r2
 80020e8:	71bb      	strb	r3, [r7, #6]
    unsigned char tmp;
    tmp = MFRC522_ReadReg(reg);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ffa1 	bl	8002034 <MFRC522_ReadReg>
 80020f2:	4603      	mov	r3, r0
 80020f4:	73fb      	strb	r3, [r7, #15]
    MFRC522_WriteReg(reg, tmp & (~mask));  // clear bit mask
 80020f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4013      	ands	r3, r2
 8002104:	b25b      	sxtb	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff67 	bl	8001fe0 <MFRC522_WriteReg>
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <AntennaOn>:
 * Description : Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
	unsigned char temp;

	temp = MFRC522_ReadReg(MFRC522_TXCONTROL_REG);
 8002120:	2014      	movs	r0, #20
 8002122:	f7ff ff87 	bl	8002034 <MFRC522_ReadReg>
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03))
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <AntennaOn+0x22>
	{
		SetBitMask(MFRC522_TXCONTROL_REG, 0x03);
 8002134:	2103      	movs	r1, #3
 8002136:	2014      	movs	r0, #20
 8002138:	f7ff ffb4 	bl	80020a4 <SetBitMask>
	}
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <MFRC522_Setup>:
} // End PCD_PerformSelfTest()

/* HAL prototypes end */

int MFRC522_Setup(char Type)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	MFRC522_SoftReset();
 800214e:	f7ff ffa1 	bl	8002094 <MFRC522_SoftReset>
	HAL_Delay(200);
 8002152:	20c8      	movs	r0, #200	@ 0xc8
 8002154:	f002 f882 	bl	800425c <HAL_Delay>

	MFRC522_WriteReg(MFRC522_TPRESCALER_REG, 0x3E);
 8002158:	213e      	movs	r1, #62	@ 0x3e
 800215a:	202b      	movs	r0, #43	@ 0x2b
 800215c:	f7ff ff40 	bl	8001fe0 <MFRC522_WriteReg>
#ifndef NOTEST
	{
		/* test read and write reg functions */
		volatile char test;
		test = MFRC522_ReadReg(MFRC522_TPRESCALER_REG);
 8002160:	202b      	movs	r0, #43	@ 0x2b
 8002162:	f7ff ff67 	bl	8002034 <MFRC522_ReadReg>
 8002166:	4603      	mov	r3, r0
 8002168:	73fb      	strb	r3, [r7, #15]
		if (test != 0x3E) {
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002170:	d002      	beq.n	8002178 <MFRC522_Setup+0x34>
			return MI_ERR;
 8002172:	f06f 0301 	mvn.w	r3, #1
 8002176:	e01a      	b.n	80021ae <MFRC522_Setup+0x6a>
		MFRC522_WriteReg(MFRC522_RELOAD_REG_H, 0);
		MFRC522_WriteReg(MFRC522_TMODE_REG, 0x8D);
		MFRC522_WriteReg(MFRC522_TPRESCALER_REG, 0x3E);
	}
#endif
	MFRC522_WriteReg(MFRC522_TMODE_REG, 0x8D);
 8002178:	218d      	movs	r1, #141	@ 0x8d
 800217a:	202a      	movs	r0, #42	@ 0x2a
 800217c:	f7ff ff30 	bl	8001fe0 <MFRC522_WriteReg>
	MFRC522_WriteReg(MFRC522_TPRESCALER_REG, 0x3E);
 8002180:	213e      	movs	r1, #62	@ 0x3e
 8002182:	202b      	movs	r0, #43	@ 0x2b
 8002184:	f7ff ff2c 	bl	8001fe0 <MFRC522_WriteReg>
	MFRC522_WriteReg(MFRC522_RELOAD_REG_L, 30);
 8002188:	211e      	movs	r1, #30
 800218a:	202d      	movs	r0, #45	@ 0x2d
 800218c:	f7ff ff28 	bl	8001fe0 <MFRC522_WriteReg>
	MFRC522_WriteReg(MFRC522_RELOAD_REG_H, 0);
 8002190:	2100      	movs	r1, #0
 8002192:	202c      	movs	r0, #44	@ 0x2c
 8002194:	f7ff ff24 	bl	8001fe0 <MFRC522_WriteReg>
	MFRC522_WriteReg(MFRC522_TXASK_REG, 0x40);
 8002198:	2140      	movs	r1, #64	@ 0x40
 800219a:	2015      	movs	r0, #21
 800219c:	f7ff ff20 	bl	8001fe0 <MFRC522_WriteReg>
	MFRC522_WriteReg(MFRC522_MODE_REG, 0x3D);
 80021a0:	213d      	movs	r1, #61	@ 0x3d
 80021a2:	2011      	movs	r0, #17
 80021a4:	f7ff ff1c 	bl	8001fe0 <MFRC522_WriteReg>

	AntennaOn();		//Open the antenna
 80021a8:	f7ff ffb7 	bl	800211a <AntennaOn>
	return MI_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <MFRC522_Check>:

int MFRC522_Check(uint8_t* id)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	int status;
	/* Must Clear Bit MFCrypto1On in Status2 reg in order to return to the card detect mode*/
	ClearBitMask(MFRC522_STATUS2_REG,(1<<3));
 80021c0:	2108      	movs	r1, #8
 80021c2:	2008      	movs	r0, #8
 80021c4:	f7ff ff89 	bl	80020da <ClearBitMask>
	Checking_Card = 1;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <MFRC522_Check+0x40>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
	//Find cards, return card type
	status = MFRC522_Request(PICC_REQIDL, id);
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	2026      	movs	r0, #38	@ 0x26
 80021d2:	f000 f813 	bl	80021fc <MFRC522_Request>
 80021d6:	60f8      	str	r0, [r7, #12]
	//status = MFRC522_Request(PICC_CMD_WUPA, id);
	Checking_Card = 0;
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <MFRC522_Check+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
	if (status == MI_OK) {
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <MFRC522_Check+0x34>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = MFRC522_Anticoll(id);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f911 	bl	800240c <MFRC522_Anticoll>
 80021ea:	60f8      	str	r0, [r7, #12]
	}
	return status;
 80021ec:	68fb      	ldr	r3, [r7, #12]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000290 	.word	0x20000290

080021fc <MFRC522_Request>:
	}
	return MI_OK;
}

int MFRC522_Request(uint8_t reqMode, uint8_t* TagType)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af02      	add	r7, sp, #8
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
	int status;
	uint16_t backBits;			//The received data bits

	MFRC522_WriteReg(MFRC522_BITFRAMING_REG, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 8002208:	2107      	movs	r1, #7
 800220a:	200d      	movs	r0, #13
 800220c:	f7ff fee8 	bl	8001fe0 <MFRC522_WriteReg>

	TagType[0] = reqMode;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	79fa      	ldrb	r2, [r7, #7]
 8002214:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(CMD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002216:	f107 030a 	add.w	r3, r7, #10
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2201      	movs	r2, #1
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	200c      	movs	r0, #12
 8002224:	f000 f812 	bl	800224c <MFRC522_ToCard>
 8002228:	60f8      	str	r0, [r7, #12]

	if ((status != MI_OK)) {
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MFRC522_Request+0x38>
		return status;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	e006      	b.n	8002242 <MFRC522_Request+0x46>
	}
	if (backBits != 0x10) {
 8002234:	897b      	ldrh	r3, [r7, #10]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d002      	beq.n	8002240 <MFRC522_Request+0x44>
		return MI_ERR;
 800223a:	f06f 0301 	mvn.w	r3, #1
 800223e:	e000      	b.n	8002242 <MFRC522_Request+0x46>
	}
	return MI_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <MFRC522_ToCard>:

int MFRC522_ToCard(uint8_t command, uint8_t* sendData,
		uint8_t sendLen, uint8_t* backData, uint16_t* backLen)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	4613      	mov	r3, r2
 800225c:	73bb      	strb	r3, [r7, #14]
	int status = MI_ERR;
 800225e:	f06f 0301 	mvn.w	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
	uint8_t irqEn = 0x00;
 8002264:	2300      	movs	r3, #0
 8002266:	76fb      	strb	r3, [r7, #27]
	uint8_t waitIRq = 0x00;
 8002268:	2300      	movs	r3, #0
 800226a:	76bb      	strb	r3, [r7, #26]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d006      	beq.n	8002280 <MFRC522_ToCard+0x34>
 8002272:	2b0e      	cmp	r3, #14
 8002274:	d109      	bne.n	800228a <MFRC522_ToCard+0x3e>
	case CMD_MF_AUTHENT: {
		irqEn = 0x12;
 8002276:	2312      	movs	r3, #18
 8002278:	76fb      	strb	r3, [r7, #27]
		waitIRq = 0x10;
 800227a:	2310      	movs	r3, #16
 800227c:	76bb      	strb	r3, [r7, #26]
		break;
 800227e:	e005      	b.n	800228c <MFRC522_ToCard+0x40>
	}
	case CMD_TRANSCEIVE: {
		irqEn = 0x77;
 8002280:	2377      	movs	r3, #119	@ 0x77
 8002282:	76fb      	strb	r3, [r7, #27]
		waitIRq = 0x30;
 8002284:	2330      	movs	r3, #48	@ 0x30
 8002286:	76bb      	strb	r3, [r7, #26]
		break;
 8002288:	e000      	b.n	800228c <MFRC522_ToCard+0x40>
	}
	default:
		break;
 800228a:	bf00      	nop
	}

	MFRC522_WriteReg(MFRC522_COMIEN_REG, irqEn | 0x80);
 800228c:	7efb      	ldrb	r3, [r7, #27]
 800228e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	2002      	movs	r0, #2
 8002298:	f7ff fea2 	bl	8001fe0 <MFRC522_WriteReg>
	ClearBitMask(MFRC522_COMIRQ_REG, 0x80);
 800229c:	2180      	movs	r1, #128	@ 0x80
 800229e:	2004      	movs	r0, #4
 80022a0:	f7ff ff1b 	bl	80020da <ClearBitMask>
	SetBitMask(MFRC522_FIFOLEVEL_REG, 0x80);
 80022a4:	2180      	movs	r1, #128	@ 0x80
 80022a6:	200a      	movs	r0, #10
 80022a8:	f7ff fefc 	bl	80020a4 <SetBitMask>

	MFRC522_WriteReg(MFRC522_COMMAND_REG, CMD_IDLE);
 80022ac:	2100      	movs	r1, #0
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff fe96 	bl	8001fe0 <MFRC522_WriteReg>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	82fb      	strh	r3, [r7, #22]
 80022b8:	e00a      	b.n	80022d0 <MFRC522_ToCard+0x84>
		MFRC522_WriteReg(MFRC522_FIFODATA_REG, sendData[i]);
 80022ba:	8afb      	ldrh	r3, [r7, #22]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	2009      	movs	r0, #9
 80022c6:	f7ff fe8b 	bl	8001fe0 <MFRC522_WriteReg>
	for (i = 0; i < sendLen; i++) {
 80022ca:	8afb      	ldrh	r3, [r7, #22]
 80022cc:	3301      	adds	r3, #1
 80022ce:	82fb      	strh	r3, [r7, #22]
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	8afa      	ldrh	r2, [r7, #22]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3ef      	bcc.n	80022ba <MFRC522_ToCard+0x6e>
	}

	//Execute the command
	MFRC522_WriteReg(MFRC522_COMMAND_REG, command);
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	4619      	mov	r1, r3
 80022de:	2001      	movs	r0, #1
 80022e0:	f7ff fe7e 	bl	8001fe0 <MFRC522_WriteReg>
	if (command == CMD_TRANSCEIVE) {
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d103      	bne.n	80022f2 <MFRC522_ToCard+0xa6>
		SetBitMask(MFRC522_BITFRAMING_REG, 0x80);//StartSend=1,transmission of data starts
 80022ea:	2180      	movs	r1, #128	@ 0x80
 80022ec:	200d      	movs	r0, #13
 80022ee:	f7ff fed9 	bl	80020a4 <SetBitMask>
	}

	//Waiting to receive data to complete
	i = 2000;//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80022f2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80022f6:	82fb      	strh	r3, [r7, #22]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		if (Checking_Card) {
 80022f8:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <MFRC522_ToCard+0x1bc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <MFRC522_ToCard+0xbc>
			HAL_Delay(16);
 8002300:	2010      	movs	r0, #16
 8002302:	f001 ffab 	bl	800425c <HAL_Delay>
 8002306:	e002      	b.n	800230e <MFRC522_ToCard+0xc2>
		} else {
			HAL_Delay(2);
 8002308:	2002      	movs	r0, #2
 800230a:	f001 ffa7 	bl	800425c <HAL_Delay>
		}
		n = MFRC522_ReadReg(MFRC522_COMIRQ_REG);
 800230e:	2004      	movs	r0, #4
 8002310:	f7ff fe90 	bl	8002034 <MFRC522_ReadReg>
 8002314:	4603      	mov	r3, r0
 8002316:	767b      	strb	r3, [r7, #25]
		i--;
 8002318:	8afb      	ldrh	r3, [r7, #22]
 800231a:	3b01      	subs	r3, #1
 800231c:	82fb      	strh	r3, [r7, #22]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800231e:	8afb      	ldrh	r3, [r7, #22]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <MFRC522_ToCard+0xee>
 8002324:	7e7b      	ldrb	r3, [r7, #25]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <MFRC522_ToCard+0xee>
 800232e:	7e7a      	ldrb	r2, [r7, #25]
 8002330:	7ebb      	ldrb	r3, [r7, #26]
 8002332:	4013      	ands	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0de      	beq.n	80022f8 <MFRC522_ToCard+0xac>

	ClearBitMask(MFRC522_BITFRAMING_REG, 0x80);		//StartSend=0
 800233a:	2180      	movs	r1, #128	@ 0x80
 800233c:	200d      	movs	r0, #13
 800233e:	f7ff fecc 	bl	80020da <ClearBitMask>

	if (i != 0) {
 8002342:	8afb      	ldrh	r3, [r7, #22]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05a      	beq.n	80023fe <MFRC522_ToCard+0x1b2>
		if (!(MFRC522_ReadReg(MFRC522_ERROR_REG) & 0x1B)) {
 8002348:	2006      	movs	r0, #6
 800234a:	f7ff fe73 	bl	8002034 <MFRC522_ReadReg>
 800234e:	4603      	mov	r3, r0
 8002350:	f003 031b 	and.w	r3, r3, #27
 8002354:	2b00      	cmp	r3, #0
 8002356:	d14f      	bne.n	80023f8 <MFRC522_ToCard+0x1ac>

			if (n & irqEn & 0x01) {
 8002358:	7e7a      	ldrb	r2, [r7, #25]
 800235a:	7efb      	ldrb	r3, [r7, #27]
 800235c:	4013      	ands	r3, r2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <MFRC522_ToCard+0x124>
				status = MI_NOTAGERR;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e001      	b.n	8002374 <MFRC522_ToCard+0x128>
			} else {
				status = MI_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
			}

			if (command == CMD_TRANSCEIVE) {
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d141      	bne.n	80023fe <MFRC522_ToCard+0x1b2>
				n = MFRC522_ReadReg(MFRC522_FIFOLEVEL_REG);
 800237a:	200a      	movs	r0, #10
 800237c:	f7ff fe5a 	bl	8002034 <MFRC522_ReadReg>
 8002380:	4603      	mov	r3, r0
 8002382:	767b      	strb	r3, [r7, #25]
				lastBits = MFRC522_ReadReg(MFRC522_CONTROL_REG) & 0x07;
 8002384:	200c      	movs	r0, #12
 8002386:	f7ff fe55 	bl	8002034 <MFRC522_ReadReg>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	757b      	strb	r3, [r7, #21]
				if (lastBits) {
 8002392:	7d7b      	ldrb	r3, [r7, #21]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <MFRC522_ToCard+0x164>
					*backLen = (n - 1) * 8 + lastBits;
 8002398:	7e7b      	ldrb	r3, [r7, #25]
 800239a:	3b01      	subs	r3, #1
 800239c:	b29b      	uxth	r3, r3
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	7d7b      	ldrb	r3, [r7, #21]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	e005      	b.n	80023bc <MFRC522_ToCard+0x170>
				} else {
					*backLen = n * 8;
 80023b0:	7e7b      	ldrb	r3, [r7, #25]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80023bc:	7e7b      	ldrb	r3, [r7, #25]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <MFRC522_ToCard+0x17a>
					n = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	767b      	strb	r3, [r7, #25]
				}
				if (n > MFRC522_MAX_LEN) {
 80023c6:	7e7b      	ldrb	r3, [r7, #25]
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d901      	bls.n	80023d0 <MFRC522_ToCard+0x184>
					n = MFRC522_MAX_LEN;
 80023cc:	2310      	movs	r3, #16
 80023ce:	767b      	strb	r3, [r7, #25]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	82fb      	strh	r3, [r7, #22]
 80023d4:	e00a      	b.n	80023ec <MFRC522_ToCard+0x1a0>
					backData[i] = MFRC522_ReadReg(MFRC522_FIFODATA_REG);
 80023d6:	8afb      	ldrh	r3, [r7, #22]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	18d4      	adds	r4, r2, r3
 80023dc:	2009      	movs	r0, #9
 80023de:	f7ff fe29 	bl	8002034 <MFRC522_ReadReg>
 80023e2:	4603      	mov	r3, r0
 80023e4:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80023e6:	8afb      	ldrh	r3, [r7, #22]
 80023e8:	3301      	adds	r3, #1
 80023ea:	82fb      	strh	r3, [r7, #22]
 80023ec:	7e7b      	ldrb	r3, [r7, #25]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8afa      	ldrh	r2, [r7, #22]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3ef      	bcc.n	80023d6 <MFRC522_ToCard+0x18a>
 80023f6:	e002      	b.n	80023fe <MFRC522_ToCard+0x1b2>
				}
			}
		} else {
			status = MI_ERR;
 80023f8:	f06f 0301 	mvn.w	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
		}
	}

	return status;
 80023fe:	69fb      	ldr	r3, [r7, #28]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3724      	adds	r7, #36	@ 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	20000290 	.word	0x20000290

0800240c <MFRC522_Anticoll>:

int MFRC522_Anticoll(uint8_t* serNum)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
	int status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	72bb      	strb	r3, [r7, #10]
	uint16_t unLen;

	MFRC522_WriteReg(MFRC522_BITFRAMING_REG, 0x00);//TxLastBists = BitFramingReg[2..0]
 8002418:	2100      	movs	r1, #0
 800241a:	200d      	movs	r0, #13
 800241c:	f7ff fde0 	bl	8001fe0 <MFRC522_WriteReg>

	serNum[0] = PICC_ANTICOLL;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2293      	movs	r2, #147	@ 0x93
 8002424:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3301      	adds	r3, #1
 800242a:	2220      	movs	r2, #32
 800242c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(CMD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	200c      	movs	r0, #12
 800243c:	f7ff ff06 	bl	800224c <MFRC522_ToCard>
 8002440:	60f8      	str	r0, [r7, #12]

	if (status == MI_OK) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d119      	bne.n	800247c <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8002448:	2300      	movs	r3, #0
 800244a:	72fb      	strb	r3, [r7, #11]
 800244c:	e009      	b.n	8002462 <MFRC522_Anticoll+0x56>
			serNumCheck ^= serNum[i];
 800244e:	7afb      	ldrb	r3, [r7, #11]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	7abb      	ldrb	r3, [r7, #10]
 8002458:	4053      	eors	r3, r2
 800245a:	72bb      	strb	r3, [r7, #10]
		for (i = 0; i < 4; i++) {
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	3301      	adds	r3, #1
 8002460:	72fb      	strb	r3, [r7, #11]
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d9f2      	bls.n	800244e <MFRC522_Anticoll+0x42>
		}
		/* check sum with last byte*/
		if (serNumCheck != serNum[i]) {
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	7aba      	ldrb	r2, [r7, #10]
 8002472:	429a      	cmp	r2, r3
 8002474:	d002      	beq.n	800247c <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8002476:	f06f 0301 	mvn.w	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
		}
	}
	return status;
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t* pIndata, uint8_t len, uint8_t* pOutData)
{
 8002486:	b590      	push	{r4, r7, lr}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	460b      	mov	r3, r1
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	ClearBitMask(MFRC522_DIVIRQ_REG, 0x04);			//CRCIrq = 0
 8002494:	2104      	movs	r1, #4
 8002496:	2005      	movs	r0, #5
 8002498:	f7ff fe1f 	bl	80020da <ClearBitMask>
	SetBitMask(MFRC522_FIFOLEVEL_REG, 0x80);	//Clear the FIFO pointer
 800249c:	2180      	movs	r1, #128	@ 0x80
 800249e:	200a      	movs	r0, #10
 80024a0:	f7ff fe00 	bl	80020a4 <SetBitMask>
	//Write_MFRC522(CommandReg, CMD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
 80024a8:	e00a      	b.n	80024c0 <MFRC522_CalculateCRC+0x3a>
		MFRC522_WriteReg(MFRC522_FIFODATA_REG, *(pIndata + i));
 80024aa:	7dfb      	ldrb	r3, [r7, #23]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	2009      	movs	r0, #9
 80024b6:	f7ff fd93 	bl	8001fe0 <MFRC522_WriteReg>
	for (i = 0; i < len; i++) {
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	3301      	adds	r3, #1
 80024be:	75fb      	strb	r3, [r7, #23]
 80024c0:	7dfa      	ldrb	r2, [r7, #23]
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d3f0      	bcc.n	80024aa <MFRC522_CalculateCRC+0x24>
	}
	MFRC522_WriteReg(MFRC522_COMMAND_REG, CMD_CALC_CRC);
 80024c8:	2103      	movs	r1, #3
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff fd88 	bl	8001fe0 <MFRC522_WriteReg>

	//Wait CRC calculation is complete
	i = 0xFF;
 80024d0:	23ff      	movs	r3, #255	@ 0xff
 80024d2:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadReg(MFRC522_DIVIRQ_REG);
 80024d4:	2005      	movs	r0, #5
 80024d6:	f7ff fdad 	bl	8002034 <MFRC522_ReadReg>
 80024da:	4603      	mov	r3, r0
 80024dc:	75bb      	strb	r3, [r7, #22]
		i--;
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <MFRC522_CalculateCRC+0x6e>
 80024ea:	7dbb      	ldrb	r3, [r7, #22]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = MFRC522_ReadReg(MFRC522_CRCRESULT_REG_L);
 80024f4:	2022      	movs	r0, #34	@ 0x22
 80024f6:	f7ff fd9d 	bl	8002034 <MFRC522_ReadReg>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadReg(MFRC522_CRCRESULT_REG_H);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	1c5c      	adds	r4, r3, #1
 8002506:	2021      	movs	r0, #33	@ 0x21
 8002508:	f7ff fd94 	bl	8002034 <MFRC522_ReadReg>
 800250c:	4603      	mov	r3, r0
 800250e:	7023      	strb	r3, [r4, #0]
}
 8002510:	bf00      	nop
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}

08002518 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b090      	sub	sp, #64	@ 0x40
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	int status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[32] = "";
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
 8002534:	615a      	str	r2, [r3, #20]
 8002536:	619a      	str	r2, [r3, #24]

	buffer[0] = PICC_SElECTTAG;
 8002538:	2393      	movs	r3, #147	@ 0x93
 800253a:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0x70;
 800253c:	2370      	movs	r3, #112	@ 0x70
 800253e:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < 5; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002546:	e010      	b.n	800256a <MFRC522_SelectTag+0x52>
		buffer[i + 2] = *(serNum + i);
 8002548:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	441a      	add	r2, r3
 8002550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002554:	3302      	adds	r3, #2
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	3338      	adds	r3, #56	@ 0x38
 800255a:	443b      	add	r3, r7
 800255c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < 5; i++) {
 8002560:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002564:	3301      	adds	r3, #1
 8002566:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800256a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800256e:	2b04      	cmp	r3, #4
 8002570:	d9ea      	bls.n	8002548 <MFRC522_SelectTag+0x30>
	}
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);	//Fill [7:8] with 2byte CRC
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	1dda      	adds	r2, r3, #7
 8002578:	f107 030c 	add.w	r3, r7, #12
 800257c:	2107      	movs	r1, #7
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff81 	bl	8002486 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(CMD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8002584:	f107 020c 	add.w	r2, r7, #12
 8002588:	f107 010c 	add.w	r1, r7, #12
 800258c:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	2209      	movs	r2, #9
 8002596:	200c      	movs	r0, #12
 8002598:	f7ff fe58 	bl	800224c <MFRC522_ToCard>
 800259c:	6338      	str	r0, [r7, #48]	@ 0x30

	if ((status == MI_OK) && (recvBits == 0x18)) {
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <MFRC522_SelectTag+0x9a>
 80025a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	d103      	bne.n	80025b2 <MFRC522_SelectTag+0x9a>
		size = buffer[0];
 80025aa:	7b3b      	ldrb	r3, [r7, #12]
 80025ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80025b0:	e002      	b.n	80025b8 <MFRC522_SelectTag+0xa0>
	} else {
		size = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	}

	return size;
 80025b8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3738      	adds	r7, #56	@ 0x38
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <MFRC522_Auth>:

int MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr,
		uint8_t* Sectorkey, uint8_t* serNum)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	@ 0x30
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	460b      	mov	r3, r1
 80025d4:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	753b      	strb	r3, [r7, #20]
	buff[1] = BlockAddr;
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	757b      	strb	r3, [r7, #21]
	for (i = 0; i < 6; i++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80025e4:	e010      	b.n	8002608 <MFRC522_Auth+0x44>
		buff[i + 2] = *(Sectorkey + i);
 80025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	441a      	add	r2, r3
 80025ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025f2:	3302      	adds	r3, #2
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	3328      	adds	r3, #40	@ 0x28
 80025f8:	443b      	add	r3, r7
 80025fa:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 6; i++) {
 80025fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002602:	3301      	adds	r3, #1
 8002604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800260c:	2b05      	cmp	r3, #5
 800260e:	d9ea      	bls.n	80025e6 <MFRC522_Auth+0x22>
	}
	for (i = 0; i < 4; i++) {
 8002610:	2300      	movs	r3, #0
 8002612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002616:	e010      	b.n	800263a <MFRC522_Auth+0x76>
		buff[i + 8] = *(serNum + i);
 8002618:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	441a      	add	r2, r3
 8002620:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002624:	3308      	adds	r3, #8
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	3328      	adds	r3, #40	@ 0x28
 800262a:	443b      	add	r3, r7
 800262c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 4; i++) {
 8002630:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002634:	3301      	adds	r3, #1
 8002636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800263a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800263e:	2b03      	cmp	r3, #3
 8002640:	d9ea      	bls.n	8002618 <MFRC522_Auth+0x54>
	}
	status = MFRC522_ToCard(CMD_MF_AUTHENT, buff, 12, buff, &recvBits);
 8002642:	f107 0214 	add.w	r2, r7, #20
 8002646:	f107 0114 	add.w	r1, r7, #20
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	220c      	movs	r2, #12
 8002654:	200e      	movs	r0, #14
 8002656:	f7ff fdf9 	bl	800224c <MFRC522_ToCard>
 800265a:	6278      	str	r0, [r7, #36]	@ 0x24

	if ((status != MI_OK)
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <MFRC522_Auth+0xae>
			|| (!(MFRC522_ReadReg(MFRC522_STATUS2_REG) & 0x08))) {
 8002662:	2008      	movs	r0, #8
 8002664:	f7ff fce6 	bl	8002034 <MFRC522_ReadReg>
 8002668:	4603      	mov	r3, r0
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <MFRC522_Auth+0xb4>
		status = MI_ERR;
 8002672:	f06f 0301 	mvn.w	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	return status;
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800267a:	4618      	mov	r0, r3
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <MFRC522_Read>:

int MFRC522_Read(uint8_t blockAddr, uint8_t* recvData)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af02      	add	r7, sp, #8
 8002688:	4603      	mov	r3, r0
 800268a:	6039      	str	r1, [r7, #0]
 800268c:	71fb      	strb	r3, [r7, #7]
	int status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2230      	movs	r2, #48	@ 0x30
 8002692:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	79fa      	ldrb	r2, [r7, #7]
 800269a:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData, 2, &recvData[2]);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	3302      	adds	r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	2102      	movs	r1, #2
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f7ff feee 	bl	8002486 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(CMD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 80026aa:	f107 030a 	add.w	r3, r7, #10
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2204      	movs	r2, #4
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	200c      	movs	r0, #12
 80026b8:	f7ff fdc8 	bl	800224c <MFRC522_ToCard>
 80026bc:	60f8      	str	r0, [r7, #12]

	if ((status != MI_OK) || (unLen != 0x90)) {
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <MFRC522_Read+0x48>
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	2b90      	cmp	r3, #144	@ 0x90
 80026c8:	d002      	beq.n	80026d0 <MFRC522_Read+0x4e>
		return MI_ERR;
 80026ca:	f06f 0301 	mvn.w	r3, #1
 80026ce:	e000      	b.n	80026d2 <MFRC522_Read+0x50>
	}

	return unLen;
 80026d0:	897b      	ldrh	r3, [r7, #10]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <SaveToSDCard>:
extern FIL SDFile;       /* File object for SD */
FIL MyFile;

FRESULT SDres;

void SaveToSDCard(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
        }
        f_mount(NULL, SDPath, 1);
    }
    */

	SDres=f_mount(&SDFatFS, SDPath, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	4913      	ldr	r1, [pc, #76]	@ (8002730 <SaveToSDCard+0x54>)
 80026e4:	4813      	ldr	r0, [pc, #76]	@ (8002734 <SaveToSDCard+0x58>)
 80026e6:	f012 f89d 	bl	8014824 <f_mount>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <SaveToSDCard+0x5c>)
 80026f0:	701a      	strb	r2, [r3, #0]
    if(SDres == FR_OK) {
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <SaveToSDCard+0x5c>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <SaveToSDCard+0x50>
    	SDres=f_open(&SDFile, "SD_FILE.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 80026fa:	220a      	movs	r2, #10
 80026fc:	490f      	ldr	r1, [pc, #60]	@ (800273c <SaveToSDCard+0x60>)
 80026fe:	4810      	ldr	r0, [pc, #64]	@ (8002740 <SaveToSDCard+0x64>)
 8002700:	f012 f8d6 	bl	80148b0 <f_open>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <SaveToSDCard+0x5c>)
 800270a:	701a      	strb	r2, [r3, #0]
        if(SDres == FR_OK) {
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <SaveToSDCard+0x5c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <SaveToSDCard+0x46>
            f_printf(&SDFile, "Hello, SD Card!\n");
 8002714:	490b      	ldr	r1, [pc, #44]	@ (8002744 <SaveToSDCard+0x68>)
 8002716:	480a      	ldr	r0, [pc, #40]	@ (8002740 <SaveToSDCard+0x64>)
 8002718:	f012 fd18 	bl	801514c <f_printf>
            f_close(&SDFile);
 800271c:	4808      	ldr	r0, [pc, #32]	@ (8002740 <SaveToSDCard+0x64>)
 800271e:	f012 fc74 	bl	801500a <f_close>
        }
        f_mount(NULL, SDPath, 1);
 8002722:	2201      	movs	r2, #1
 8002724:	4902      	ldr	r1, [pc, #8]	@ (8002730 <SaveToSDCard+0x54>)
 8002726:	2000      	movs	r0, #0
 8002728:	f012 f87c 	bl	8014824 <f_mount>
    }

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000784 	.word	0x20000784
 8002734:	20000788 	.word	0x20000788
 8002738:	200002c0 	.word	0x200002c0
 800273c:	080188a4 	.word	0x080188a4
 8002740:	200009bc 	.word	0x200009bc
 8002744:	080188b0 	.word	0x080188b0

08002748 <SaveToUSBMemory>:
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END USB_Error_Handler */
}

void SaveToUSBMemory(void) {
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	USBres=f_mount(&USBHFatFS, USBHPath, 0);;
 800274c:	2200      	movs	r2, #0
 800274e:	4913      	ldr	r1, [pc, #76]	@ (800279c <SaveToUSBMemory+0x54>)
 8002750:	4813      	ldr	r0, [pc, #76]	@ (80027a0 <SaveToUSBMemory+0x58>)
 8002752:	f012 f867 	bl	8014824 <f_mount>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <SaveToUSBMemory+0x5c>)
 800275c:	701a      	strb	r2, [r3, #0]
    if( USBres == FR_OK) {
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <SaveToUSBMemory+0x5c>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <SaveToUSBMemory+0x50>
    	USBres=f_open(&USBHFile, "USB_FILE.TXT", FA_CREATE_ALWAYS | FA_WRITE);
 8002766:	220a      	movs	r2, #10
 8002768:	490f      	ldr	r1, [pc, #60]	@ (80027a8 <SaveToUSBMemory+0x60>)
 800276a:	4810      	ldr	r0, [pc, #64]	@ (80027ac <SaveToUSBMemory+0x64>)
 800276c:	f012 f8a0 	bl	80148b0 <f_open>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <SaveToUSBMemory+0x5c>)
 8002776:	701a      	strb	r2, [r3, #0]
        if(USBres == FR_OK) {
 8002778:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <SaveToUSBMemory+0x5c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <SaveToUSBMemory+0x46>
            f_printf(&USBHFile, "Hello, USB Memory!\n");
 8002780:	490b      	ldr	r1, [pc, #44]	@ (80027b0 <SaveToUSBMemory+0x68>)
 8002782:	480a      	ldr	r0, [pc, #40]	@ (80027ac <SaveToUSBMemory+0x64>)
 8002784:	f012 fce2 	bl	801514c <f_printf>
            f_close(&USBHFile);
 8002788:	4808      	ldr	r0, [pc, #32]	@ (80027ac <SaveToUSBMemory+0x64>)
 800278a:	f012 fc3e 	bl	801500a <f_close>
        }
        f_mount(NULL, USBHPath, 1);
 800278e:	2201      	movs	r2, #1
 8002790:	4902      	ldr	r1, [pc, #8]	@ (800279c <SaveToUSBMemory+0x54>)
 8002792:	2000      	movs	r0, #0
 8002794:	f012 f846 	bl	8014824 <f_mount>
    }
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000bf0 	.word	0x20000bf0
 80027a0:	20000bf4 	.word	0x20000bf4
 80027a4:	200002c1 	.word	0x200002c1
 80027a8:	080188c4 	.word	0x080188c4
 80027ac:	20000e28 	.word	0x20000e28
 80027b0:	080188d4 	.word	0x080188d4

080027b4 <DoorHandleCheck>:
int DoorCheckcnt=0;

// ------------------- Functions -------------------


int DoorHandleCheck(){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
	int DoorHandle_flag=0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(DoorHandle_Port, DoorHandle_Pin)==1){
 80027be:	2110      	movs	r1, #16
 80027c0:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <DoorHandleCheck+0x2c>)
 80027c2:	f003 fd4d 	bl	8006260 <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <DoorHandleCheck+0x1e>
		DoorHandle_flag=0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	e001      	b.n	80027d6 <DoorHandleCheck+0x22>
	}
	else{
		DoorHandle_flag=1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	607b      	str	r3, [r7, #4]
	}
	return DoorHandle_flag;
 80027d6:	687b      	ldr	r3, [r7, #4]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40020800 	.word	0x40020800

080027e4 <DoorLatchCheck>:


int DoorLatchCheck(){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	//return Limit1();
	return ValveCheck();	//테스트
 80027e8:	f000 f9d0 	bl	8002b8c <ValveCheck>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <BottleCheck>:

int BottleCheck(){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	int BottleSW_flag=0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(BottleSW_Port, BottleSW_Pin)==1){
 80027fe:	2102      	movs	r1, #2
 8002800:	4807      	ldr	r0, [pc, #28]	@ (8002820 <BottleCheck+0x2c>)
 8002802:	f003 fd2d 	bl	8006260 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d102      	bne.n	8002812 <BottleCheck+0x1e>
		BottleSW_flag=0;
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	e001      	b.n	8002816 <BottleCheck+0x22>
	}
	else{
		BottleSW_flag=1;
 8002812:	2301      	movs	r3, #1
 8002814:	607b      	str	r3, [r7, #4]
	}
	return BottleSW_flag;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40020800 	.word	0x40020800

08002824 <LevelSensor1Check>:
#define LevelSensor1_Pin	GPIO_IN6_Pin

#define LevelSensor2_Port	GPIO_IN7_GPIO_Port
#define LevelSensor2_Pin	GPIO_IN7_Pin

int LevelSensor1Check(){
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
	int LiquidSensor_flag=0;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(LevelSensor1_Port, LevelSensor1_Pin)==1){
 800282e:	2120      	movs	r1, #32
 8002830:	4807      	ldr	r0, [pc, #28]	@ (8002850 <LevelSensor1Check+0x2c>)
 8002832:	f003 fd15 	bl	8006260 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <LevelSensor1Check+0x1e>
		LiquidSensor_flag=1;
 800283c:	2301      	movs	r3, #1
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e001      	b.n	8002846 <LevelSensor1Check+0x22>
	}
	else{
		LiquidSensor_flag=0;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
	}
	return LiquidSensor_flag;
 8002846:	687b      	ldr	r3, [r7, #4]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40020800 	.word	0x40020800

08002854 <LevelSensor2Check>:

int LevelSensor2Check(){
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
	int LiquidSensor_flag=0;
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
	if(HAL_GPIO_ReadPin(LevelSensor2_Port, LevelSensor2_Pin)==1){
 800285e:	2101      	movs	r1, #1
 8002860:	4807      	ldr	r0, [pc, #28]	@ (8002880 <LevelSensor2Check+0x2c>)
 8002862:	f003 fcfd 	bl	8006260 <HAL_GPIO_ReadPin>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <LevelSensor2Check+0x1e>
		LiquidSensor_flag=1;
 800286c:	2301      	movs	r3, #1
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	e001      	b.n	8002876 <LevelSensor2Check+0x22>
	}
	else{
		LiquidSensor_flag=0;
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
	}
	return LiquidSensor_flag;
 8002876:	687b      	ldr	r3, [r7, #4]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40020400 	.word	0x40020400

08002884 <max6675ReadReg>:


// ------------------- Functions -------------------

uint8_t max6675ReadReg(uint16_t *reg, int Channel)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef hal_answer = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]

	uint8_t temp[2] = {0};
 8002892:	2300      	movs	r3, #0
 8002894:	81bb      	strh	r3, [r7, #12]
	//__disable_irq();
	if(Channel==0){
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d115      	bne.n	80028c8 <max6675ReadReg+0x44>
		HAL_GPIO_WritePin(TEMP1_Port, TEMP1_Pin, GPIO_PIN_RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028a2:	484b      	ldr	r0, [pc, #300]	@ (80029d0 <max6675ReadReg+0x14c>)
 80028a4:	f003 fcf4 	bl	8006290 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 80028a8:	f107 010c 	add.w	r1, r7, #12
 80028ac:	2364      	movs	r3, #100	@ 0x64
 80028ae:	2202      	movs	r2, #2
 80028b0:	4848      	ldr	r0, [pc, #288]	@ (80029d4 <max6675ReadReg+0x150>)
 80028b2:	f008 f94b 	bl	800ab4c <HAL_SPI_Receive>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(TEMP1_Port, TEMP1_Pin, GPIO_PIN_SET);
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028c0:	4843      	ldr	r0, [pc, #268]	@ (80029d0 <max6675ReadReg+0x14c>)
 80028c2:	f003 fce5 	bl	8006290 <HAL_GPIO_WritePin>
 80028c6:	e062      	b.n	800298e <max6675ReadReg+0x10a>
	}
	else if(Channel==1){
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d115      	bne.n	80028fa <max6675ReadReg+0x76>
		HAL_GPIO_WritePin(TEMP2_Port, TEMP2_Pin, GPIO_PIN_RESET);
 80028ce:	2200      	movs	r2, #0
 80028d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028d4:	483e      	ldr	r0, [pc, #248]	@ (80029d0 <max6675ReadReg+0x14c>)
 80028d6:	f003 fcdb 	bl	8006290 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 80028da:	f107 010c 	add.w	r1, r7, #12
 80028de:	2364      	movs	r3, #100	@ 0x64
 80028e0:	2202      	movs	r2, #2
 80028e2:	483c      	ldr	r0, [pc, #240]	@ (80029d4 <max6675ReadReg+0x150>)
 80028e4:	f008 f932 	bl	800ab4c <HAL_SPI_Receive>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(TEMP2_Port, TEMP2_Pin, GPIO_PIN_SET);
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028f2:	4837      	ldr	r0, [pc, #220]	@ (80029d0 <max6675ReadReg+0x14c>)
 80028f4:	f003 fccc 	bl	8006290 <HAL_GPIO_WritePin>
 80028f8:	e049      	b.n	800298e <max6675ReadReg+0x10a>
	}
	else if(Channel==2){
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d115      	bne.n	800292c <max6675ReadReg+0xa8>
		HAL_GPIO_WritePin(TEMP3_Port, TEMP3_Pin, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002906:	4832      	ldr	r0, [pc, #200]	@ (80029d0 <max6675ReadReg+0x14c>)
 8002908:	f003 fcc2 	bl	8006290 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 800290c:	f107 010c 	add.w	r1, r7, #12
 8002910:	2364      	movs	r3, #100	@ 0x64
 8002912:	2202      	movs	r2, #2
 8002914:	482f      	ldr	r0, [pc, #188]	@ (80029d4 <max6675ReadReg+0x150>)
 8002916:	f008 f919 	bl	800ab4c <HAL_SPI_Receive>
 800291a:	4603      	mov	r3, r0
 800291c:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(TEMP3_Port, TEMP3_Pin, GPIO_PIN_SET);
 800291e:	2201      	movs	r2, #1
 8002920:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002924:	482a      	ldr	r0, [pc, #168]	@ (80029d0 <max6675ReadReg+0x14c>)
 8002926:	f003 fcb3 	bl	8006290 <HAL_GPIO_WritePin>
 800292a:	e030      	b.n	800298e <max6675ReadReg+0x10a>
	}
	else if(Channel==3){
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d115      	bne.n	800295e <max6675ReadReg+0xda>
		HAL_GPIO_WritePin(TEMP4_Port, TEMP4_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002938:	4827      	ldr	r0, [pc, #156]	@ (80029d8 <max6675ReadReg+0x154>)
 800293a:	f003 fca9 	bl	8006290 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 800293e:	f107 010c 	add.w	r1, r7, #12
 8002942:	2364      	movs	r3, #100	@ 0x64
 8002944:	2202      	movs	r2, #2
 8002946:	4823      	ldr	r0, [pc, #140]	@ (80029d4 <max6675ReadReg+0x150>)
 8002948:	f008 f900 	bl	800ab4c <HAL_SPI_Receive>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(TEMP4_Port, TEMP4_Pin, GPIO_PIN_SET);
 8002950:	2201      	movs	r2, #1
 8002952:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002956:	4820      	ldr	r0, [pc, #128]	@ (80029d8 <max6675ReadReg+0x154>)
 8002958:	f003 fc9a 	bl	8006290 <HAL_GPIO_WritePin>
 800295c:	e017      	b.n	800298e <max6675ReadReg+0x10a>
	}
	else if(Channel==4){
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d114      	bne.n	800298e <max6675ReadReg+0x10a>
		HAL_GPIO_WritePin(TEMP5_Port, TEMP5_Pin, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800296a:	481b      	ldr	r0, [pc, #108]	@ (80029d8 <max6675ReadReg+0x154>)
 800296c:	f003 fc90 	bl	8006290 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		hal_answer = HAL_SPI_Receive(MAX6675_SPI, temp, 2, 100);
 8002970:	f107 010c 	add.w	r1, r7, #12
 8002974:	2364      	movs	r3, #100	@ 0x64
 8002976:	2202      	movs	r2, #2
 8002978:	4816      	ldr	r0, [pc, #88]	@ (80029d4 <max6675ReadReg+0x150>)
 800297a:	f008 f8e7 	bl	800ab4c <HAL_SPI_Receive>
 800297e:	4603      	mov	r3, r0
 8002980:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(TEMP5_Port, TEMP5_Pin, GPIO_PIN_SET);
 8002982:	2201      	movs	r2, #1
 8002984:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002988:	4813      	ldr	r0, [pc, #76]	@ (80029d8 <max6675ReadReg+0x154>)
 800298a:	f003 fc81 	bl	8006290 <HAL_GPIO_WritePin>
	}
	else{

	}
	//__enable_irq();
	if(hal_answer == HAL_OK)
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d117      	bne.n	80029c4 <max6675ReadReg+0x140>
	{
		if(temp[1] & 0x04) return MAX6675_ERROR;
 8002994:	7b7b      	ldrb	r3, [r7, #13]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <max6675ReadReg+0x11e>
 800299e:	2300      	movs	r3, #0
 80029a0:	e011      	b.n	80029c6 <max6675ReadReg+0x142>

		*reg = (uint16_t)(temp[1]>>3);
 80029a2:	7b7b      	ldrb	r3, [r7, #13]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	801a      	strh	r2, [r3, #0]
		*reg |=(uint16_t)(temp[0]<<5);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	7b3b      	ldrb	r3, [r7, #12]
 80029b4:	015b      	lsls	r3, r3, #5
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4313      	orrs	r3, r2
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	801a      	strh	r2, [r3, #0]

		return MAX6675_OK;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <max6675ReadReg+0x142>
	}
	return MAX6675_ERROR;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40020400 	.word	0x40020400
 80029d4:	20000548 	.word	0x20000548
 80029d8:	40021000 	.word	0x40021000

080029dc <max6675Temp>:

float max6675Temp(uint16_t reg)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
	return reg*0.25;
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd9b 	bl	8000524 <__aeabi_i2d>
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <max6675Temp+0x38>)
 80029f4:	f7fd fe00 	bl	80005f8 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f8d2 	bl	8000ba8 <__aeabi_d2f>
 8002a04:	4603      	mov	r3, r0
 8002a06:	ee07 3a90 	vmov	s15, r3
}
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	3fd00000 	.word	0x3fd00000

08002a18 <Check_Temp>:
void Check_Temp(int Channel){	//SPI통신 - 모듈 온도 측정
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	uint8_t answer = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
	uint16_t reg = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	81bb      	strh	r3, [r7, #12]
	Temperature[Channel]=0;
 8002a28:	4a14      	ldr	r2, [pc, #80]	@ (8002a7c <Check_Temp+0x64>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
	answer = max6675ReadReg(&reg,Channel);
 8002a36:	f107 030c 	add.w	r3, r7, #12
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff21 	bl	8002884 <max6675ReadReg>
 8002a42:	4603      	mov	r3, r0
 8002a44:	73fb      	strb	r3, [r7, #15]
	if(answer == MAX6675_OK){
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10c      	bne.n	8002a66 <Check_Temp+0x4e>
		Temperature[Channel]=max6675Temp(reg);
 8002a4c:	89bb      	ldrh	r3, [r7, #12]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffc4 	bl	80029dc <max6675Temp>
 8002a54:	eef0 7a40 	vmov.f32	s15, s0
 8002a58:	4a08      	ldr	r2, [pc, #32]	@ (8002a7c <Check_Temp+0x64>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	edc3 7a00 	vstr	s15, [r3]
		//Temperature[Channel]=Temperature[Channel]+CalibrationTemp[Channel]-10;
	}
	else{
		Temperature[Channel]=0;
	}
}
 8002a64:	e006      	b.n	8002a74 <Check_Temp+0x5c>
		Temperature[Channel]=0;
 8002a66:	4a05      	ldr	r2, [pc, #20]	@ (8002a7c <Check_Temp+0x64>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200002c4 	.word	0x200002c4

08002a80 <InitADC>:
uint32_t uiDensity, adcData[5], arrDensity[5];
int Pressure, Pressure2=0;
int sensorcount=0;


void InitADC(){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc2 , (uint32_t *)adcData, 5);
 8002a84:	2205      	movs	r2, #5
 8002a86:	4903      	ldr	r1, [pc, #12]	@ (8002a94 <InitADC+0x14>)
 8002a88:	4803      	ldr	r0, [pc, #12]	@ (8002a98 <InitADC+0x18>)
 8002a8a:	f001 fdad 	bl	80045e8 <HAL_ADC_Start_DMA>
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200002d8 	.word	0x200002d8
 8002a98:	20000354 	.word	0x20000354
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <GetValue>:

void GetValue(){
 8002aa0:	b598      	push	{r3, r4, r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	Pressure=adcData[0];
 8002aa4:	4b22      	ldr	r3, [pc, #136]	@ (8002b30 <GetValue+0x90>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <GetValue+0x94>)
 8002aac:	601a      	str	r2, [r3, #0]
	//Pressure=adcData[0]/10;

	arrDensity[sensorcount]=movingAverageFilter(adcData,5);
 8002aae:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <GetValue+0x98>)
 8002ab0:	681c      	ldr	r4, [r3, #0]
 8002ab2:	2105      	movs	r1, #5
 8002ab4:	481e      	ldr	r0, [pc, #120]	@ (8002b30 <GetValue+0x90>)
 8002ab6:	f000 f845 	bl	8002b44 <movingAverageFilter>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <GetValue+0x9c>)
 8002abe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	sensorcount++;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <GetValue+0x98>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <GetValue+0x98>)
 8002aca:	6013      	str	r3, [r2, #0]
	if(sensorcount==5){
 8002acc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b38 <GetValue+0x98>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d121      	bne.n	8002b18 <GetValue+0x78>
		Pressure2=(movingAverageFilter(arrDensity,5)*0.266-244.14);
 8002ad4:	2105      	movs	r1, #5
 8002ad6:	4819      	ldr	r0, [pc, #100]	@ (8002b3c <GetValue+0x9c>)
 8002ad8:	f000 f834 	bl	8002b44 <movingAverageFilter>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd10 	bl	8000504 <__aeabi_ui2d>
 8002ae4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002b20 <GetValue+0x80>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd85 	bl	80005f8 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8002b28 <GetValue+0x88>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fbc4 	bl	8000288 <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe f826 	bl	8000b58 <__aeabi_d2iz>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <GetValue+0xa0>)
 8002b10:	6013      	str	r3, [r2, #0]
		//Pressure2=(movingAverageFilter(arrDensity,5));
		sensorcount=0;
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <GetValue+0x98>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
	}


}
 8002b18:	bf00      	nop
 8002b1a:	bd98      	pop	{r3, r4, r7, pc}
 8002b1c:	f3af 8000 	nop.w
 8002b20:	dd2f1aa0 	.word	0xdd2f1aa0
 8002b24:	3fd10624 	.word	0x3fd10624
 8002b28:	e147ae14 	.word	0xe147ae14
 8002b2c:	406e847a 	.word	0x406e847a
 8002b30:	200002d8 	.word	0x200002d8
 8002b34:	20000300 	.word	0x20000300
 8002b38:	20000308 	.word	0x20000308
 8002b3c:	200002ec 	.word	0x200002ec
 8002b40:	20000304 	.word	0x20000304

08002b44 <movingAverageFilter>:

uint32_t movingAverageFilter(uint32_t *samples, uint8_t sampleCount) {
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < sampleCount; i++) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	72fb      	strb	r3, [r7, #11]
 8002b58:	e00a      	b.n	8002b70 <movingAverageFilter+0x2c>
        sum += samples[i];
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < sampleCount; i++) {
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	72fb      	strb	r3, [r7, #11]
 8002b70:	7afa      	ldrb	r2, [r7, #11]
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3f0      	bcc.n	8002b5a <movingAverageFilter+0x16>
    }
    return sum / sampleCount;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <ValveCheck>:
#include "main.h"
#include "sensor.h"

extern ADC_HandleTypeDef hadc1;

int ValveCheck(){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002b90:	4809      	ldr	r0, [pc, #36]	@ (8002bb8 <ValveCheck+0x2c>)
 8002b92:	f001 fbcb 	bl	800432c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002b96:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9a:	4807      	ldr	r0, [pc, #28]	@ (8002bb8 <ValveCheck+0x2c>)
 8002b9c:	f001 fc98 	bl	80044d0 <HAL_ADC_PollForConversion>
    if(HAL_ADC_GetValue(&hadc1)>100){
 8002ba0:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <ValveCheck+0x2c>)
 8002ba2:	f001 fe31 	bl	8004808 <HAL_ADC_GetValue>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b64      	cmp	r3, #100	@ 0x64
 8002baa:	d901      	bls.n	8002bb0 <ValveCheck+0x24>
    	return 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <ValveCheck+0x26>
    }
    else
    	return 0;
 8002bb0:	2300      	movs	r3, #0
    HAL_ADC_Stop(&hadc1);
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000030c 	.word	0x2000030c

08002bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc0:	f001 fada 	bl	8004178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc4:	f000 f836 	bl	8002c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc8:	f000 fc60 	bl	800348c <MX_GPIO_Init>
  MX_DMA_Init();
 8002bcc:	f000 fc3e 	bl	800344c <MX_DMA_Init>
  MX_RTC_Init();
 8002bd0:	f000 fa10 	bl	8002ff4 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8002bd4:	f000 fa68 	bl	80030a8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8002bd8:	f000 fa88 	bl	80030ec <MX_SPI1_Init>
  MX_SPI2_Init();
 8002bdc:	f000 fabc 	bl	8003158 <MX_SPI2_Init>
  MX_TIM4_Init();
 8002be0:	f000 faf0 	bl	80031c4 <MX_TIM4_Init>
  MX_TIM7_Init();
 8002be4:	f000 fb54 	bl	8003290 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002be8:	f000 fb88 	bl	80032fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002bec:	f000 fbb0 	bl	8003350 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002bf0:	f000 fbd8 	bl	80033a4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002bf4:	f000 fc00 	bl	80033f8 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8002bf8:	f000 f914 	bl	8002e24 <MX_ADC2_Init>
  MX_ADC1_Init();
 8002bfc:	f000 f89a 	bl	8002d34 <MX_ADC1_Init>
  MX_ADC3_Init();
 8002c00:	f000 f992 	bl	8002f28 <MX_ADC3_Init>
  MX_FATFS_Init();
 8002c04:	f00c f9a8 	bl	800ef58 <MX_FATFS_Init>
  MX_CRC_Init();
 8002c08:	f000 f9e0 	bl	8002fcc <MX_CRC_Init>
  MX_USB_HOST_Init();
 8002c0c:	f012 fdde 	bl	80157cc <MX_USB_HOST_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002c10:	f000 f87c 	bl	8002d0c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8002c14:	4806      	ldr	r0, [pc, #24]	@ (8002c30 <main+0x74>)
 8002c16:	f008 fbf3 	bl	800b400 <HAL_TIM_Base_Start_IT>
  InitLCD();
 8002c1a:	f7fe fd59 	bl	80016d0 <InitLCD>
  InitADC();
 8002c1e:	f7ff ff2f 	bl	8002a80 <InitADC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8002c22:	f7ff f867 	bl	8001cf4 <loop>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002c26:	f012 fdf7 	bl	8015818 <MX_USB_HOST_Process>
	  loop();
 8002c2a:	bf00      	nop
 8002c2c:	e7f9      	b.n	8002c22 <main+0x66>
 8002c2e:	bf00      	nop
 8002c30:	200005e8 	.word	0x200005e8

08002c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b094      	sub	sp, #80	@ 0x50
 8002c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c3a:	f107 0320 	add.w	r3, r7, #32
 8002c3e:	2230      	movs	r2, #48	@ 0x30
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f013 ffb4 	bl	8016bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <SystemClock_Config+0xd0>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	4a28      	ldr	r2, [pc, #160]	@ (8002d04 <SystemClock_Config+0xd0>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c68:	4b26      	ldr	r3, [pc, #152]	@ (8002d04 <SystemClock_Config+0xd0>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c74:	2300      	movs	r3, #0
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	4b23      	ldr	r3, [pc, #140]	@ (8002d08 <SystemClock_Config+0xd4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <SystemClock_Config+0xd4>)
 8002c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <SystemClock_Config+0xd4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002c90:	2309      	movs	r3, #9
 8002c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002cac:	2378      	movs	r3, #120	@ 0x78
 8002cae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cb8:	f107 0320 	add.w	r3, r7, #32
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 fc1b 	bl	80084f8 <HAL_RCC_OscConfig>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002cc8:	f000 fd2e 	bl	8003728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ccc:	230f      	movs	r3, #15
 8002cce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cd8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002cde:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ce2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ce4:	f107 030c 	add.w	r3, r7, #12
 8002ce8:	2103      	movs	r1, #3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 fe7c 	bl	80089e8 <HAL_RCC_ClockConfig>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002cf6:	f000 fd17 	bl	8003728 <Error_Handler>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3750      	adds	r7, #80	@ 0x50
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000

08002d0c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	2037      	movs	r0, #55	@ 0x37
 8002d16:	f002 fab4 	bl	8005282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d1a:	2037      	movs	r0, #55	@ 0x37
 8002d1c:	f002 facd 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2100      	movs	r1, #0
 8002d24:	2025      	movs	r0, #37	@ 0x25
 8002d26:	f002 faac 	bl	8005282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d2a:	2025      	movs	r0, #37	@ 0x25
 8002d2c:	f002 fac5 	bl	80052ba <HAL_NVIC_EnableIRQ>
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	@ 0x30
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d3a:	f107 0320 	add.w	r3, r7, #32
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002d48:	463b      	mov	r3, r7
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f013 ff2e 	bl	8016bb0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d54:	4b2f      	ldr	r3, [pc, #188]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d56:	4a30      	ldr	r2, [pc, #192]	@ (8002e18 <MX_ADC1_Init+0xe4>)
 8002d58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d60:	4b2c      	ldr	r3, [pc, #176]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d66:	4b2b      	ldr	r3, [pc, #172]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d6c:	4b29      	ldr	r3, [pc, #164]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d72:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d7a:	4b26      	ldr	r3, [pc, #152]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d80:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d82:	4a26      	ldr	r2, [pc, #152]	@ (8002e1c <MX_ADC1_Init+0xe8>)
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d86:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d8c:	4b21      	ldr	r3, [pc, #132]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002da0:	481c      	ldr	r0, [pc, #112]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002da2:	f001 fa7f 	bl	80042a4 <HAL_ADC_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8002dac:	f000 fcbc 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dbc:	f107 0320 	add.w	r3, r7, #32
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4814      	ldr	r0, [pc, #80]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002dc4:	f001 fd4c 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002dce:	f000 fcab 	bl	8003728 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <MX_ADC1_Init+0xec>)
 8002de8:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002df6:	463b      	mov	r3, r7
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4806      	ldr	r0, [pc, #24]	@ (8002e14 <MX_ADC1_Init+0xe0>)
 8002dfc:	f001 ffd0 	bl	8004da0 <HAL_ADCEx_InjectedConfigChannel>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8002e06:	f000 fc8f 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e0a:	bf00      	nop
 8002e0c:	3730      	adds	r7, #48	@ 0x30
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000030c 	.word	0x2000030c
 8002e18:	40012000 	.word	0x40012000
 8002e1c:	0f000001 	.word	0x0f000001
 8002e20:	000f0001 	.word	0x000f0001

08002e24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002e36:	4b39      	ldr	r3, [pc, #228]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e38:	4a39      	ldr	r2, [pc, #228]	@ (8002f20 <MX_ADC2_Init+0xfc>)
 8002e3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e3c:	4b37      	ldr	r3, [pc, #220]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002e42:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002e4e:	4b33      	ldr	r3, [pc, #204]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002e54:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e62:	4b2e      	ldr	r3, [pc, #184]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e64:	4a2f      	ldr	r2, [pc, #188]	@ (8002f24 <MX_ADC2_Init+0x100>)
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e68:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e70:	2205      	movs	r2, #5
 8002e72:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002e74:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e7c:	4b27      	ldr	r3, [pc, #156]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002e82:	4826      	ldr	r0, [pc, #152]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002e84:	f001 fa0e 	bl	80042a4 <HAL_ADC_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002e8e:	f000 fc4b 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	481e      	ldr	r0, [pc, #120]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002ea4:	f001 fcdc 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8002eae:	f000 fc3b 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4818      	ldr	r0, [pc, #96]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002ebc:	f001 fcd0 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8002ec6:	f000 fc2f 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ece:	463b      	mov	r3, r7
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4812      	ldr	r0, [pc, #72]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002ed4:	f001 fcc4 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8002ede:	f000 fc23 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	480c      	ldr	r0, [pc, #48]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002eec:	f001 fcb8 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8002ef6:	f000 fc17 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8002efa:	2305      	movs	r3, #5
 8002efc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002efe:	463b      	mov	r3, r7
 8002f00:	4619      	mov	r1, r3
 8002f02:	4806      	ldr	r0, [pc, #24]	@ (8002f1c <MX_ADC2_Init+0xf8>)
 8002f04:	f001 fcac 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8002f0e:	f000 fc0b 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000354 	.word	0x20000354
 8002f20:	40012100 	.word	0x40012100
 8002f24:	0f000001 	.word	0x0f000001

08002f28 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f3c:	4a21      	ldr	r2, [pc, #132]	@ (8002fc4 <MX_ADC3_Init+0x9c>)
 8002f3e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f40:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002f52:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f60:	4b17      	ldr	r3, [pc, #92]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f66:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f68:	4a17      	ldr	r2, [pc, #92]	@ (8002fc8 <MX_ADC3_Init+0xa0>)
 8002f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002f72:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002f86:	480e      	ldr	r0, [pc, #56]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002f88:	f001 f98c 	bl	80042a4 <HAL_ADC_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002f92:	f000 fbc9 	bl	8003728 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002f96:	2302      	movs	r3, #2
 8002f98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4806      	ldr	r0, [pc, #24]	@ (8002fc0 <MX_ADC3_Init+0x98>)
 8002fa8:	f001 fc5a 	bl	8004860 <HAL_ADC_ConfigChannel>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002fb2:	f000 fbb9 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000039c 	.word	0x2000039c
 8002fc4:	40012200 	.word	0x40012200
 8002fc8:	0f000001 	.word	0x0f000001

08002fcc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <MX_CRC_Init+0x20>)
 8002fd2:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <MX_CRC_Init+0x24>)
 8002fd4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002fd6:	4805      	ldr	r0, [pc, #20]	@ (8002fec <MX_CRC_Init+0x20>)
 8002fd8:	f002 f989 	bl	80052ee <HAL_CRC_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002fe2:	f000 fba1 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000444 	.word	0x20000444
 8002ff0:	40023000 	.word	0x40023000

08002ff4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003008:	2300      	movs	r3, #0
 800300a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800300c:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <MX_RTC_Init+0xac>)
 800300e:	4a25      	ldr	r2, [pc, #148]	@ (80030a4 <MX_RTC_Init+0xb0>)
 8003010:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003012:	4b23      	ldr	r3, [pc, #140]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003014:	2200      	movs	r2, #0
 8003016:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003018:	4b21      	ldr	r3, [pc, #132]	@ (80030a0 <MX_RTC_Init+0xac>)
 800301a:	227f      	movs	r2, #127	@ 0x7f
 800301c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800301e:	4b20      	ldr	r3, [pc, #128]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003020:	22ff      	movs	r2, #255	@ 0xff
 8003022:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003024:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003026:	2200      	movs	r2, #0
 8003028:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800302a:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <MX_RTC_Init+0xac>)
 800302c:	2200      	movs	r2, #0
 800302e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003036:	481a      	ldr	r0, [pc, #104]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003038:	f005 ffd8 	bl	8008fec <HAL_RTC_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003042:	f000 fb71 	bl	8003728 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003046:	2300      	movs	r3, #0
 8003048:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800304a:	2300      	movs	r3, #0
 800304c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800304e:	2300      	movs	r3, #0
 8003050:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	2201      	movs	r2, #1
 800305e:	4619      	mov	r1, r3
 8003060:	480f      	ldr	r0, [pc, #60]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003062:	f006 f846 	bl	80090f2 <HAL_RTC_SetTime>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800306c:	f000 fb5c 	bl	8003728 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003070:	2301      	movs	r3, #1
 8003072:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003074:	2301      	movs	r3, #1
 8003076:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003078:	2301      	movs	r3, #1
 800307a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800307c:	2300      	movs	r3, #0
 800307e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003080:	463b      	mov	r3, r7
 8003082:	2201      	movs	r2, #1
 8003084:	4619      	mov	r1, r3
 8003086:	4806      	ldr	r0, [pc, #24]	@ (80030a0 <MX_RTC_Init+0xac>)
 8003088:	f006 f8cd 	bl	8009226 <HAL_RTC_SetDate>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003092:	f000 fb49 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000044c 	.word	0x2000044c
 80030a4:	40002800 	.word	0x40002800

080030a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80030ac:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030ae:	4a0e      	ldr	r2, [pc, #56]	@ (80030e8 <MX_SDIO_SD_Init+0x40>)
 80030b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80030b8:	4b0a      	ldr	r3, [pc, #40]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80030c4:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030ca:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80030d2:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <MX_SDIO_SD_Init+0x3c>)
 80030d4:	2203      	movs	r2, #3
 80030d6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	2000046c 	.word	0x2000046c
 80030e8:	40012c00 	.word	0x40012c00

080030ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <MX_SPI1_Init+0x64>)
 80030f2:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <MX_SPI1_Init+0x68>)
 80030f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030f6:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <MX_SPI1_Init+0x64>)
 80030f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030fe:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003104:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800310a:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <MX_SPI1_Init+0x64>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003116:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003120:	2208      	movs	r2, #8
 8003122:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003126:	2200      	movs	r2, #0
 8003128:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <MX_SPI1_Init+0x64>)
 800312c:	2200      	movs	r2, #0
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <MX_SPI1_Init+0x64>)
 8003138:	220a      	movs	r2, #10
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800313c:	4804      	ldr	r0, [pc, #16]	@ (8003150 <MX_SPI1_Init+0x64>)
 800313e:	f007 fb39 	bl	800a7b4 <HAL_SPI_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003148:	f000 faee 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200004f0 	.word	0x200004f0
 8003154:	40013000 	.word	0x40013000

08003158 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800315c:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <MX_SPI2_Init+0x64>)
 800315e:	4a18      	ldr	r2, [pc, #96]	@ (80031c0 <MX_SPI2_Init+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003162:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <MX_SPI2_Init+0x64>)
 8003164:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003168:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <MX_SPI2_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <MX_SPI2_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <MX_SPI2_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800317c:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <MX_SPI2_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003182:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <MX_SPI2_Init+0x64>)
 8003184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003188:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800318a:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <MX_SPI2_Init+0x64>)
 800318c:	2238      	movs	r2, #56	@ 0x38
 800318e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003190:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <MX_SPI2_Init+0x64>)
 8003192:	2200      	movs	r2, #0
 8003194:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <MX_SPI2_Init+0x64>)
 8003198:	2200      	movs	r2, #0
 800319a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319c:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <MX_SPI2_Init+0x64>)
 800319e:	2200      	movs	r2, #0
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <MX_SPI2_Init+0x64>)
 80031a4:	220a      	movs	r2, #10
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80031a8:	4804      	ldr	r0, [pc, #16]	@ (80031bc <MX_SPI2_Init+0x64>)
 80031aa:	f007 fb03 	bl	800a7b4 <HAL_SPI_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031b4:	f000 fab8 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000548 	.word	0x20000548
 80031c0:	40003800 	.word	0x40003800

080031c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	@ 0x28
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ca:	f107 0320 	add.w	r3, r7, #32
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	615a      	str	r2, [r3, #20]
 80031e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031e6:	4b28      	ldr	r3, [pc, #160]	@ (8003288 <MX_TIM4_Init+0xc4>)
 80031e8:	4a28      	ldr	r2, [pc, #160]	@ (800328c <MX_TIM4_Init+0xc8>)
 80031ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80031ec:	4b26      	ldr	r3, [pc, #152]	@ (8003288 <MX_TIM4_Init+0xc4>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f2:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <MX_TIM4_Init+0xc4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80031f8:	4b23      	ldr	r3, [pc, #140]	@ (8003288 <MX_TIM4_Init+0xc4>)
 80031fa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80031fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003200:	4b21      	ldr	r3, [pc, #132]	@ (8003288 <MX_TIM4_Init+0xc4>)
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <MX_TIM4_Init+0xc4>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800320c:	481e      	ldr	r0, [pc, #120]	@ (8003288 <MX_TIM4_Init+0xc4>)
 800320e:	f008 f967 	bl	800b4e0 <HAL_TIM_PWM_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003218:	f000 fa86 	bl	8003728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003224:	f107 0320 	add.w	r3, r7, #32
 8003228:	4619      	mov	r1, r3
 800322a:	4817      	ldr	r0, [pc, #92]	@ (8003288 <MX_TIM4_Init+0xc4>)
 800322c:	f008 fecc 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003236:	f000 fa77 	bl	8003728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800323a:	2360      	movs	r3, #96	@ 0x60
 800323c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000-1;
 800323e:	f640 739f 	movw	r3, #3999	@ 0xf9f
 8003242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800324c:	1d3b      	adds	r3, r7, #4
 800324e:	2208      	movs	r2, #8
 8003250:	4619      	mov	r1, r3
 8003252:	480d      	ldr	r0, [pc, #52]	@ (8003288 <MX_TIM4_Init+0xc4>)
 8003254:	f008 fb4c 	bl	800b8f0 <HAL_TIM_PWM_ConfigChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800325e:	f000 fa63 	bl	8003728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	220c      	movs	r2, #12
 8003266:	4619      	mov	r1, r3
 8003268:	4807      	ldr	r0, [pc, #28]	@ (8003288 <MX_TIM4_Init+0xc4>)
 800326a:	f008 fb41 	bl	800b8f0 <HAL_TIM_PWM_ConfigChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003274:	f000 fa58 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003278:	4803      	ldr	r0, [pc, #12]	@ (8003288 <MX_TIM4_Init+0xc4>)
 800327a:	f000 fd03 	bl	8003c84 <HAL_TIM_MspPostInit>

}
 800327e:	bf00      	nop
 8003280:	3728      	adds	r7, #40	@ 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200005a0 	.word	0x200005a0
 800328c:	40000800 	.word	0x40000800

08003290 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003296:	463b      	mov	r3, r7
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800329e:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032a0:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <MX_TIM7_Init+0x68>)
 80032a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10-1;
 80032a4:	4b13      	ldr	r3, [pc, #76]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032a6:	2209      	movs	r2, #9
 80032a8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 6000-1;
 80032b0:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032b2:	f241 726f 	movw	r2, #5999	@ 0x176f
 80032b6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b8:	4b0e      	ldr	r3, [pc, #56]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032be:	480d      	ldr	r0, [pc, #52]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032c0:	f008 f84e 	bl	800b360 <HAL_TIM_Base_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80032ca:	f000 fa2d 	bl	8003728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032d6:	463b      	mov	r3, r7
 80032d8:	4619      	mov	r1, r3
 80032da:	4806      	ldr	r0, [pc, #24]	@ (80032f4 <MX_TIM7_Init+0x64>)
 80032dc:	f008 fe74 	bl	800bfc8 <HAL_TIMEx_MasterConfigSynchronization>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80032e6:	f000 fa1f 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200005e8 	.word	0x200005e8
 80032f8:	40001400 	.word	0x40001400

080032fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003302:	4a12      	ldr	r2, [pc, #72]	@ (800334c <MX_USART1_UART_Init+0x50>)
 8003304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003306:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800330c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800330e:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003322:	220c      	movs	r2, #12
 8003324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003328:	2200      	movs	r2, #0
 800332a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003332:	4805      	ldr	r0, [pc, #20]	@ (8003348 <MX_USART1_UART_Init+0x4c>)
 8003334:	f008 fed8 	bl	800c0e8 <HAL_UART_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800333e:	f000 f9f3 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000630 	.word	0x20000630
 800334c:	40011000 	.word	0x40011000

08003350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 8003356:	4a12      	ldr	r2, [pc, #72]	@ (80033a0 <MX_USART2_UART_Init+0x50>)
 8003358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800335a:	4b10      	ldr	r3, [pc, #64]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 800335c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003374:	4b09      	ldr	r3, [pc, #36]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 8003376:	220c      	movs	r2, #12
 8003378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 8003382:	2200      	movs	r2, #0
 8003384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003386:	4805      	ldr	r0, [pc, #20]	@ (800339c <MX_USART2_UART_Init+0x4c>)
 8003388:	f008 feae 	bl	800c0e8 <HAL_UART_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003392:	f000 f9c9 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000678 	.word	0x20000678
 80033a0:	40004400 	.word	0x40004400

080033a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033a8:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033aa:	4a12      	ldr	r2, [pc, #72]	@ (80033f4 <MX_USART3_UART_Init+0x50>)
 80033ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033ae:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033c8:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033ca:	220c      	movs	r2, #12
 80033cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ce:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033da:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <MX_USART3_UART_Init+0x4c>)
 80033dc:	f008 fe84 	bl	800c0e8 <HAL_UART_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033e6:	f000 f99f 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200006c0 	.word	0x200006c0
 80033f4:	40004800 	.word	0x40004800

080033f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <MX_USART6_UART_Init+0x50>)
 8003400:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 8003404:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003408:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800340a:	4b0e      	ldr	r3, [pc, #56]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003416:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 800341e:	220c      	movs	r2, #12
 8003420:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003422:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800342e:	4805      	ldr	r0, [pc, #20]	@ (8003444 <MX_USART6_UART_Init+0x4c>)
 8003430:	f008 fe5a 	bl	800c0e8 <HAL_UART_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800343a:	f000 f975 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000708 	.word	0x20000708
 8003448:	40011400 	.word	0x40011400

0800344c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <MX_DMA_Init+0x3c>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <MX_DMA_Init+0x3c>)
 800345c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003460:	6313      	str	r3, [r2, #48]	@ 0x30
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <MX_DMA_Init+0x3c>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	203a      	movs	r0, #58	@ 0x3a
 8003474:	f001 ff05 	bl	8005282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003478:	203a      	movs	r0, #58	@ 0x3a
 800347a:	f001 ff1e 	bl	80052ba <HAL_NVIC_EnableIRQ>

}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800

0800348c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08c      	sub	sp, #48	@ 0x30
 8003490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003492:	f107 031c 	add.w	r3, r7, #28
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a99      	ldr	r2, [pc, #612]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034ac:	f043 0310 	orr.w	r3, r3, #16
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b97      	ldr	r3, [pc, #604]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	4b93      	ldr	r3, [pc, #588]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a92      	ldr	r2, [pc, #584]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b90      	ldr	r3, [pc, #576]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b8c      	ldr	r3, [pc, #560]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	4a8b      	ldr	r2, [pc, #556]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ea:	4b89      	ldr	r3, [pc, #548]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b85      	ldr	r3, [pc, #532]	@ (8003710 <MX_GPIO_Init+0x284>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a84      	ldr	r2, [pc, #528]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b82      	ldr	r3, [pc, #520]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a7d      	ldr	r2, [pc, #500]	@ (8003710 <MX_GPIO_Init+0x284>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b7b      	ldr	r3, [pc, #492]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	4b77      	ldr	r3, [pc, #476]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	4a76      	ldr	r2, [pc, #472]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	6313      	str	r3, [r2, #48]	@ 0x30
 800353e:	4b74      	ldr	r3, [pc, #464]	@ (8003710 <MX_GPIO_Init+0x284>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT3_Pin|GPIO_OUT4_Pin|GPIO_OUT5_Pin|GPIO_OUT6_Pin
 800354a:	2200      	movs	r2, #0
 800354c:	217f      	movs	r1, #127	@ 0x7f
 800354e:	4871      	ldr	r0, [pc, #452]	@ (8003714 <MX_GPIO_Init+0x288>)
 8003550:	f002 fe9e 	bl	8006290 <HAL_GPIO_WritePin>
                          |GPIO_OUT7_Pin|GPIO_OUT1_Pin|GPIO_OUT2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_OUT8_GPIO_Port, GPIO_OUT8_Pin, GPIO_PIN_RESET);
 8003554:	2200      	movs	r2, #0
 8003556:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800355a:	486f      	ldr	r0, [pc, #444]	@ (8003718 <MX_GPIO_Init+0x28c>)
 800355c:	f002 fe98 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GR_Pin|F_CS_Pin, GPIO_PIN_RESET);
 8003560:	2200      	movs	r2, #0
 8003562:	f248 0108 	movw	r1, #32776	@ 0x8008
 8003566:	486d      	ldr	r0, [pc, #436]	@ (800371c <MX_GPIO_Init+0x290>)
 8003568:	f002 fe92 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_OUT24_Pin|GPIO_OUT25_Pin, GPIO_PIN_SET);
 800356c:	2201      	movs	r2, #1
 800356e:	2150      	movs	r1, #80	@ 0x50
 8003570:	486a      	ldr	r0, [pc, #424]	@ (800371c <MX_GPIO_Init+0x290>)
 8003572:	f002 fe8d 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_OUT18_Pin|GPIO_OUT21_Pin|GPIO_OUT20_Pin|GPIO_OUT19_Pin
 8003576:	2201      	movs	r2, #1
 8003578:	f641 4182 	movw	r1, #7298	@ 0x1c82
 800357c:	4868      	ldr	r0, [pc, #416]	@ (8003720 <MX_GPIO_Init+0x294>)
 800357e:	f002 fe87 	bl	8006290 <HAL_GPIO_WritePin>
                          |GPIO_OUT26_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT17_Pin|GPIO_OUT16_Pin|GPIO_OUT15_Pin|GPIO_OUT14_Pin
 8003582:	2201      	movs	r2, #1
 8003584:	f64f 7180 	movw	r1, #65408	@ 0xff80
 8003588:	4862      	ldr	r0, [pc, #392]	@ (8003714 <MX_GPIO_Init+0x288>)
 800358a:	f002 fe81 	bl	8006290 <HAL_GPIO_WritePin>
                          |GPIO_OUT13_Pin|GPIO_OUT12_Pin|GPIO_OUT11_Pin|GPIO_OUT23_Pin
                          |GPIO_OUT22_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OUT_GPIO_Port, USB_OUT_Pin, GPIO_PIN_RESET);
 800358e:	2200      	movs	r2, #0
 8003590:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003594:	4863      	ldr	r0, [pc, #396]	@ (8003724 <MX_GPIO_Init+0x298>)
 8003596:	f002 fe7b 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT3_Pin GPIO_OUT4_Pin GPIO_OUT5_Pin GPIO_OUT6_Pin
                           GPIO_OUT7_Pin GPIO_OUT2_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT3_Pin|GPIO_OUT4_Pin|GPIO_OUT5_Pin|GPIO_OUT6_Pin
 800359a:	237e      	movs	r3, #126	@ 0x7e
 800359c:	61fb      	str	r3, [r7, #28]
                          |GPIO_OUT7_Pin|GPIO_OUT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	4619      	mov	r1, r3
 80035b0:	4858      	ldr	r0, [pc, #352]	@ (8003714 <MX_GPIO_Init+0x288>)
 80035b2:	f002 fcb9 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OUT8_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT8_Pin;
 80035b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035bc:	2301      	movs	r3, #1
 80035be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_OUT8_GPIO_Port, &GPIO_InitStruct);
 80035c8:	f107 031c 	add.w	r3, r7, #28
 80035cc:	4619      	mov	r1, r3
 80035ce:	4852      	ldr	r0, [pc, #328]	@ (8003718 <MX_GPIO_Init+0x28c>)
 80035d0:	f002 fcaa 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_IN1_Pin GPIO_IN2_Pin GPIO_IN3_Pin GPIO_IN4_Pin
                           GPIO_IN5_Pin GPIO_IN6_Pin */
  GPIO_InitStruct.Pin = GPIO_IN1_Pin|GPIO_IN2_Pin|GPIO_IN3_Pin|GPIO_IN4_Pin
 80035d4:	233f      	movs	r3, #63	@ 0x3f
 80035d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_IN5_Pin|GPIO_IN6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e0:	f107 031c 	add.w	r3, r7, #28
 80035e4:	4619      	mov	r1, r3
 80035e6:	484c      	ldr	r0, [pc, #304]	@ (8003718 <MX_GPIO_Init+0x28c>)
 80035e8:	f002 fc9e 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GR_Pin F_CS_Pin */
  GPIO_InitStruct.Pin = LED_GR_Pin|F_CS_Pin;
 80035ec:	f248 0308 	movw	r3, #32776	@ 0x8008
 80035f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f2:	2301      	movs	r3, #1
 80035f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	4619      	mov	r1, r3
 8003604:	4845      	ldr	r0, [pc, #276]	@ (800371c <MX_GPIO_Init+0x290>)
 8003606:	f002 fc8f 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT24_Pin GPIO_OUT25_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT24_Pin|GPIO_OUT25_Pin;
 800360a:	2350      	movs	r3, #80	@ 0x50
 800360c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360e:	2301      	movs	r3, #1
 8003610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003612:	2301      	movs	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361a:	f107 031c 	add.w	r3, r7, #28
 800361e:	4619      	mov	r1, r3
 8003620:	483e      	ldr	r0, [pc, #248]	@ (800371c <MX_GPIO_Init+0x290>)
 8003622:	f002 fc81 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_IN7_Pin */
  GPIO_InitStruct.Pin = GPIO_IN7_Pin;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIO_IN7_GPIO_Port, &GPIO_InitStruct);
 8003632:	f107 031c 	add.w	r3, r7, #28
 8003636:	4619      	mov	r1, r3
 8003638:	4839      	ldr	r0, [pc, #228]	@ (8003720 <MX_GPIO_Init+0x294>)
 800363a:	f002 fc75 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT18_Pin GPIO_OUT26_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT18_Pin|GPIO_OUT26_Pin;
 800363e:	2382      	movs	r3, #130	@ 0x82
 8003640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003642:	2311      	movs	r3, #17
 8003644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364e:	f107 031c 	add.w	r3, r7, #28
 8003652:	4619      	mov	r1, r3
 8003654:	4832      	ldr	r0, [pc, #200]	@ (8003720 <MX_GPIO_Init+0x294>)
 8003656:	f002 fc67 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT17_Pin GPIO_OUT16_Pin GPIO_OUT15_Pin GPIO_OUT14_Pin
                           GPIO_OUT13_Pin GPIO_OUT12_Pin GPIO_OUT11_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT17_Pin|GPIO_OUT16_Pin|GPIO_OUT15_Pin|GPIO_OUT14_Pin
 800365a:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 800365e:	61fb      	str	r3, [r7, #28]
                          |GPIO_OUT13_Pin|GPIO_OUT12_Pin|GPIO_OUT11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003660:	2311      	movs	r3, #17
 8003662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800366c:	f107 031c 	add.w	r3, r7, #28
 8003670:	4619      	mov	r1, r3
 8003672:	4828      	ldr	r0, [pc, #160]	@ (8003714 <MX_GPIO_Init+0x288>)
 8003674:	f002 fc58 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT23_Pin GPIO_OUT22_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT23_Pin|GPIO_OUT22_Pin;
 8003678:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800367c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367e:	2301      	movs	r3, #1
 8003680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003682:	2301      	movs	r3, #1
 8003684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800368a:	f107 031c 	add.w	r3, r7, #28
 800368e:	4619      	mov	r1, r3
 8003690:	4820      	ldr	r0, [pc, #128]	@ (8003714 <MX_GPIO_Init+0x288>)
 8003692:	f002 fc49 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_OUT21_Pin GPIO_OUT20_Pin GPIO_OUT19_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT21_Pin|GPIO_OUT20_Pin|GPIO_OUT19_Pin;
 8003696:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800369a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800369c:	2301      	movs	r3, #1
 800369e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a0:	2301      	movs	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a8:	f107 031c 	add.w	r3, r7, #28
 80036ac:	4619      	mov	r1, r3
 80036ae:	481c      	ldr	r0, [pc, #112]	@ (8003720 <MX_GPIO_Init+0x294>)
 80036b0:	f002 fc3a 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Detect_SDIO_Pin */
  GPIO_InitStruct.Pin = Detect_SDIO_Pin;
 80036b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ba:	2300      	movs	r3, #0
 80036bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Detect_SDIO_GPIO_Port, &GPIO_InitStruct);
 80036c2:	f107 031c 	add.w	r3, r7, #28
 80036c6:	4619      	mov	r1, r3
 80036c8:	4816      	ldr	r0, [pc, #88]	@ (8003724 <MX_GPIO_Init+0x298>)
 80036ca:	f002 fc2d 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OUT_Pin */
  GPIO_InitStruct.Pin = USB_OUT_Pin;
 80036ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036d4:	2301      	movs	r3, #1
 80036d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OUT_GPIO_Port, &GPIO_InitStruct);
 80036e0:	f107 031c 	add.w	r3, r7, #28
 80036e4:	4619      	mov	r1, r3
 80036e6:	480f      	ldr	r0, [pc, #60]	@ (8003724 <MX_GPIO_Init+0x298>)
 80036e8:	f002 fc1e 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OUT1_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT1_Pin;
 80036ec:	2301      	movs	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f0:	2301      	movs	r3, #1
 80036f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f8:	2303      	movs	r3, #3
 80036fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIO_OUT1_GPIO_Port, &GPIO_InitStruct);
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4619      	mov	r1, r3
 8003702:	4804      	ldr	r0, [pc, #16]	@ (8003714 <MX_GPIO_Init+0x288>)
 8003704:	f002 fc10 	bl	8005f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003708:	bf00      	nop
 800370a:	3730      	adds	r7, #48	@ 0x30
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	40021000 	.word	0x40021000
 8003718:	40020800 	.word	0x40020800
 800371c:	40020000 	.word	0x40020000
 8003720:	40020400 	.word	0x40020400
 8003724:	40020c00 	.word	0x40020c00

08003728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <HAL_MspInit+0x4c>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	4a0f      	ldr	r2, [pc, #60]	@ (8003784 <HAL_MspInit+0x4c>)
 8003748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800374c:	6453      	str	r3, [r2, #68]	@ 0x44
 800374e:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <HAL_MspInit+0x4c>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <HAL_MspInit+0x4c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <HAL_MspInit+0x4c>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_MspInit+0x4c>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800

08003788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08e      	sub	sp, #56	@ 0x38
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	@ (800391c <HAL_ADC_MspInit+0x194>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d128      	bne.n	80037fc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ba:	4b59      	ldr	r3, [pc, #356]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	4b55      	ldr	r3, [pc, #340]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ce:	4a54      	ldr	r2, [pc, #336]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d6:	4b52      	ldr	r3, [pc, #328]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_IN0_Pin;
 80037e2:	2301      	movs	r3, #1
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037e6:	2303      	movs	r3, #3
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC_IN0_GPIO_Port, &GPIO_InitStruct);
 80037ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037f2:	4619      	mov	r1, r3
 80037f4:	484b      	ldr	r0, [pc, #300]	@ (8003924 <HAL_ADC_MspInit+0x19c>)
 80037f6:	f002 fb97 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80037fa:	e08b      	b.n	8003914 <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a49      	ldr	r2, [pc, #292]	@ (8003928 <HAL_ADC_MspInit+0x1a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d159      	bne.n	80038ba <HAL_ADC_MspInit+0x132>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	4b45      	ldr	r3, [pc, #276]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	4a44      	ldr	r2, [pc, #272]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 8003810:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003814:	6453      	str	r3, [r2, #68]	@ 0x44
 8003816:	4b42      	ldr	r3, [pc, #264]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	4b3e      	ldr	r3, [pc, #248]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a3d      	ldr	r2, [pc, #244]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC_IN1_Pin;
 800383e:	2302      	movs	r3, #2
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003842:	2303      	movs	r3, #3
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC_IN1_GPIO_Port, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	4834      	ldr	r0, [pc, #208]	@ (8003924 <HAL_ADC_MspInit+0x19c>)
 8003852:	f002 fb69 	bl	8005f28 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003856:	4b35      	ldr	r3, [pc, #212]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 8003858:	4a35      	ldr	r2, [pc, #212]	@ (8003930 <HAL_ADC_MspInit+0x1a8>)
 800385a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800385c:	4b33      	ldr	r3, [pc, #204]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 800385e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003862:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003864:	4b31      	ldr	r3, [pc, #196]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800386a:	4b30      	ldr	r3, [pc, #192]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 800386c:	2200      	movs	r2, #0
 800386e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003870:	4b2e      	ldr	r3, [pc, #184]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 8003872:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003876:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003878:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 800387a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800387e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003880:	4b2a      	ldr	r3, [pc, #168]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 8003882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003886:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003888:	4b28      	ldr	r3, [pc, #160]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 800388a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800388e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003890:	4b26      	ldr	r3, [pc, #152]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003896:	4b25      	ldr	r3, [pc, #148]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 8003898:	2200      	movs	r2, #0
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800389c:	4823      	ldr	r0, [pc, #140]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 800389e:	f001 fd43 	bl	8005328 <HAL_DMA_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_ADC_MspInit+0x124>
      Error_Handler();
 80038a8:	f7ff ff3e 	bl	8003728 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80038b2:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <HAL_ADC_MspInit+0x1a4>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80038b8:	e02c      	b.n	8003914 <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <HAL_ADC_MspInit+0x1ac>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d127      	bne.n	8003914 <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80038ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80038d4:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <HAL_ADC_MspInit+0x198>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_IN2_Pin;
 80038fc:	2304      	movs	r3, #4
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003900:	2303      	movs	r3, #3
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ADC_IN2_GPIO_Port, &GPIO_InitStruct);
 8003908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390c:	4619      	mov	r1, r3
 800390e:	4805      	ldr	r0, [pc, #20]	@ (8003924 <HAL_ADC_MspInit+0x19c>)
 8003910:	f002 fb0a 	bl	8005f28 <HAL_GPIO_Init>
}
 8003914:	bf00      	nop
 8003916:	3738      	adds	r7, #56	@ 0x38
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40012000 	.word	0x40012000
 8003920:	40023800 	.word	0x40023800
 8003924:	40020000 	.word	0x40020000
 8003928:	40012100 	.word	0x40012100
 800392c:	200003e4 	.word	0x200003e4
 8003930:	40026440 	.word	0x40026440
 8003934:	40012200 	.word	0x40012200

08003938 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0b      	ldr	r2, [pc, #44]	@ (8003974 <HAL_CRC_MspInit+0x3c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10d      	bne.n	8003966 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <HAL_CRC_MspInit+0x40>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_CRC_MspInit+0x40>)
 8003954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003958:	6313      	str	r3, [r2, #48]	@ 0x30
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <HAL_CRC_MspInit+0x40>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023000 	.word	0x40023000
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003984:	f107 0308 	add.w	r3, r7, #8
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <HAL_RTC_MspInit+0x4c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d111      	bne.n	80039c0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800399c:	2302      	movs	r3, #2
 800399e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80039a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039a4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039a6:	f107 0308 	add.w	r3, r7, #8
 80039aa:	4618      	mov	r0, r3
 80039ac:	f005 fa3c 	bl	8008e28 <HAL_RCCEx_PeriphCLKConfig>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80039b6:	f7ff feb7 	bl	8003728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039ba:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <HAL_RTC_MspInit+0x50>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40002800 	.word	0x40002800
 80039cc:	42470e3c 	.word	0x42470e3c

080039d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	@ 0x28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a28      	ldr	r2, [pc, #160]	@ (8003a90 <HAL_SD_MspInit+0xc0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d14a      	bne.n	8003a88 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 80039fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	4a1f      	ldr	r2, [pc, #124]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3a:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <HAL_SD_MspInit+0xc4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = SDIO_D0_Pin|SDIO_D1_Pin|SDIO_D2_Pin|SDIO_D3_Pin
 8003a46:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003a4a:	617b      	str	r3, [r7, #20]
                          |SDIO_CK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a50:	2301      	movs	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a54:	2303      	movs	r3, #3
 8003a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a58:	230c      	movs	r3, #12
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	4619      	mov	r1, r3
 8003a62:	480d      	ldr	r0, [pc, #52]	@ (8003a98 <HAL_SD_MspInit+0xc8>)
 8003a64:	f002 fa60 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO_CMD_Pin;
 8003a68:	2304      	movs	r3, #4
 8003a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003a78:	230c      	movs	r3, #12
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDIO_CMD_GPIO_Port, &GPIO_InitStruct);
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	4619      	mov	r1, r3
 8003a82:	4806      	ldr	r0, [pc, #24]	@ (8003a9c <HAL_SD_MspInit+0xcc>)
 8003a84:	f002 fa50 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003a88:	bf00      	nop
 8003a8a:	3728      	adds	r7, #40	@ 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	40020c00 	.word	0x40020c00

08003aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 031c 	add.w	r3, r7, #28
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4a      	ldr	r2, [pc, #296]	@ (8003be8 <HAL_SPI_MspInit+0x148>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d14a      	bne.n	8003b58 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	4b49      	ldr	r3, [pc, #292]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	4a48      	ldr	r2, [pc, #288]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003acc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ad2:	4b46      	ldr	r3, [pc, #280]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	4b42      	ldr	r3, [pc, #264]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a41      	ldr	r2, [pc, #260]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b3f      	ldr	r3, [pc, #252]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4a3a      	ldr	r2, [pc, #232]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b04:	f043 0302 	orr.w	r3, r3, #2
 8003b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0a:	4b38      	ldr	r3, [pc, #224]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8003b16:	2320      	movs	r3, #32
 8003b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b22:	2303      	movs	r3, #3
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b26:	2305      	movs	r3, #5
 8003b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	482f      	ldr	r0, [pc, #188]	@ (8003bf0 <HAL_SPI_MspInit+0x150>)
 8003b32:	f002 f9f9 	bl	8005f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003b36:	2330      	movs	r3, #48	@ 0x30
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b42:	2303      	movs	r3, #3
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b46:	2305      	movs	r3, #5
 8003b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4828      	ldr	r0, [pc, #160]	@ (8003bf4 <HAL_SPI_MspInit+0x154>)
 8003b52:	f002 f9e9 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003b56:	e042      	b.n	8003bde <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a26      	ldr	r2, [pc, #152]	@ (8003bf8 <HAL_SPI_MspInit+0x158>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d13d      	bne.n	8003bde <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b21      	ldr	r3, [pc, #132]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	4a20      	ldr	r2, [pc, #128]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b72:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	4a19      	ldr	r2, [pc, #100]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8e:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <HAL_SPI_MspInit+0x14c>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8003b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bac:	2305      	movs	r3, #5
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	480f      	ldr	r0, [pc, #60]	@ (8003bf4 <HAL_SPI_MspInit+0x154>)
 8003bb8:	f002 f9b6 	bl	8005f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8003bbc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003bce:	2305      	movs	r3, #5
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4806      	ldr	r0, [pc, #24]	@ (8003bf4 <HAL_SPI_MspInit+0x154>)
 8003bda:	f002 f9a5 	bl	8005f28 <HAL_GPIO_Init>
}
 8003bde:	bf00      	nop
 8003be0:	3730      	adds	r7, #48	@ 0x30
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40013000 	.word	0x40013000
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40020000 	.word	0x40020000
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	40003800 	.word	0x40003800

08003bfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d10d      	bne.n	8003c2a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x40>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	4a09      	ldr	r2, [pc, #36]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x40>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1e:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <HAL_TIM_PWM_MspInit+0x40>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40023800 	.word	0x40023800

08003c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c7c <HAL_TIM_Base_MspInit+0x3c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10d      	bne.n	8003c6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <HAL_TIM_Base_MspInit+0x40>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_TIM_Base_MspInit+0x40>)
 8003c5c:	f043 0320 	orr.w	r3, r3, #32
 8003c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c62:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <HAL_TIM_Base_MspInit+0x40>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40001400 	.word	0x40001400
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	f107 030c 	add.w	r3, r7, #12
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a12      	ldr	r2, [pc, #72]	@ (8003cec <HAL_TIM_MspPostInit+0x68>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d11e      	bne.n	8003ce4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b11      	ldr	r3, [pc, #68]	@ (8003cf0 <HAL_TIM_MspPostInit+0x6c>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <HAL_TIM_MspPostInit+0x6c>)
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <HAL_TIM_MspPostInit+0x6c>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 8003cc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4805      	ldr	r0, [pc, #20]	@ (8003cf4 <HAL_TIM_MspPostInit+0x70>)
 8003ce0:	f002 f922 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003ce4:	bf00      	nop
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020400 	.word	0x40020400

08003cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b090      	sub	sp, #64	@ 0x40
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <HAL_UART_MspInit+0x1b4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d12d      	bne.n	8003d76 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d1e:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	4a63      	ldr	r2, [pc, #396]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d24:	f043 0310 	orr.w	r3, r3, #16
 8003d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d2a:	4b61      	ldr	r3, [pc, #388]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d46:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8003d52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d60:	2303      	movs	r3, #3
 8003d62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d64:	2307      	movs	r3, #7
 8003d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4851      	ldr	r0, [pc, #324]	@ (8003eb4 <HAL_UART_MspInit+0x1bc>)
 8003d70:	f002 f8da 	bl	8005f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d74:	e095      	b.n	8003ea2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8003eb8 <HAL_UART_MspInit+0x1c0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d12c      	bne.n	8003dda <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
 8003d84:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	4a49      	ldr	r2, [pc, #292]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d90:	4b47      	ldr	r3, [pc, #284]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	4b43      	ldr	r3, [pc, #268]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	4a42      	ldr	r2, [pc, #264]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003da6:	f043 0308 	orr.w	r3, r3, #8
 8003daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dac:	4b40      	ldr	r3, [pc, #256]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003db8:	2360      	movs	r3, #96	@ 0x60
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dc8:	2307      	movs	r3, #7
 8003dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	483a      	ldr	r0, [pc, #232]	@ (8003ebc <HAL_UART_MspInit+0x1c4>)
 8003dd4:	f002 f8a8 	bl	8005f28 <HAL_GPIO_Init>
}
 8003dd8:	e063      	b.n	8003ea2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a38      	ldr	r2, [pc, #224]	@ (8003ec0 <HAL_UART_MspInit+0x1c8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d12d      	bne.n	8003e40 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	4a30      	ldr	r2, [pc, #192]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003dee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	4a29      	ldr	r2, [pc, #164]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e0a:	f043 0308 	orr.w	r3, r3, #8
 8003e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e10:	4b27      	ldr	r3, [pc, #156]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8003e1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e2e:	2307      	movs	r3, #7
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e36:	4619      	mov	r1, r3
 8003e38:	4820      	ldr	r0, [pc, #128]	@ (8003ebc <HAL_UART_MspInit+0x1c4>)
 8003e3a:	f002 f875 	bl	8005f28 <HAL_GPIO_Init>
}
 8003e3e:	e030      	b.n	8003ea2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec4 <HAL_UART_MspInit+0x1cc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d12b      	bne.n	8003ea2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e54:	f043 0320 	orr.w	r3, r3, #32
 8003e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e5a:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e76:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb0 <HAL_UART_MspInit+0x1b8>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART6_TX_Pin|UART6_RX_Pin;
 8003e82:	23c0      	movs	r3, #192	@ 0xc0
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e92:	2308      	movs	r3, #8
 8003e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	480a      	ldr	r0, [pc, #40]	@ (8003ec8 <HAL_UART_MspInit+0x1d0>)
 8003e9e:	f002 f843 	bl	8005f28 <HAL_GPIO_Init>
}
 8003ea2:	bf00      	nop
 8003ea4:	3740      	adds	r7, #64	@ 0x40
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40011000 	.word	0x40011000
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	40004400 	.word	0x40004400
 8003ebc:	40020c00 	.word	0x40020c00
 8003ec0:	40004800 	.word	0x40004800
 8003ec4:	40011400 	.word	0x40011400
 8003ec8:	40020800 	.word	0x40020800

08003ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ede:	bf00      	nop
 8003ee0:	e7fd      	b.n	8003ede <HardFault_Handler+0x4>

08003ee2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <MemManage_Handler+0x4>

08003eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eee:	bf00      	nop
 8003ef0:	e7fd      	b.n	8003eee <BusFault_Handler+0x4>

08003ef2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef6:	bf00      	nop
 8003ef8:	e7fd      	b.n	8003ef6 <UsageFault_Handler+0x4>

08003efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efa:	b480      	push	{r7}
 8003efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f28:	f000 f978 	bl	800421c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f34:	4802      	ldr	r0, [pc, #8]	@ (8003f40 <USART1_IRQHandler+0x10>)
 8003f36:	f008 f9d7 	bl	800c2e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000630 	.word	0x20000630

08003f44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <TIM7_IRQHandler+0x10>)
 8003f4a:	f007 fbe1 	bl	800b710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200005e8 	.word	0x200005e8

08003f58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <DMA2_Stream2_IRQHandler+0x10>)
 8003f5e:	f001 fb7b 	bl	8005658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200003e4 	.word	0x200003e4

08003f6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003f70:	4802      	ldr	r0, [pc, #8]	@ (8003f7c <OTG_FS_IRQHandler+0x10>)
 8003f72:	f002 fc87 	bl	8006884 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20001670 	.word	0x20001670

08003f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
	return 1;
 8003f84:	2301      	movs	r3, #1
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_kill>:

int _kill(int pid, int sig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f9a:	f012 fe6b 	bl	8016c74 <__errno>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2216      	movs	r2, #22
 8003fa2:	601a      	str	r2, [r3, #0]
	return -1;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <_exit>:

void _exit (int status)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ffe7 	bl	8003f90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <_exit+0x12>

08003fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e00a      	b.n	8003fee <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003fd8:	f3af 8000 	nop.w
 8003fdc:	4601      	mov	r1, r0
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	60ba      	str	r2, [r7, #8]
 8003fe4:	b2ca      	uxtb	r2, r1
 8003fe6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3301      	adds	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	dbf0      	blt.n	8003fd8 <_read+0x12>
	}

return len;
 8003ff6:	687b      	ldr	r3, [r7, #4]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e009      	b.n	8004026 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	60ba      	str	r2, [r7, #8]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	dbf1      	blt.n	8004012 <_write+0x12>
	}
	return len;
 800402e:	687b      	ldr	r3, [r7, #4]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_close>:

int _close(int file)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	return -1;
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004060:	605a      	str	r2, [r3, #4]
	return 0;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <_isatty>:

int _isatty(int file)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
	return 0;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <_sbrk+0x50>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <_sbrk+0x16>
		heap_end = &end;
 80040b0:	4b0f      	ldr	r3, [pc, #60]	@ (80040f0 <_sbrk+0x50>)
 80040b2:	4a10      	ldr	r2, [pc, #64]	@ (80040f4 <_sbrk+0x54>)
 80040b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80040b6:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <_sbrk+0x50>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80040bc:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <_sbrk+0x50>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	466a      	mov	r2, sp
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d907      	bls.n	80040da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80040ca:	f012 fdd3 	bl	8016c74 <__errno>
 80040ce:	4603      	mov	r3, r0
 80040d0:	220c      	movs	r2, #12
 80040d2:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	e006      	b.n	80040e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <_sbrk+0x50>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	4a03      	ldr	r2, [pc, #12]	@ (80040f0 <_sbrk+0x50>)
 80040e4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000758 	.word	0x20000758
 80040f4:	20001ba0 	.word	0x20001ba0

080040f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040fc:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <SystemInit+0x28>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004102:	4a07      	ldr	r2, [pc, #28]	@ (8004120 <SystemInit+0x28>)
 8004104:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004108:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800410c:	4b04      	ldr	r3, [pc, #16]	@ (8004120 <SystemInit+0x28>)
 800410e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004112:	609a      	str	r2, [r3, #8]
#endif
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <Reset_Handler>:
 8004124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800415c <LoopFillZerobss+0x14>
 8004128:	2100      	movs	r1, #0
 800412a:	e003      	b.n	8004134 <LoopCopyDataInit>

0800412c <CopyDataInit>:
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <LoopFillZerobss+0x18>)
 800412e:	585b      	ldr	r3, [r3, r1]
 8004130:	5043      	str	r3, [r0, r1]
 8004132:	3104      	adds	r1, #4

08004134 <LoopCopyDataInit>:
 8004134:	480b      	ldr	r0, [pc, #44]	@ (8004164 <LoopFillZerobss+0x1c>)
 8004136:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <LoopFillZerobss+0x20>)
 8004138:	1842      	adds	r2, r0, r1
 800413a:	429a      	cmp	r2, r3
 800413c:	d3f6      	bcc.n	800412c <CopyDataInit>
 800413e:	4a0b      	ldr	r2, [pc, #44]	@ (800416c <LoopFillZerobss+0x24>)
 8004140:	e002      	b.n	8004148 <LoopFillZerobss>

08004142 <FillZerobss>:
 8004142:	2300      	movs	r3, #0
 8004144:	f842 3b04 	str.w	r3, [r2], #4

08004148 <LoopFillZerobss>:
 8004148:	4b09      	ldr	r3, [pc, #36]	@ (8004170 <LoopFillZerobss+0x28>)
 800414a:	429a      	cmp	r2, r3
 800414c:	d3f9      	bcc.n	8004142 <FillZerobss>
 800414e:	f7ff ffd3 	bl	80040f8 <SystemInit>
 8004152:	f012 fd95 	bl	8016c80 <__libc_init_array>
 8004156:	f7fe fd31 	bl	8002bbc <main>
 800415a:	4770      	bx	lr
 800415c:	20020000 	.word	0x20020000
 8004160:	08019140 	.word	0x08019140
 8004164:	20000000 	.word	0x20000000
 8004168:	200001fc 	.word	0x200001fc
 800416c:	200001fc 	.word	0x200001fc
 8004170:	20001b9c 	.word	0x20001b9c

08004174 <ADC_IRQHandler>:
 8004174:	e7fe      	b.n	8004174 <ADC_IRQHandler>
	...

08004178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800417c:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <HAL_Init+0x40>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0d      	ldr	r2, [pc, #52]	@ (80041b8 <HAL_Init+0x40>)
 8004182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004188:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <HAL_Init+0x40>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <HAL_Init+0x40>)
 800418e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004194:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <HAL_Init+0x40>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a07      	ldr	r2, [pc, #28]	@ (80041b8 <HAL_Init+0x40>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800419e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a0:	2003      	movs	r0, #3
 80041a2:	f001 f863 	bl	800526c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041a6:	2000      	movs	r0, #0
 80041a8:	f000 f808 	bl	80041bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041ac:	f7ff fac4 	bl	8003738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_InitTick+0x54>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <HAL_InitTick+0x58>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	f001 f87b 	bl	80052d6 <HAL_SYSTICK_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00e      	b.n	8004208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d80a      	bhi.n	8004206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f0:	2200      	movs	r2, #0
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	f001 f843 	bl	8005282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041fc:	4a06      	ldr	r2, [pc, #24]	@ (8004218 <HAL_InitTick+0x5c>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000008 	.word	0x20000008
 8004214:	20000010 	.word	0x20000010
 8004218:	2000000c 	.word	0x2000000c

0800421c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_IncTick+0x20>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_IncTick+0x24>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4413      	add	r3, r2
 800422c:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <HAL_IncTick+0x24>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000010 	.word	0x20000010
 8004240:	2000075c 	.word	0x2000075c

08004244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return uwTick;
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_GetTick+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	2000075c 	.word	0x2000075c

0800425c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7ff ffee 	bl	8004244 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d005      	beq.n	8004282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004276:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <HAL_Delay+0x44>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004282:	bf00      	nop
 8004284:	f7ff ffde 	bl	8004244 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d8f7      	bhi.n	8004284 <HAL_Delay+0x28>
  {
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000010 	.word	0x20000010

080042a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e033      	b.n	8004322 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fa60 	bl	8003788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d118      	bne.n	8004314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042ea:	f023 0302 	bic.w	r3, r3, #2
 80042ee:	f043 0202 	orr.w	r2, r3, #2
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fbd4 	bl	8004aa4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	f043 0201 	orr.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	@ 0x40
 8004312:	e001      	b.n	8004318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_ADC_Start+0x1a>
 8004342:	2302      	movs	r3, #2
 8004344:	e0b2      	b.n	80044ac <HAL_ADC_Start+0x180>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d018      	beq.n	800438e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800436c:	4b52      	ldr	r3, [pc, #328]	@ (80044b8 <HAL_ADC_Start+0x18c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a52      	ldr	r2, [pc, #328]	@ (80044bc <HAL_ADC_Start+0x190>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0c9a      	lsrs	r2, r3, #18
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004380:	e002      	b.n	8004388 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3b01      	subs	r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f9      	bne.n	8004382 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d17a      	bne.n	8004492 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043da:	d106      	bne.n	80043ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e0:	f023 0206 	bic.w	r2, r3, #6
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80043e8:	e002      	b.n	80043f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043f8:	4b31      	ldr	r3, [pc, #196]	@ (80044c0 <HAL_ADC_Start+0x194>)
 80043fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004404:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2b00      	cmp	r3, #0
 8004410:	d12a      	bne.n	8004468 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2b      	ldr	r2, [pc, #172]	@ (80044c4 <HAL_ADC_Start+0x198>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d015      	beq.n	8004448 <HAL_ADC_Start+0x11c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a29      	ldr	r2, [pc, #164]	@ (80044c8 <HAL_ADC_Start+0x19c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d105      	bne.n	8004432 <HAL_ADC_Start+0x106>
 8004426:	4b26      	ldr	r3, [pc, #152]	@ (80044c0 <HAL_ADC_Start+0x194>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a25      	ldr	r2, [pc, #148]	@ (80044cc <HAL_ADC_Start+0x1a0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d136      	bne.n	80044aa <HAL_ADC_Start+0x17e>
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_ADC_Start+0x194>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	d130      	bne.n	80044aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d129      	bne.n	80044aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	e020      	b.n	80044aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <HAL_ADC_Start+0x198>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d11b      	bne.n	80044aa <HAL_ADC_Start+0x17e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d114      	bne.n	80044aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	e00b      	b.n	80044aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004496:	f043 0210 	orr.w	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	f043 0201 	orr.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	20000008 	.word	0x20000008
 80044bc:	431bde83 	.word	0x431bde83
 80044c0:	40012300 	.word	0x40012300
 80044c4:	40012000 	.word	0x40012000
 80044c8:	40012100 	.word	0x40012100
 80044cc:	40012200 	.word	0x40012200

080044d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ec:	d113      	bne.n	8004516 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044fc:	d10b      	bne.n	8004516 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e063      	b.n	80045de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004516:	f7ff fe95 	bl	8004244 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800451c:	e021      	b.n	8004562 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d01d      	beq.n	8004562 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_ADC_PollForConversion+0x6c>
 800452c:	f7ff fe8a 	bl	8004244 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d212      	bcs.n	8004562 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d00b      	beq.n	8004562 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e03d      	b.n	80045de <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d1d6      	bne.n	800451e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0212 	mvn.w	r2, #18
 8004578:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d123      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11f      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d111      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_ADC_Start_DMA+0x1e>
 8004602:	2302      	movs	r3, #2
 8004604:	e0e9      	b.n	80047da <HAL_ADC_Start_DMA+0x1f2>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d018      	beq.n	800464e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800462c:	4b6d      	ldr	r3, [pc, #436]	@ (80047e4 <HAL_ADC_Start_DMA+0x1fc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6d      	ldr	r2, [pc, #436]	@ (80047e8 <HAL_ADC_Start_DMA+0x200>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0c9a      	lsrs	r2, r3, #18
 8004638:	4613      	mov	r3, r2
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4413      	add	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004640:	e002      	b.n	8004648 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3b01      	subs	r3, #1
 8004646:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f9      	bne.n	8004642 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800465c:	d107      	bne.n	800466e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800466c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	f040 80a1 	bne.w	80047c0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046bc:	d106      	bne.n	80046cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f023 0206 	bic.w	r2, r3, #6
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80046ca:	e002      	b.n	80046d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046da:	4b44      	ldr	r3, [pc, #272]	@ (80047ec <HAL_ADC_Start_DMA+0x204>)
 80046dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	4a43      	ldr	r2, [pc, #268]	@ (80047f0 <HAL_ADC_Start_DMA+0x208>)
 80046e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	4a42      	ldr	r2, [pc, #264]	@ (80047f4 <HAL_ADC_Start_DMA+0x20c>)
 80046ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	4a41      	ldr	r2, [pc, #260]	@ (80047f8 <HAL_ADC_Start_DMA+0x210>)
 80046f4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80046fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800470e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	334c      	adds	r3, #76	@ 0x4c
 800472a:	4619      	mov	r1, r3
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f000 fea8 	bl	8005484 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2b00      	cmp	r3, #0
 800473e:	d12a      	bne.n	8004796 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2d      	ldr	r2, [pc, #180]	@ (80047fc <HAL_ADC_Start_DMA+0x214>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d015      	beq.n	8004776 <HAL_ADC_Start_DMA+0x18e>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a2c      	ldr	r2, [pc, #176]	@ (8004800 <HAL_ADC_Start_DMA+0x218>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d105      	bne.n	8004760 <HAL_ADC_Start_DMA+0x178>
 8004754:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <HAL_ADC_Start_DMA+0x204>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <HAL_ADC_Start_DMA+0x21c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d136      	bne.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
 800476a:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <HAL_ADC_Start_DMA+0x204>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d130      	bne.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d129      	bne.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	e020      	b.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_ADC_Start_DMA+0x214>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d11b      	bne.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d114      	bne.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	e00b      	b.n	80047d8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	f043 0210 	orr.w	r2, r3, #16
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	f043 0201 	orr.w	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000008 	.word	0x20000008
 80047e8:	431bde83 	.word	0x431bde83
 80047ec:	40012300 	.word	0x40012300
 80047f0:	08004c9d 	.word	0x08004c9d
 80047f4:	08004d57 	.word	0x08004d57
 80047f8:	08004d73 	.word	0x08004d73
 80047fc:	40012000 	.word	0x40012000
 8004800:	40012100 	.word	0x40012100
 8004804:	40012200 	.word	0x40012200

08004808 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_ADC_ConfigChannel+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e105      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x228>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b09      	cmp	r3, #9
 800488a:	d925      	bls.n	80048d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68d9      	ldr	r1, [r3, #12]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	3b1e      	subs	r3, #30
 80048a2:	2207      	movs	r2, #7
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43da      	mvns	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	400a      	ands	r2, r1
 80048b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68d9      	ldr	r1, [r3, #12]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4618      	mov	r0, r3
 80048c4:	4603      	mov	r3, r0
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4403      	add	r3, r0
 80048ca:	3b1e      	subs	r3, #30
 80048cc:	409a      	lsls	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	e022      	b.n	800491e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6919      	ldr	r1, [r3, #16]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	2207      	movs	r2, #7
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43da      	mvns	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	400a      	ands	r2, r1
 80048fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6919      	ldr	r1, [r3, #16]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	4618      	mov	r0, r3
 800490e:	4603      	mov	r3, r0
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4403      	add	r3, r0
 8004914:	409a      	lsls	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	430a      	orrs	r2, r1
 800491c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b06      	cmp	r3, #6
 8004924:	d824      	bhi.n	8004970 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	3b05      	subs	r3, #5
 8004938:	221f      	movs	r2, #31
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	400a      	ands	r2, r1
 8004946:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	4618      	mov	r0, r3
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	3b05      	subs	r3, #5
 8004962:	fa00 f203 	lsl.w	r2, r0, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	635a      	str	r2, [r3, #52]	@ 0x34
 800496e:	e04c      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d824      	bhi.n	80049c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	3b23      	subs	r3, #35	@ 0x23
 800498a:	221f      	movs	r2, #31
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43da      	mvns	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	400a      	ands	r2, r1
 8004998:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	3b23      	subs	r3, #35	@ 0x23
 80049b4:	fa00 f203 	lsl.w	r2, r0, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
 80049c0:	e023      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	3b41      	subs	r3, #65	@ 0x41
 80049d4:	221f      	movs	r2, #31
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43da      	mvns	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	400a      	ands	r2, r1
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	4618      	mov	r0, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	3b41      	subs	r3, #65	@ 0x41
 80049fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a0a:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <HAL_ADC_ConfigChannel+0x234>)
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a21      	ldr	r2, [pc, #132]	@ (8004a98 <HAL_ADC_ConfigChannel+0x238>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d109      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x1cc>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b12      	cmp	r3, #18
 8004a1e:	d105      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	@ (8004a98 <HAL_ADC_ConfigChannel+0x238>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d123      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x21e>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d003      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x1e6>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b11      	cmp	r3, #17
 8004a44:	d11b      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d111      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_ADC_ConfigChannel+0x23c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a10      	ldr	r2, [pc, #64]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x240>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	0c9a      	lsrs	r2, r3, #18
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a70:	e002      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f9      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40012300 	.word	0x40012300
 8004a98:	40012000 	.word	0x40012000
 8004a9c:	20000008 	.word	0x20000008
 8004aa0:	431bde83 	.word	0x431bde83

08004aa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aac:	4b79      	ldr	r3, [pc, #484]	@ (8004c94 <ADC_Init+0x1f0>)
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	021a      	lsls	r2, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	4a58      	ldr	r2, [pc, #352]	@ (8004c98 <ADC_Init+0x1f4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	e00f      	b.n	8004ba2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0202 	bic.w	r2, r2, #2
 8004bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6899      	ldr	r1, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7e1b      	ldrb	r3, [r3, #24]
 8004bbc:	005a      	lsls	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004bee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	035a      	lsls	r2, r3, #13
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e007      	b.n	8004c18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	051a      	lsls	r2, r3, #20
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c5a:	025a      	lsls	r2, r3, #9
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6899      	ldr	r1, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	029a      	lsls	r2, r3, #10
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012300 	.word	0x40012300
 8004c98:	0f000001 	.word	0x0f000001

08004c9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d13c      	bne.n	8004d30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d12b      	bne.n	8004d28 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d127      	bne.n	8004d28 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d119      	bne.n	8004d28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0220 	bic.w	r2, r2, #32
 8004d02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff fd7a 	bl	8004822 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d2e:	e00e      	b.n	8004d4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff fd84 	bl	800484a <HAL_ADC_ErrorCallback>
}
 8004d42:	e004      	b.n	8004d4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff fd66 	bl	8004836 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2240      	movs	r2, #64	@ 0x40
 8004d84:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	f043 0204 	orr.w	r2, r3, #4
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff fd59 	bl	800484a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e17d      	b.n	80050b4 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b09      	cmp	r3, #9
 8004dc6:	d925      	bls.n	8004e14 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68d9      	ldr	r1, [r3, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	3b1e      	subs	r3, #30
 8004dde:	2207      	movs	r2, #7
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43da      	mvns	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	400a      	ands	r2, r1
 8004dec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68d9      	ldr	r1, [r3, #12]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4603      	mov	r3, r0
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4403      	add	r3, r0
 8004e06:	3b1e      	subs	r3, #30
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e022      	b.n	8004e5a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6919      	ldr	r1, [r3, #16]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	2207      	movs	r2, #7
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	400a      	ands	r2, r1
 8004e36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6919      	ldr	r1, [r3, #16]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4618      	mov	r0, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4403      	add	r3, r0
 8004e50:	409a      	lsls	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004e68:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	051a      	lsls	r2, r3, #20
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	3303      	adds	r3, #3
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	221f      	movs	r2, #31
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	400a      	ands	r2, r1
 8004eb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	3303      	adds	r3, #3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4a74      	ldr	r2, [pc, #464]	@ (80050c0 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6899      	ldr	r1, [r3, #8]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	e00f      	b.n	8004f58 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004f46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004f56:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	7d5b      	ldrb	r3, [r3, #21]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f6e:	605a      	str	r2, [r3, #4]
 8004f70:	e007      	b.n	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f80:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	7d1b      	ldrb	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d008      	beq.n	8004f9c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	e007      	b.n	8004fac <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004faa:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d02e      	beq.n	8005012 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d840      	bhi.n	800503a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d002      	beq.n	8004fc2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d014      	beq.n	8004fea <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004fc0:	e03b      	b.n	800503a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004fd0:	f023 030f 	bic.w	r3, r3, #15
 8004fd4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6959      	ldr	r1, [r3, #20]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	615a      	str	r2, [r3, #20]
      break;
 8004fe8:	e03b      	b.n	8005062 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004ff8:	f023 030f 	bic.w	r3, r3, #15
 8004ffc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6999      	ldr	r1, [r3, #24]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	619a      	str	r2, [r3, #24]
      break;
 8005010:	e027      	b.n	8005062 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005020:	f023 030f 	bic.w	r3, r3, #15
 8005024:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	61da      	str	r2, [r3, #28]
      break;
 8005038:	e013      	b.n	8005062 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005048:	f023 030f 	bic.w	r3, r3, #15
 800504c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a19      	ldr	r1, [r3, #32]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	621a      	str	r2, [r3, #32]
      break;
 8005060:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005062:	4b18      	ldr	r3, [pc, #96]	@ (80050c4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8005064:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a17      	ldr	r2, [pc, #92]	@ (80050c8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b12      	cmp	r3, #18
 8005076:	d105      	bne.n	8005084 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0f      	ldr	r2, [pc, #60]	@ (80050c8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10d      	bne.n	80050aa <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b10      	cmp	r3, #16
 8005094:	d003      	beq.n	800509e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b11      	cmp	r3, #17
 800509c:	d105      	bne.n	80050aa <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	000f0001 	.word	0x000f0001
 80050c4:	40012300 	.word	0x40012300
 80050c8:	40012000 	.word	0x40012000

080050cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050e8:	4013      	ands	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fe:	4a04      	ldr	r2, [pc, #16]	@ (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	60d3      	str	r3, [r2, #12]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <__NVIC_GetPriorityGrouping+0x18>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	f003 0307 	and.w	r3, r3, #7
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	db0b      	blt.n	800515a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	f003 021f 	and.w	r2, r3, #31
 8005148:	4907      	ldr	r1, [pc, #28]	@ (8005168 <__NVIC_EnableIRQ+0x38>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2001      	movs	r0, #1
 8005152:	fa00 f202 	lsl.w	r2, r0, r2
 8005156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e100 	.word	0xe000e100

0800516c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db0a      	blt.n	8005196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	490c      	ldr	r1, [pc, #48]	@ (80051b8 <__NVIC_SetPriority+0x4c>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	440b      	add	r3, r1
 8005190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005194:	e00a      	b.n	80051ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4908      	ldr	r1, [pc, #32]	@ (80051bc <__NVIC_SetPriority+0x50>)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	3b04      	subs	r3, #4
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	440b      	add	r3, r1
 80051aa:	761a      	strb	r2, [r3, #24]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000e100 	.word	0xe000e100
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	@ 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f1c3 0307 	rsb	r3, r3, #7
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf28      	it	cs
 80051de:	2304      	movcs	r3, #4
 80051e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d902      	bls.n	80051f0 <NVIC_EncodePriority+0x30>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	3b03      	subs	r3, #3
 80051ee:	e000      	b.n	80051f2 <NVIC_EncodePriority+0x32>
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43da      	mvns	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	401a      	ands	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005208:	f04f 31ff 	mov.w	r1, #4294967295
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	43d9      	mvns	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	4313      	orrs	r3, r2
         );
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	@ 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005238:	d301      	bcc.n	800523e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800523a:	2301      	movs	r3, #1
 800523c:	e00f      	b.n	800525e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <SysTick_Config+0x40>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3b01      	subs	r3, #1
 8005244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005246:	210f      	movs	r1, #15
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	f7ff ff8e 	bl	800516c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005250:	4b05      	ldr	r3, [pc, #20]	@ (8005268 <SysTick_Config+0x40>)
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005256:	4b04      	ldr	r3, [pc, #16]	@ (8005268 <SysTick_Config+0x40>)
 8005258:	2207      	movs	r2, #7
 800525a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	e000e010 	.word	0xe000e010

0800526c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ff29 	bl	80050cc <__NVIC_SetPriorityGrouping>
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	4603      	mov	r3, r0
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005294:	f7ff ff3e 	bl	8005114 <__NVIC_GetPriorityGrouping>
 8005298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7ff ff8e 	bl	80051c0 <NVIC_EncodePriority>
 80052a4:	4602      	mov	r2, r0
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff5d 	bl	800516c <__NVIC_SetPriority>
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff31 	bl	8005130 <__NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ffa2 	bl	8005228 <SysTick_Config>
 80052e4:	4603      	mov	r3, r0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e00e      	b.n	800531e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	795b      	ldrb	r3, [r3, #5]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fe fb11 	bl	8003938 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
	...

08005328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005334:	f7fe ff86 	bl	8004244 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e099      	b.n	8005478 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005364:	e00f      	b.n	8005386 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005366:	f7fe ff6d 	bl	8004244 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b05      	cmp	r3, #5
 8005372:	d908      	bls.n	8005386 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2203      	movs	r2, #3
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e078      	b.n	8005478 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e8      	bne.n	8005366 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <HAL_DMA_Init+0x158>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d107      	bne.n	80053f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	4313      	orrs	r3, r2
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0307 	bic.w	r3, r3, #7
 8005406:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	2b04      	cmp	r3, #4
 8005418:	d117      	bne.n	800544a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fb01 	bl	8005a34 <DMA_CheckFifoParam>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2240      	movs	r2, #64	@ 0x40
 800543c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005446:	2301      	movs	r3, #1
 8005448:	e016      	b.n	8005478 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fab8 	bl	80059c8 <DMA_CalcBaseAndBitshift>
 8005458:	4603      	mov	r3, r0
 800545a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	223f      	movs	r2, #63	@ 0x3f
 8005462:	409a      	lsls	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	f010803f 	.word	0xf010803f

08005484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_DMA_Start_IT+0x26>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e040      	b.n	800552c <HAL_DMA_Start_IT+0xa8>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d12f      	bne.n	800551e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa4a 	bl	800596c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054dc:	223f      	movs	r2, #63	@ 0x3f
 80054de:	409a      	lsls	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0216 	orr.w	r2, r2, #22
 80054f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0208 	orr.w	r2, r2, #8
 800550a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e005      	b.n	800552a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005526:	2302      	movs	r3, #2
 8005528:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800552a:	7dfb      	ldrb	r3, [r7, #23]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005540:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005542:	f7fe fe7f 	bl	8004244 <HAL_GetTick>
 8005546:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d008      	beq.n	8005566 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2280      	movs	r2, #128	@ 0x80
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e052      	b.n	800560c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0216 	bic.w	r2, r2, #22
 8005574:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695a      	ldr	r2, [r3, #20]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005584:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <HAL_DMA_Abort+0x62>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0208 	bic.w	r2, r2, #8
 80055a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b6:	e013      	b.n	80055e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b8:	f7fe fe44 	bl	8004244 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d90c      	bls.n	80055e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2203      	movs	r2, #3
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e015      	b.n	800560c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e4      	bne.n	80055b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f2:	223f      	movs	r2, #63	@ 0x3f
 80055f4:	409a      	lsls	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d004      	beq.n	8005632 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2280      	movs	r2, #128	@ 0x80
 800562c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e00c      	b.n	800564c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2205      	movs	r2, #5
 8005636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005664:	4b8e      	ldr	r3, [pc, #568]	@ (80058a0 <HAL_DMA_IRQHandler+0x248>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a8e      	ldr	r2, [pc, #568]	@ (80058a4 <HAL_DMA_IRQHandler+0x24c>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	0a9b      	lsrs	r3, r3, #10
 8005670:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005676:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005682:	2208      	movs	r2, #8
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d01a      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0204 	bic.w	r2, r2, #4
 80056aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b0:	2208      	movs	r2, #8
 80056b2:	409a      	lsls	r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c8:	2201      	movs	r2, #1
 80056ca:	409a      	lsls	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d012      	beq.n	80056fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e6:	2201      	movs	r2, #1
 80056e8:	409a      	lsls	r2, r3
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	f043 0202 	orr.w	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056fe:	2204      	movs	r2, #4
 8005700:	409a      	lsls	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d012      	beq.n	8005730 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571c:	2204      	movs	r2, #4
 800571e:	409a      	lsls	r2, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005728:	f043 0204 	orr.w	r2, r3, #4
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005734:	2210      	movs	r2, #16
 8005736:	409a      	lsls	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d043      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03c      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005752:	2210      	movs	r2, #16
 8005754:	409a      	lsls	r2, r3
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d018      	beq.n	800579a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d108      	bne.n	8005788 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d024      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
 8005786:	e01f      	b.n	80057c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01b      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
 8005798:	e016      	b.n	80057c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0208 	bic.w	r2, r2, #8
 80057b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057cc:	2220      	movs	r2, #32
 80057ce:	409a      	lsls	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 808f 	beq.w	80058f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8087 	beq.w	80058f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ee:	2220      	movs	r2, #32
 80057f0:	409a      	lsls	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d136      	bne.n	8005870 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0216 	bic.w	r2, r2, #22
 8005810:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695a      	ldr	r2, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005820:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <HAL_DMA_IRQHandler+0x1da>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0208 	bic.w	r2, r2, #8
 8005840:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005846:	223f      	movs	r2, #63	@ 0x3f
 8005848:	409a      	lsls	r2, r3
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005862:	2b00      	cmp	r3, #0
 8005864:	d07e      	beq.n	8005964 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
        }
        return;
 800586e:	e079      	b.n	8005964 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01d      	beq.n	80058ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10d      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005890:	2b00      	cmp	r3, #0
 8005892:	d031      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
 800589c:	e02c      	b.n	80058f8 <HAL_DMA_IRQHandler+0x2a0>
 800589e:	bf00      	nop
 80058a0:	20000008 	.word	0x20000008
 80058a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d023      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
 80058b8:	e01e      	b.n	80058f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0210 	bic.w	r2, r2, #16
 80058d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d032      	beq.n	8005966 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d022      	beq.n	8005952 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2205      	movs	r2, #5
 8005910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	3301      	adds	r3, #1
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	429a      	cmp	r2, r3
 800592e:	d307      	bcc.n	8005940 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f2      	bne.n	8005924 <HAL_DMA_IRQHandler+0x2cc>
 800593e:	e000      	b.n	8005942 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005940:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
 8005962:	e000      	b.n	8005966 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005964:	bf00      	nop
    }
  }
}
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005988:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d108      	bne.n	80059ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059aa:	e007      	b.n	80059bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	3b10      	subs	r3, #16
 80059d8:	4a14      	ldr	r2, [pc, #80]	@ (8005a2c <DMA_CalcBaseAndBitshift+0x64>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	091b      	lsrs	r3, r3, #4
 80059e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059e2:	4a13      	ldr	r2, [pc, #76]	@ (8005a30 <DMA_CalcBaseAndBitshift+0x68>)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d909      	bls.n	8005a0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a08:	e007      	b.n	8005a1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a12:	f023 0303 	bic.w	r3, r3, #3
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	aaaaaaab 	.word	0xaaaaaaab
 8005a30:	0801894c 	.word	0x0801894c

08005a34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11f      	bne.n	8005a8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d856      	bhi.n	8005b02 <DMA_CheckFifoParam+0xce>
 8005a54:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <DMA_CheckFifoParam+0x28>)
 8005a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5a:	bf00      	nop
 8005a5c:	08005a6d 	.word	0x08005a6d
 8005a60:	08005a7f 	.word	0x08005a7f
 8005a64:	08005a6d 	.word	0x08005a6d
 8005a68:	08005b03 	.word	0x08005b03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d046      	beq.n	8005b06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a7c:	e043      	b.n	8005b06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a86:	d140      	bne.n	8005b0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8c:	e03d      	b.n	8005b0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a96:	d121      	bne.n	8005adc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d837      	bhi.n	8005b0e <DMA_CheckFifoParam+0xda>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <DMA_CheckFifoParam+0x70>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005abb 	.word	0x08005abb
 8005aac:	08005ab5 	.word	0x08005ab5
 8005ab0:	08005acd 	.word	0x08005acd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab8:	e030      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d025      	beq.n	8005b12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aca:	e022      	b.n	8005b12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ad4:	d11f      	bne.n	8005b16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ada:	e01c      	b.n	8005b16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d903      	bls.n	8005aea <DMA_CheckFifoParam+0xb6>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d003      	beq.n	8005af0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ae8:	e018      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
      break;
 8005aee:	e015      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00e      	beq.n	8005b1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	e00b      	b.n	8005b1a <DMA_CheckFifoParam+0xe6>
      break;
 8005b02:	bf00      	nop
 8005b04:	e00a      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      break;
 8005b06:	bf00      	nop
 8005b08:	e008      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e006      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e004      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <DMA_CheckFifoParam+0xe8>
      break;
 8005b1a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b3e:	4b23      	ldr	r3, [pc, #140]	@ (8005bcc <HAL_FLASH_Program+0xa0>)
 8005b40:	7e1b      	ldrb	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_FLASH_Program+0x1e>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e03b      	b.n	8005bc2 <HAL_FLASH_Program+0x96>
 8005b4a:	4b20      	ldr	r3, [pc, #128]	@ (8005bcc <HAL_FLASH_Program+0xa0>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005b54:	f000 f870 	bl	8005c38 <FLASH_WaitForLastOperation>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d12b      	bne.n	8005bba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005b68:	783b      	ldrb	r3, [r7, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68b8      	ldr	r0, [r7, #8]
 8005b6e:	f000 f91b 	bl	8005da8 <FLASH_Program_Byte>
 8005b72:	e016      	b.n	8005ba2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d105      	bne.n	8005b86 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005b7a:	883b      	ldrh	r3, [r7, #0]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	f000 f8ee 	bl	8005d60 <FLASH_Program_HalfWord>
 8005b84:	e00d      	b.n	8005ba2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d105      	bne.n	8005b98 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68b8      	ldr	r0, [r7, #8]
 8005b92:	f000 f8c3 	bl	8005d1c <FLASH_Program_Word>
 8005b96:	e004      	b.n	8005ba2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b9c:	68b8      	ldr	r0, [r7, #8]
 8005b9e:	f000 f88b 	bl	8005cb8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ba2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ba6:	f000 f847 	bl	8005c38 <FLASH_WaitForLastOperation>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005bae:	4b08      	ldr	r3, [pc, #32]	@ (8005bd0 <HAL_FLASH_Program+0xa4>)
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	4a07      	ldr	r2, [pc, #28]	@ (8005bd0 <HAL_FLASH_Program+0xa4>)
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bba:	4b04      	ldr	r3, [pc, #16]	@ (8005bcc <HAL_FLASH_Program+0xa0>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000760 	.word	0x20000760
 8005bd0:	40023c00 	.word	0x40023c00

08005bd4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005bde:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <HAL_FLASH_Unlock+0x38>)
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da0b      	bge.n	8005bfe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005be6:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <HAL_FLASH_Unlock+0x38>)
 8005be8:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <HAL_FLASH_Unlock+0x3c>)
 8005bea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005bec:	4b07      	ldr	r3, [pc, #28]	@ (8005c0c <HAL_FLASH_Unlock+0x38>)
 8005bee:	4a09      	ldr	r2, [pc, #36]	@ (8005c14 <HAL_FLASH_Unlock+0x40>)
 8005bf0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005bf2:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <HAL_FLASH_Unlock+0x38>)
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da01      	bge.n	8005bfe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40023c00 	.word	0x40023c00
 8005c10:	45670123 	.word	0x45670123
 8005c14:	cdef89ab 	.word	0xcdef89ab

08005c18 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_FLASH_Lock+0x1c>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4a04      	ldr	r2, [pc, #16]	@ (8005c34 <HAL_FLASH_Lock+0x1c>)
 8005c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c26:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40023c00 	.word	0x40023c00

08005c38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <FLASH_WaitForLastOperation+0x78>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c4a:	f7fe fafb 	bl	8004244 <HAL_GetTick>
 8005c4e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005c50:	e010      	b.n	8005c74 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d00c      	beq.n	8005c74 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <FLASH_WaitForLastOperation+0x38>
 8005c60:	f7fe faf0 	bl	8004244 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d201      	bcs.n	8005c74 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e019      	b.n	8005ca8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005c74:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb4 <FLASH_WaitForLastOperation+0x7c>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e8      	bne.n	8005c52 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005c80:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <FLASH_WaitForLastOperation+0x7c>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c8c:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <FLASH_WaitForLastOperation+0x7c>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005c92:	4b08      	ldr	r3, [pc, #32]	@ (8005cb4 <FLASH_WaitForLastOperation+0x7c>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005c9e:	f000 f8a5 	bl	8005dec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
  
}  
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000760 	.word	0x20000760
 8005cb4:	40023c00 	.word	0x40023c00

08005cb8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005cc4:	4b14      	ldr	r3, [pc, #80]	@ (8005d18 <FLASH_Program_DoubleWord+0x60>)
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4a13      	ldr	r2, [pc, #76]	@ (8005d18 <FLASH_Program_DoubleWord+0x60>)
 8005cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005cd0:	4b11      	ldr	r3, [pc, #68]	@ (8005d18 <FLASH_Program_DoubleWord+0x60>)
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	4a10      	ldr	r2, [pc, #64]	@ (8005d18 <FLASH_Program_DoubleWord+0x60>)
 8005cd6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005cda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005d18 <FLASH_Program_DoubleWord+0x60>)
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d18 <FLASH_Program_DoubleWord+0x60>)
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005cee:	f3bf 8f6f 	isb	sy
}
 8005cf2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	000a      	movs	r2, r1
 8005d02:	2300      	movs	r3, #0
 8005d04:	68f9      	ldr	r1, [r7, #12]
 8005d06:	3104      	adds	r1, #4
 8005d08:	4613      	mov	r3, r2
 8005d0a:	600b      	str	r3, [r1, #0]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40023c00 	.word	0x40023c00

08005d1c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <FLASH_Program_Word+0x40>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d5c <FLASH_Program_Word+0x40>)
 8005d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005d32:	4b0a      	ldr	r3, [pc, #40]	@ (8005d5c <FLASH_Program_Word+0x40>)
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	4a09      	ldr	r2, [pc, #36]	@ (8005d5c <FLASH_Program_Word+0x40>)
 8005d38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d3e:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <FLASH_Program_Word+0x40>)
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	4a06      	ldr	r2, [pc, #24]	@ (8005d5c <FLASH_Program_Word+0x40>)
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	40023c00 	.word	0x40023c00

08005d60 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <FLASH_Program_HalfWord+0x44>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <FLASH_Program_HalfWord+0x44>)
 8005d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	@ (8005da4 <FLASH_Program_HalfWord+0x44>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	4a09      	ldr	r2, [pc, #36]	@ (8005da4 <FLASH_Program_HalfWord+0x44>)
 8005d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d84:	4b07      	ldr	r3, [pc, #28]	@ (8005da4 <FLASH_Program_HalfWord+0x44>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	4a06      	ldr	r2, [pc, #24]	@ (8005da4 <FLASH_Program_HalfWord+0x44>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	887a      	ldrh	r2, [r7, #2]
 8005d94:	801a      	strh	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40023c00 	.word	0x40023c00

08005da8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005db4:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <FLASH_Program_Byte+0x40>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4a0b      	ldr	r2, [pc, #44]	@ (8005de8 <FLASH_Program_Byte+0x40>)
 8005dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005dc0:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <FLASH_Program_Byte+0x40>)
 8005dc2:	4a09      	ldr	r2, [pc, #36]	@ (8005de8 <FLASH_Program_Byte+0x40>)
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005dc8:	4b07      	ldr	r3, [pc, #28]	@ (8005de8 <FLASH_Program_Byte+0x40>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4a06      	ldr	r2, [pc, #24]	@ (8005de8 <FLASH_Program_Byte+0x40>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	701a      	strb	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40023c00 	.word	0x40023c00

08005dec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005df0:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005dfc:	4b25      	ldr	r3, [pc, #148]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	f043 0310 	orr.w	r3, r3, #16
 8005e04:	4a23      	ldr	r2, [pc, #140]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005e08:	4b21      	ldr	r3, [pc, #132]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e0a:	2210      	movs	r2, #16
 8005e0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005e0e:	4b20      	ldr	r3, [pc, #128]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d008      	beq.n	8005e2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f043 0308 	orr.w	r3, r3, #8
 8005e22:	4a1c      	ldr	r2, [pc, #112]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005e26:	4b1a      	ldr	r3, [pc, #104]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e28:	2220      	movs	r2, #32
 8005e2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005e2c:	4b18      	ldr	r3, [pc, #96]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d008      	beq.n	8005e4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005e38:	4b16      	ldr	r3, [pc, #88]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f043 0304 	orr.w	r3, r3, #4
 8005e40:	4a14      	ldr	r2, [pc, #80]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005e44:	4b12      	ldr	r3, [pc, #72]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e46:	2240      	movs	r2, #64	@ 0x40
 8005e48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005e4a:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d008      	beq.n	8005e68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005e56:	4b0f      	ldr	r3, [pc, #60]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f043 0302 	orr.w	r3, r3, #2
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005e62:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e64:	2280      	movs	r2, #128	@ 0x80
 8005e66:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005e68:	4b09      	ldr	r3, [pc, #36]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005e74:	4b07      	ldr	r3, [pc, #28]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f043 0320 	orr.w	r3, r3, #32
 8005e7c:	4a05      	ldr	r2, [pc, #20]	@ (8005e94 <FLASH_SetErrorCode+0xa8>)
 8005e7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005e80:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <FLASH_SetErrorCode+0xa4>)
 8005e82:	2202      	movs	r2, #2
 8005e84:	60da      	str	r2, [r3, #12]
  }
}
 8005e86:	bf00      	nop
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	40023c00 	.word	0x40023c00
 8005e94:	20000760 	.word	0x20000760

08005e98 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d102      	bne.n	8005eb4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e010      	b.n	8005ed6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d103      	bne.n	8005ec2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005eba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e009      	b.n	8005ed6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d103      	bne.n	8005ed0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e002      	b.n	8005ed6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ed0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005ed4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ed6:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	4a12      	ldr	r2, [pc, #72]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005ee2:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	490f      	ldr	r1, [pc, #60]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005ef4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ef8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005efa:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	4a07      	ldr	r2, [pc, #28]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f0c:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	4a04      	ldr	r2, [pc, #16]	@ (8005f24 <FLASH_Erase_Sector+0x8c>)
 8005f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f16:	6113      	str	r3, [r2, #16]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40023c00 	.word	0x40023c00

08005f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b089      	sub	sp, #36	@ 0x24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e16b      	b.n	800621c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f44:	2201      	movs	r2, #1
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	f040 815a 	bne.w	8006216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d005      	beq.n	8005f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d130      	bne.n	8005fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	2203      	movs	r2, #3
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 0201 	and.w	r2, r3, #1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d017      	beq.n	8006018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d123      	bne.n	800606c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	08da      	lsrs	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3208      	adds	r2, #8
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	220f      	movs	r2, #15
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	08da      	lsrs	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3208      	adds	r2, #8
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	2203      	movs	r2, #3
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0203 	and.w	r2, r3, #3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80b4 	beq.w	8006216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4b60      	ldr	r3, [pc, #384]	@ (8006234 <HAL_GPIO_Init+0x30c>)
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	4a5f      	ldr	r2, [pc, #380]	@ (8006234 <HAL_GPIO_Init+0x30c>)
 80060b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80060be:	4b5d      	ldr	r3, [pc, #372]	@ (8006234 <HAL_GPIO_Init+0x30c>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006238 <HAL_GPIO_Init+0x310>)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	3302      	adds	r3, #2
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a52      	ldr	r2, [pc, #328]	@ (800623c <HAL_GPIO_Init+0x314>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d02b      	beq.n	800614e <HAL_GPIO_Init+0x226>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a51      	ldr	r2, [pc, #324]	@ (8006240 <HAL_GPIO_Init+0x318>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d025      	beq.n	800614a <HAL_GPIO_Init+0x222>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a50      	ldr	r2, [pc, #320]	@ (8006244 <HAL_GPIO_Init+0x31c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01f      	beq.n	8006146 <HAL_GPIO_Init+0x21e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a4f      	ldr	r2, [pc, #316]	@ (8006248 <HAL_GPIO_Init+0x320>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d019      	beq.n	8006142 <HAL_GPIO_Init+0x21a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a4e      	ldr	r2, [pc, #312]	@ (800624c <HAL_GPIO_Init+0x324>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_GPIO_Init+0x216>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a4d      	ldr	r2, [pc, #308]	@ (8006250 <HAL_GPIO_Init+0x328>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00d      	beq.n	800613a <HAL_GPIO_Init+0x212>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a4c      	ldr	r2, [pc, #304]	@ (8006254 <HAL_GPIO_Init+0x32c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <HAL_GPIO_Init+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a4b      	ldr	r2, [pc, #300]	@ (8006258 <HAL_GPIO_Init+0x330>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_GPIO_Init+0x20a>
 800612e:	2307      	movs	r3, #7
 8006130:	e00e      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006132:	2308      	movs	r3, #8
 8006134:	e00c      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006136:	2306      	movs	r3, #6
 8006138:	e00a      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613a:	2305      	movs	r3, #5
 800613c:	e008      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613e:	2304      	movs	r3, #4
 8006140:	e006      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006142:	2303      	movs	r3, #3
 8006144:	e004      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006146:	2302      	movs	r3, #2
 8006148:	e002      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614e:	2300      	movs	r3, #0
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	f002 0203 	and.w	r2, r2, #3
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	4093      	lsls	r3, r2
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006160:	4935      	ldr	r1, [pc, #212]	@ (8006238 <HAL_GPIO_Init+0x310>)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	3302      	adds	r3, #2
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800616e:	4b3b      	ldr	r3, [pc, #236]	@ (800625c <HAL_GPIO_Init+0x334>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006192:	4a32      	ldr	r2, [pc, #200]	@ (800625c <HAL_GPIO_Init+0x334>)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006198:	4b30      	ldr	r3, [pc, #192]	@ (800625c <HAL_GPIO_Init+0x334>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061bc:	4a27      	ldr	r2, [pc, #156]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061c2:	4b26      	ldr	r3, [pc, #152]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061e6:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006210:	4a12      	ldr	r2, [pc, #72]	@ (800625c <HAL_GPIO_Init+0x334>)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3301      	adds	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b0f      	cmp	r3, #15
 8006220:	f67f ae90 	bls.w	8005f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3724      	adds	r7, #36	@ 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	40013800 	.word	0x40013800
 800623c:	40020000 	.word	0x40020000
 8006240:	40020400 	.word	0x40020400
 8006244:	40020800 	.word	0x40020800
 8006248:	40020c00 	.word	0x40020c00
 800624c:	40021000 	.word	0x40021000
 8006250:	40021400 	.word	0x40021400
 8006254:	40021800 	.word	0x40021800
 8006258:	40021c00 	.word	0x40021c00
 800625c:	40013c00 	.word	0x40013c00

08006260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e001      	b.n	8006282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a0:	787b      	ldrb	r3, [r7, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062ac:	e003      	b.n	80062b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	041a      	lsls	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	619a      	str	r2, [r3, #24]
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af02      	add	r7, sp, #8
 80062c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e059      	b.n	8006388 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f00f faca 	bl	8015888 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2203      	movs	r2, #3
 80062f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006302:	d102      	bne.n	800630a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f007 fd29 	bl	800dd66 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7c1a      	ldrb	r2, [r3, #16]
 800631c:	f88d 2000 	strb.w	r2, [sp]
 8006320:	3304      	adds	r3, #4
 8006322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006324:	f007 fcaa 	bl	800dc7c <USB_CoreInit>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e026      	b.n	8006388 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f007 fd21 	bl	800dd88 <USB_SetCurrentMode>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e017      	b.n	8006388 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	7c1a      	ldrb	r2, [r3, #16]
 8006360:	f88d 2000 	strb.w	r2, [sp]
 8006364:	3304      	adds	r3, #4
 8006366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006368:	f007 fec4 	bl	800e0f4 <USB_HostInit>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e004      	b.n	8006388 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b08b      	sub	sp, #44	@ 0x2c
 8006394:	af04      	add	r7, sp, #16
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	4603      	mov	r3, r0
 80063a0:	70fb      	strb	r3, [r7, #3]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70bb      	strb	r3, [r7, #2]
 80063a6:	4613      	mov	r3, r2
 80063a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80063aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80063ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_HCD_HC_Init+0x2c>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e09d      	b.n	80064f8 <HAL_HCD_HC_Init+0x168>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4613      	mov	r3, r2
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	3319      	adds	r3, #25
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	3314      	adds	r3, #20
 80063e8:	787a      	ldrb	r2, [r7, #1]
 80063ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	3315      	adds	r3, #21
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	1a9b      	subs	r3, r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	3326      	adds	r3, #38	@ 0x26
 8006410:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006414:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	78bb      	ldrb	r3, [r7, #2]
 800641a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641e:	b2d8      	uxtb	r0, r3
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	3316      	adds	r3, #22
 800642e:	4602      	mov	r2, r0
 8006430:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fbc8 	bl	8006bcc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800643c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da0a      	bge.n	800645a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	440b      	add	r3, r1
 8006452:	3317      	adds	r3, #23
 8006454:	2201      	movs	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e009      	b.n	800646e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800645a:	78fa      	ldrb	r2, [r7, #3]
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	3317      	adds	r3, #23
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f007 ffa2 	bl	800e3bc <USB_GetHostSpeed>
 8006478:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800647a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d10b      	bne.n	800649a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8006482:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006486:	2b01      	cmp	r3, #1
 8006488:	d107      	bne.n	800649a <HAL_HCD_HC_Init+0x10a>
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d104      	bne.n	800649a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2bbc      	cmp	r3, #188	@ 0xbc
 8006494:	d901      	bls.n	800649a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8006496:	23bc      	movs	r3, #188	@ 0xbc
 8006498:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	011b      	lsls	r3, r3, #4
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	3318      	adds	r3, #24
 80064aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80064ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	b298      	uxth	r0, r3
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	3328      	adds	r3, #40	@ 0x28
 80064c4:	4602      	mov	r2, r0
 80064c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	787c      	ldrb	r4, [r7, #1]
 80064d2:	78ba      	ldrb	r2, [r7, #2]
 80064d4:	78f9      	ldrb	r1, [r7, #3]
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	4623      	mov	r3, r4
 80064e6:	f007 ff91 	bl	800e40c <USB_HC_Init>
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd90      	pop	{r4, r7, pc}

08006500 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_HCD_HC_Halt+0x1e>
 800651a:	2302      	movs	r3, #2
 800651c:	e00f      	b.n	800653e <HAL_HCD_HC_Halt+0x3e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	4611      	mov	r1, r2
 800652e:	4618      	mov	r0, r3
 8006530:	f008 fb23 	bl	800eb7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	461a      	mov	r2, r3
 8006556:	4603      	mov	r3, r0
 8006558:	70fb      	strb	r3, [r7, #3]
 800655a:	460b      	mov	r3, r1
 800655c:	70bb      	strb	r3, [r7, #2]
 800655e:	4613      	mov	r3, r2
 8006560:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	3317      	adds	r3, #23
 8006572:	78ba      	ldrb	r2, [r7, #2]
 8006574:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	3326      	adds	r3, #38	@ 0x26
 8006586:	787a      	ldrb	r2, [r7, #1]
 8006588:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800658a:	7c3b      	ldrb	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d114      	bne.n	80065ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	332a      	adds	r3, #42	@ 0x2a
 80065a0:	2203      	movs	r2, #3
 80065a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	3319      	adds	r3, #25
 80065b4:	7f3a      	ldrb	r2, [r7, #28]
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e009      	b.n	80065ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065ba:	78fa      	ldrb	r2, [r7, #3]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	332a      	adds	r3, #42	@ 0x2a
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80065ce:	787b      	ldrb	r3, [r7, #1]
 80065d0:	2b03      	cmp	r3, #3
 80065d2:	f200 8102 	bhi.w	80067da <HAL_HCD_HC_SubmitRequest+0x292>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065ed 	.word	0x080065ed
 80065e0:	080067c5 	.word	0x080067c5
 80065e4:	080066b1 	.word	0x080066b1
 80065e8:	0800673b 	.word	0x0800673b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80065ec:	7c3b      	ldrb	r3, [r7, #16]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	f040 80f5 	bne.w	80067de <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80065f4:	78bb      	ldrb	r3, [r7, #2]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d12d      	bne.n	8006656 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80065fa:	8b3b      	ldrh	r3, [r7, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006600:	78fa      	ldrb	r2, [r7, #3]
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	4613      	mov	r3, r2
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	333d      	adds	r3, #61	@ 0x3d
 8006610:	2201      	movs	r2, #1
 8006612:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	333d      	adds	r3, #61	@ 0x3d
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	332a      	adds	r3, #42	@ 0x2a
 800663a:	2200      	movs	r2, #0
 800663c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800663e:	e0ce      	b.n	80067de <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	1a9b      	subs	r3, r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	332a      	adds	r3, #42	@ 0x2a
 8006650:	2202      	movs	r2, #2
 8006652:	701a      	strb	r2, [r3, #0]
      break;
 8006654:	e0c3      	b.n	80067de <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	1a9b      	subs	r3, r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	331a      	adds	r3, #26
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	f040 80b8 	bne.w	80067de <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	333c      	adds	r3, #60	@ 0x3c
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006684:	78fa      	ldrb	r2, [r7, #3]
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	332a      	adds	r3, #42	@ 0x2a
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
      break;
 8006698:	e0a1      	b.n	80067de <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	332a      	adds	r3, #42	@ 0x2a
 80066aa:	2202      	movs	r2, #2
 80066ac:	701a      	strb	r2, [r3, #0]
      break;
 80066ae:	e096      	b.n	80067de <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80066b0:	78bb      	ldrb	r3, [r7, #2]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d120      	bne.n	80066f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	333d      	adds	r3, #61	@ 0x3d
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	332a      	adds	r3, #42	@ 0x2a
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80066e0:	e07e      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	6879      	ldr	r1, [r7, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	332a      	adds	r3, #42	@ 0x2a
 80066f2:	2202      	movs	r2, #2
 80066f4:	701a      	strb	r2, [r3, #0]
      break;
 80066f6:	e073      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80066f8:	78fa      	ldrb	r2, [r7, #3]
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	1a9b      	subs	r3, r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	333c      	adds	r3, #60	@ 0x3c
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	332a      	adds	r3, #42	@ 0x2a
 800671e:	2200      	movs	r2, #0
 8006720:	701a      	strb	r2, [r3, #0]
      break;
 8006722:	e05d      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	332a      	adds	r3, #42	@ 0x2a
 8006734:	2202      	movs	r2, #2
 8006736:	701a      	strb	r2, [r3, #0]
      break;
 8006738:	e052      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800673a:	78bb      	ldrb	r3, [r7, #2]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d120      	bne.n	8006782 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006740:	78fa      	ldrb	r2, [r7, #3]
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	4613      	mov	r3, r2
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	333d      	adds	r3, #61	@ 0x3d
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	332a      	adds	r3, #42	@ 0x2a
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800676a:	e039      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	332a      	adds	r3, #42	@ 0x2a
 800677c:	2202      	movs	r2, #2
 800677e:	701a      	strb	r2, [r3, #0]
      break;
 8006780:	e02e      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	333c      	adds	r3, #60	@ 0x3c
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	4613      	mov	r3, r2
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	332a      	adds	r3, #42	@ 0x2a
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
      break;
 80067ac:	e018      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	1a9b      	subs	r3, r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	332a      	adds	r3, #42	@ 0x2a
 80067be:	2202      	movs	r2, #2
 80067c0:	701a      	strb	r2, [r3, #0]
      break;
 80067c2:	e00d      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	332a      	adds	r3, #42	@ 0x2a
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
      break;
 80067d8:	e002      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80067de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	332c      	adds	r3, #44	@ 0x2c
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	8b39      	ldrh	r1, [r7, #24]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4403      	add	r3, r0
 8006804:	3334      	adds	r3, #52	@ 0x34
 8006806:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006808:	78fa      	ldrb	r2, [r7, #3]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	334c      	adds	r3, #76	@ 0x4c
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3338      	adds	r3, #56	@ 0x38
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	4613      	mov	r3, r2
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	3315      	adds	r3, #21
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	334d      	adds	r3, #77	@ 0x4d
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	4613      	mov	r3, r2
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	3310      	adds	r3, #16
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	4413      	add	r3, r2
 800686c:	1d19      	adds	r1, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	799b      	ldrb	r3, [r3, #6]
 8006872:	461a      	mov	r2, r3
 8006874:	f007 fef6 	bl	800e664 <USB_HC_StartXfer>
 8006878:	4603      	mov	r3, r0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop

08006884 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f007 fbea 	bl	800e074 <USB_GetMode>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	f040 80fb 	bne.w	8006a9e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f007 fbad 	bl	800e00c <USB_ReadInterrupts>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80f1 	beq.w	8006a9c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f007 fba4 	bl	800e00c <USB_ReadInterrupts>
 80068c4:	4603      	mov	r3, r0
 80068c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ce:	d104      	bne.n	80068da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80068d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f007 fb94 	bl	800e00c <USB_ReadInterrupts>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ee:	d104      	bne.n	80068fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f007 fb84 	bl	800e00c <USB_ReadInterrupts>
 8006904:	4603      	mov	r3, r0
 8006906:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800690a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800690e:	d104      	bne.n	800691a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006918:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f007 fb74 	bl	800e00c <USB_ReadInterrupts>
 8006924:	4603      	mov	r3, r0
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d103      	bne.n	8006936 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2202      	movs	r2, #2
 8006934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f007 fb66 	bl	800e00c <USB_ReadInterrupts>
 8006940:	4603      	mov	r3, r0
 8006942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800694a:	d120      	bne.n	800698e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006954:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d113      	bne.n	800698e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006966:	2110      	movs	r1, #16
 8006968:	6938      	ldr	r0, [r7, #16]
 800696a:	f007 fa59 	bl	800de20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800696e:	6938      	ldr	r0, [r7, #16]
 8006970:	f007 fa88 	bl	800de84 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7a5b      	ldrb	r3, [r3, #9]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d105      	bne.n	8006988 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2101      	movs	r1, #1
 8006982:	4618      	mov	r0, r3
 8006984:	f007 fc7a 	bl	800e27c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f00e ffed 	bl	8015968 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f007 fb3a 	bl	800e00c <USB_ReadInterrupts>
 8006998:	4603      	mov	r3, r0
 800699a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800699e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069a2:	d102      	bne.n	80069aa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fd33 	bl	8008410 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f007 fb2c 	bl	800e00c <USB_ReadInterrupts>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d106      	bne.n	80069cc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f00e ffb6 	bl	8015930 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2208      	movs	r2, #8
 80069ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f007 fb1b 	bl	800e00c <USB_ReadInterrupts>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e0:	d139      	bne.n	8006a56 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f008 f8b6 	bl	800eb58 <USB_HC_ReadInterrupt>
 80069ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e025      	b.n	8006a40 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d018      	beq.n	8006a3a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1e:	d106      	bne.n	8006a2e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f905 	bl	8006c36 <HCD_HC_IN_IRQHandler>
 8006a2c:	e005      	b.n	8006a3a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 ff67 	bl	8007908 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	795b      	ldrb	r3, [r3, #5]
 8006a44:	461a      	mov	r2, r3
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d3d3      	bcc.n	80069f4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f007 fad6 	bl	800e00c <USB_ReadInterrupts>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	d101      	bne.n	8006a6e <HAL_HCD_IRQHandler+0x1ea>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <HAL_HCD_IRQHandler+0x1ec>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d014      	beq.n	8006a9e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699a      	ldr	r2, [r3, #24]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0210 	bic.w	r2, r2, #16
 8006a82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fbe4 	bl	8008252 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	699a      	ldr	r2, [r3, #24]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f042 0210 	orr.w	r2, r2, #16
 8006a98:	619a      	str	r2, [r3, #24]
 8006a9a:	e000      	b.n	8006a9e <HAL_HCD_IRQHandler+0x21a>
      return;
 8006a9c:	bf00      	nop
    }
  }
}
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_HCD_Start+0x16>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e013      	b.n	8006ae2 <HAL_HCD_Start+0x3e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f007 fc3e 	bl	800e34a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f007 f936 	bl	800dd44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_HCD_Stop+0x16>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e00d      	b.n	8006b1c <HAL_HCD_Stop+0x32>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f008 f991 	bl	800ee34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f007 fbe0 	bl	800e2f6 <USB_ResetPort>
 8006b36:	4603      	mov	r3, r0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	334c      	adds	r3, #76	@ 0x4c
 8006b5c:	781b      	ldrb	r3, [r3, #0]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3338      	adds	r3, #56	@ 0x38
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f007 fc22 	bl	800e3ea <USB_GetCurrentFrame>
 8006ba6:	4603      	mov	r3, r0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f007 fbfd 	bl	800e3bc <USB_GetHostSpeed>
 8006bc2:	4603      	mov	r3, r0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	331a      	adds	r3, #26
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	331b      	adds	r3, #27
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006c00:	78fa      	ldrb	r2, [r7, #3]
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	4613      	mov	r3, r2
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3325      	adds	r3, #37	@ 0x25
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	3324      	adds	r3, #36	@ 0x24
 8006c24:	2200      	movs	r2, #0
 8006c26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	78fa      	ldrb	r2, [r7, #3]
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f007 f9ec 	bl	800e032 <USB_ReadChInterrupts>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d11a      	bne.n	8006c9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c70:	461a      	mov	r2, r3
 8006c72:	2304      	movs	r3, #4
 8006c74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	334d      	adds	r3, #77	@ 0x4d
 8006c86:	2207      	movs	r2, #7
 8006c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	78fa      	ldrb	r2, [r7, #3]
 8006c90:	4611      	mov	r1, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f007 ff71 	bl	800eb7a <USB_HC_Halt>
 8006c98:	e09e      	b.n	8006dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f007 f9c5 	bl	800e032 <USB_ReadChInterrupts>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb2:	d11b      	bne.n	8006cec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	334d      	adds	r3, #77	@ 0x4d
 8006cd8:	2208      	movs	r2, #8
 8006cda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f007 ff48 	bl	800eb7a <USB_HC_Halt>
 8006cea:	e075      	b.n	8006dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	78fa      	ldrb	r2, [r7, #3]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f007 f99c 	bl	800e032 <USB_ReadChInterrupts>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d11a      	bne.n	8006d3a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d10:	461a      	mov	r2, r3
 8006d12:	2308      	movs	r3, #8
 8006d14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006d16:	78fa      	ldrb	r2, [r7, #3]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	440b      	add	r3, r1
 8006d24:	334d      	adds	r3, #77	@ 0x4d
 8006d26:	2206      	movs	r2, #6
 8006d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f007 ff21 	bl	800eb7a <USB_HC_Halt>
 8006d38:	e04e      	b.n	8006dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	78fa      	ldrb	r2, [r7, #3]
 8006d40:	4611      	mov	r1, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f007 f975 	bl	800e032 <USB_ReadChInterrupts>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d52:	d11b      	bne.n	8006d8c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d60:	461a      	mov	r2, r3
 8006d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	440b      	add	r3, r1
 8006d76:	334d      	adds	r3, #77	@ 0x4d
 8006d78:	2209      	movs	r2, #9
 8006d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	4611      	mov	r1, r2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f007 fef8 	bl	800eb7a <USB_HC_Halt>
 8006d8a:	e025      	b.n	8006dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	4611      	mov	r1, r2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f007 f94c 	bl	800e032 <USB_ReadChInterrupts>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da0:	2b80      	cmp	r3, #128	@ 0x80
 8006da2:	d119      	bne.n	8006dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db0:	461a      	mov	r2, r3
 8006db2:	2380      	movs	r3, #128	@ 0x80
 8006db4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	334d      	adds	r3, #77	@ 0x4d
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f007 fed1 	bl	800eb7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	4611      	mov	r1, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f007 f926 	bl	800e032 <USB_ReadChInterrupts>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df0:	d112      	bne.n	8006e18 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f007 febd 	bl	800eb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e12:	6093      	str	r3, [r2, #8]
 8006e14:	f000 bd75 	b.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f007 f906 	bl	800e032 <USB_ReadChInterrupts>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 8128 	bne.w	8007082 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2320      	movs	r3, #32
 8006e42:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	331b      	adds	r3, #27
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d119      	bne.n	8006e8e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	331b      	adds	r3, #27
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e8c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	799b      	ldrb	r3, [r3, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01b      	beq.n	8006ece <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3330      	adds	r3, #48	@ 0x30
 8006ea6:	6819      	ldr	r1, [r3, #0]
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	1ac9      	subs	r1, r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4403      	add	r3, r0
 8006eca:	3338      	adds	r3, #56	@ 0x38
 8006ecc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	334d      	adds	r3, #77	@ 0x4d
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3344      	adds	r3, #68	@ 0x44
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f02:	461a      	mov	r2, r3
 8006f04:	2301      	movs	r3, #1
 8006f06:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f08:	78fa      	ldrb	r2, [r7, #3]
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	3326      	adds	r3, #38	@ 0x26
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006f1e:	78fa      	ldrb	r2, [r7, #3]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3326      	adds	r3, #38	@ 0x26
 8006f2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d110      	bne.n	8006f56 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f007 fe1c 	bl	800eb7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2310      	movs	r3, #16
 8006f52:	6093      	str	r3, [r2, #8]
 8006f54:	e03d      	b.n	8006fd2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006f56:	78fa      	ldrb	r2, [r7, #3]
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	3326      	adds	r3, #38	@ 0x26
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d00a      	beq.n	8006f82 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	3326      	adds	r3, #38	@ 0x26
 8006f7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d127      	bne.n	8006fd2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	78fa      	ldrb	r2, [r7, #3]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fa0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	334c      	adds	r3, #76	@ 0x4c
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	011b      	lsls	r3, r3, #4
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	334c      	adds	r3, #76	@ 0x4c
 8006fc6:	781a      	ldrb	r2, [r3, #0]
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f00e fcd9 	bl	8015984 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	799b      	ldrb	r3, [r3, #6]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d13b      	bne.n	8007052 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3338      	adds	r3, #56	@ 0x38
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4403      	add	r3, r0
 8006ffa:	3328      	adds	r3, #40	@ 0x28
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	440b      	add	r3, r1
 8007000:	1e59      	subs	r1, r3, #1
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	1a9b      	subs	r3, r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4403      	add	r3, r0
 8007010:	3328      	adds	r3, #40	@ 0x28
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	fbb1 f3f3 	udiv	r3, r1, r3
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8470 	beq.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	333c      	adds	r3, #60	@ 0x3c
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	78fa      	ldrb	r2, [r7, #3]
 8007036:	f083 0301 	eor.w	r3, r3, #1
 800703a:	b2d8      	uxtb	r0, r3
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	333c      	adds	r3, #60	@ 0x3c
 800704a:	4602      	mov	r2, r0
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	f000 bc58 	b.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007052:	78fa      	ldrb	r2, [r7, #3]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	333c      	adds	r3, #60	@ 0x3c
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	f083 0301 	eor.w	r3, r3, #1
 800706a:	b2d8      	uxtb	r0, r3
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	333c      	adds	r3, #60	@ 0x3c
 800707a:	4602      	mov	r2, r0
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	f000 bc40 	b.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	4611      	mov	r1, r2
 800708a:	4618      	mov	r0, r3
 800708c:	f006 ffd1 	bl	800e032 <USB_ReadChInterrupts>
 8007090:	4603      	mov	r3, r0
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b20      	cmp	r3, #32
 8007098:	d131      	bne.n	80070fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a6:	461a      	mov	r2, r3
 80070a8:	2320      	movs	r3, #32
 80070aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	331a      	adds	r3, #26
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	f040 841f 	bne.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4613      	mov	r3, r2
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	440b      	add	r3, r1
 80070d2:	331b      	adds	r3, #27
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80070d8:	78fa      	ldrb	r2, [r7, #3]
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	334d      	adds	r3, #77	@ 0x4d
 80070e8:	2203      	movs	r2, #3
 80070ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	78fa      	ldrb	r2, [r7, #3]
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f007 fd40 	bl	800eb7a <USB_HC_Halt>
 80070fa:	f000 bc02 	b.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	78fa      	ldrb	r2, [r7, #3]
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f006 ff93 	bl	800e032 <USB_ReadChInterrupts>
 800710c:	4603      	mov	r3, r0
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b02      	cmp	r3, #2
 8007114:	f040 8305 	bne.w	8007722 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4413      	add	r3, r2
 8007120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007124:	461a      	mov	r2, r3
 8007126:	2302      	movs	r3, #2
 8007128:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	334d      	adds	r3, #77	@ 0x4d
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d114      	bne.n	800716a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007140:	78fa      	ldrb	r2, [r7, #3]
 8007142:	6879      	ldr	r1, [r7, #4]
 8007144:	4613      	mov	r3, r2
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	440b      	add	r3, r1
 800714e:	334d      	adds	r3, #77	@ 0x4d
 8007150:	2202      	movs	r2, #2
 8007152:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	334c      	adds	r3, #76	@ 0x4c
 8007164:	2201      	movs	r2, #1
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e2cc      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800716a:	78fa      	ldrb	r2, [r7, #3]
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	334d      	adds	r3, #77	@ 0x4d
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b06      	cmp	r3, #6
 800717e:	d114      	bne.n	80071aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007180:	78fa      	ldrb	r2, [r7, #3]
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	4613      	mov	r3, r2
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	334d      	adds	r3, #77	@ 0x4d
 8007190:	2202      	movs	r2, #2
 8007192:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007194:	78fa      	ldrb	r2, [r7, #3]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	4613      	mov	r3, r2
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	1a9b      	subs	r3, r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	334c      	adds	r3, #76	@ 0x4c
 80071a4:	2205      	movs	r2, #5
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	e2ac      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	334d      	adds	r3, #77	@ 0x4d
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b07      	cmp	r3, #7
 80071be:	d00b      	beq.n	80071d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80071c0:	78fa      	ldrb	r2, [r7, #3]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	1a9b      	subs	r3, r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	334d      	adds	r3, #77	@ 0x4d
 80071d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	f040 80a6 	bne.w	8007324 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4613      	mov	r3, r2
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	334d      	adds	r3, #77	@ 0x4d
 80071e8:	2202      	movs	r2, #2
 80071ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80071ec:	78fa      	ldrb	r2, [r7, #3]
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	3344      	adds	r3, #68	@ 0x44
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1c59      	adds	r1, r3, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4403      	add	r3, r0
 800720c:	3344      	adds	r3, #68	@ 0x44
 800720e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	3344      	adds	r3, #68	@ 0x44
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d943      	bls.n	80072ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007226:	78fa      	ldrb	r2, [r7, #3]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3344      	adds	r3, #68	@ 0x44
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	331a      	adds	r3, #26
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d123      	bne.n	8007298 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	331b      	adds	r3, #27
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	4613      	mov	r3, r2
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	440b      	add	r3, r1
 8007272:	331c      	adds	r3, #28
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	78fa      	ldrb	r2, [r7, #3]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	440a      	add	r2, r1
 800728e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007296:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	334c      	adds	r3, #76	@ 0x4c
 80072a8:	2204      	movs	r2, #4
 80072aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80072ac:	e229      	b.n	8007702 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	334c      	adds	r3, #76	@ 0x4c
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	3326      	adds	r3, #38	@ 0x26
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3326      	adds	r3, #38	@ 0x26
 80072e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	f040 8209 	bne.w	8007702 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007306:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800730e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	4413      	add	r3, r2
 8007318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800731c:	461a      	mov	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007322:	e1ee      	b.n	8007702 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007324:	78fa      	ldrb	r2, [r7, #3]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	334d      	adds	r3, #77	@ 0x4d
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b05      	cmp	r3, #5
 8007338:	f040 80c8 	bne.w	80074cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	334d      	adds	r3, #77	@ 0x4d
 800734c:	2202      	movs	r2, #2
 800734e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	1a9b      	subs	r3, r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	331b      	adds	r3, #27
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b01      	cmp	r3, #1
 8007364:	f040 81ce 	bne.w	8007704 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	3326      	adds	r3, #38	@ 0x26
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d16b      	bne.n	8007456 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	3348      	adds	r3, #72	@ 0x48
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	1c59      	adds	r1, r3, #1
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4613      	mov	r3, r2
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4403      	add	r3, r0
 800739e:	3348      	adds	r3, #72	@ 0x48
 80073a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	3348      	adds	r3, #72	@ 0x48
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d943      	bls.n	8007440 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	3348      	adds	r3, #72	@ 0x48
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	331b      	adds	r3, #27
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	1a9b      	subs	r3, r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	3344      	adds	r3, #68	@ 0x44
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d809      	bhi.n	800740a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	1a9b      	subs	r3, r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	440b      	add	r3, r1
 8007404:	331c      	adds	r3, #28
 8007406:	2201      	movs	r2, #1
 8007408:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	440a      	add	r2, r1
 8007420:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007428:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	334c      	adds	r3, #76	@ 0x4c
 800743a:	2204      	movs	r2, #4
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e014      	b.n	800746a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	6879      	ldr	r1, [r7, #4]
 8007444:	4613      	mov	r3, r2
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	1a9b      	subs	r3, r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	334c      	adds	r3, #76	@ 0x4c
 8007450:	2202      	movs	r2, #2
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	e009      	b.n	800746a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	334c      	adds	r3, #76	@ 0x4c
 8007466:	2202      	movs	r2, #2
 8007468:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800746a:	78fa      	ldrb	r2, [r7, #3]
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	1a9b      	subs	r3, r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	3326      	adds	r3, #38	@ 0x26
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	4613      	mov	r3, r2
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	3326      	adds	r3, #38	@ 0x26
 8007490:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007492:	2b02      	cmp	r3, #2
 8007494:	f040 8136 	bne.w	8007704 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074c4:	461a      	mov	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e11b      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	4613      	mov	r3, r2
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	1a9b      	subs	r3, r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	440b      	add	r3, r1
 80074da:	334d      	adds	r3, #77	@ 0x4d
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	f040 8081 	bne.w	80075e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	334d      	adds	r3, #77	@ 0x4d
 80074f4:	2202      	movs	r2, #2
 80074f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	331b      	adds	r3, #27
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b01      	cmp	r3, #1
 800750c:	f040 80fa 	bne.w	8007704 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007510:	78fa      	ldrb	r2, [r7, #3]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4613      	mov	r3, r2
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	334c      	adds	r3, #76	@ 0x4c
 8007520:	2202      	movs	r2, #2
 8007522:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	440a      	add	r2, r1
 800753a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800753e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007542:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	440a      	add	r2, r1
 800755a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007562:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4413      	add	r3, r2
 800756c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	440a      	add	r2, r1
 800757a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800757e:	f023 0320 	bic.w	r3, r3, #32
 8007582:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	440b      	add	r3, r1
 8007592:	3326      	adds	r3, #38	@ 0x26
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800759a:	78fa      	ldrb	r2, [r7, #3]
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	1a9b      	subs	r3, r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	3326      	adds	r3, #38	@ 0x26
 80075aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	f040 80a9 	bne.w	8007704 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80075b2:	78fb      	ldrb	r3, [r7, #3]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075de:	461a      	mov	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	e08e      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80075e6:	78fa      	ldrb	r2, [r7, #3]
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	1a9b      	subs	r3, r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	334d      	adds	r3, #77	@ 0x4d
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d143      	bne.n	8007684 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80075fc:	78fa      	ldrb	r2, [r7, #3]
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4613      	mov	r3, r2
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	334d      	adds	r3, #77	@ 0x4d
 800760c:	2202      	movs	r2, #2
 800760e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	6879      	ldr	r1, [r7, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	334c      	adds	r3, #76	@ 0x4c
 8007620:	2202      	movs	r2, #2
 8007622:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	4613      	mov	r3, r2
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	3326      	adds	r3, #38	@ 0x26
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800763a:	78fa      	ldrb	r2, [r7, #3]
 800763c:	6879      	ldr	r1, [r7, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	3326      	adds	r3, #38	@ 0x26
 800764a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800764c:	2b02      	cmp	r3, #2
 800764e:	d159      	bne.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007666:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800766e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800767c:	461a      	mov	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e03f      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007684:	78fa      	ldrb	r2, [r7, #3]
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4613      	mov	r3, r2
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	334d      	adds	r3, #77	@ 0x4d
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b08      	cmp	r3, #8
 8007698:	d126      	bne.n	80076e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	334d      	adds	r3, #77	@ 0x4d
 80076aa:	2202      	movs	r2, #2
 80076ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	3344      	adds	r3, #68	@ 0x44
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	1c59      	adds	r1, r3, #1
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4613      	mov	r3, r2
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4403      	add	r3, r0
 80076ce:	3344      	adds	r3, #68	@ 0x44
 80076d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	334c      	adds	r3, #76	@ 0x4c
 80076e2:	2204      	movs	r2, #4
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	e00d      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80076e8:	78fa      	ldrb	r2, [r7, #3]
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4613      	mov	r3, r2
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	334d      	adds	r3, #77	@ 0x4d
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	f000 8100 	beq.w	8007900 <HCD_HC_IN_IRQHandler+0xcca>
 8007700:	e000      	b.n	8007704 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007702:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007704:	78fa      	ldrb	r2, [r7, #3]
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	334c      	adds	r3, #76	@ 0x4c
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f00e f932 	bl	8015984 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007720:	e0ef      	b.n	8007902 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	78fa      	ldrb	r2, [r7, #3]
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f006 fc81 	bl	800e032 <USB_ReadChInterrupts>
 8007730:	4603      	mov	r3, r0
 8007732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007736:	2b40      	cmp	r3, #64	@ 0x40
 8007738:	d12f      	bne.n	800779a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	4413      	add	r3, r2
 8007742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007746:	461a      	mov	r2, r3
 8007748:	2340      	movs	r3, #64	@ 0x40
 800774a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	334d      	adds	r3, #77	@ 0x4d
 800775c:	2205      	movs	r2, #5
 800775e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	331a      	adds	r3, #26
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	1a9b      	subs	r3, r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	440b      	add	r3, r1
 8007784:	3344      	adds	r3, #68	@ 0x44
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	78fa      	ldrb	r2, [r7, #3]
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f007 f9f1 	bl	800eb7a <USB_HC_Halt>
 8007798:	e0b3      	b.n	8007902 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f006 fc45 	bl	800e032 <USB_ReadChInterrupts>
 80077a8:	4603      	mov	r3, r0
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b10      	cmp	r3, #16
 80077b0:	f040 80a7 	bne.w	8007902 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	4613      	mov	r3, r2
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	3326      	adds	r3, #38	@ 0x26
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d11b      	bne.n	8007802 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3344      	adds	r3, #68	@ 0x44
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	440b      	add	r3, r1
 80077ec:	334d      	adds	r3, #77	@ 0x4d
 80077ee:	2204      	movs	r2, #4
 80077f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f007 f9bd 	bl	800eb7a <USB_HC_Halt>
 8007800:	e03f      	b.n	8007882 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3326      	adds	r3, #38	@ 0x26
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007818:	78fa      	ldrb	r2, [r7, #3]
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	4613      	mov	r3, r2
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	440b      	add	r3, r1
 8007826:	3326      	adds	r3, #38	@ 0x26
 8007828:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800782a:	2b02      	cmp	r3, #2
 800782c:	d129      	bne.n	8007882 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	3344      	adds	r3, #68	@ 0x44
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	799b      	ldrb	r3, [r3, #6]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HCD_HC_IN_IRQHandler+0xc2a>
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	331b      	adds	r3, #27
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d110      	bne.n	8007882 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	4613      	mov	r3, r2
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	440b      	add	r3, r1
 800786e:	334d      	adds	r3, #77	@ 0x4d
 8007870:	2204      	movs	r2, #4
 8007872:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	78fa      	ldrb	r2, [r7, #3]
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f007 f97c 	bl	800eb7a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4613      	mov	r3, r2
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	331b      	adds	r3, #27
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d129      	bne.n	80078ec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	4613      	mov	r3, r2
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	440b      	add	r3, r1
 80078a6:	331b      	adds	r3, #27
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078e6:	f043 0320 	orr.w	r3, r3, #32
 80078ea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f8:	461a      	mov	r2, r3
 80078fa:	2310      	movs	r3, #16
 80078fc:	6093      	str	r3, [r2, #8]
 80078fe:	e000      	b.n	8007902 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8007900:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f006 fb83 	bl	800e032 <USB_ReadChInterrupts>
 800792c:	4603      	mov	r3, r0
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b04      	cmp	r3, #4
 8007934:	d11b      	bne.n	800796e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007942:	461a      	mov	r2, r3
 8007944:	2304      	movs	r3, #4
 8007946:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	4613      	mov	r3, r2
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	1a9b      	subs	r3, r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	334d      	adds	r3, #77	@ 0x4d
 8007958:	2207      	movs	r2, #7
 800795a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f007 f908 	bl	800eb7a <USB_HC_Halt>
 800796a:	f000 bc6f 	b.w	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f006 fb5b 	bl	800e032 <USB_ReadChInterrupts>
 800797c:	4603      	mov	r3, r0
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b20      	cmp	r3, #32
 8007984:	f040 8082 	bne.w	8007a8c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	4413      	add	r3, r2
 8007990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007994:	461a      	mov	r2, r3
 8007996:	2320      	movs	r3, #32
 8007998:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800799a:	78fa      	ldrb	r2, [r7, #3]
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	4613      	mov	r3, r2
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	440b      	add	r3, r1
 80079a8:	3319      	adds	r3, #25
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d124      	bne.n	80079fa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80079b0:	78fa      	ldrb	r2, [r7, #3]
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	4613      	mov	r3, r2
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	1a9b      	subs	r3, r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	3319      	adds	r3, #25
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80079c4:	78fa      	ldrb	r2, [r7, #3]
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	334c      	adds	r3, #76	@ 0x4c
 80079d4:	2202      	movs	r2, #2
 80079d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	4613      	mov	r3, r2
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	334d      	adds	r3, #77	@ 0x4d
 80079e8:	2203      	movs	r2, #3
 80079ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f007 f8c0 	bl	800eb7a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	331a      	adds	r3, #26
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	f040 841d 	bne.w	800824c <HCD_HC_OUT_IRQHandler+0x944>
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	4613      	mov	r3, r2
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	331b      	adds	r3, #27
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 8411 	bne.w	800824c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	1a9b      	subs	r3, r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	3326      	adds	r3, #38	@ 0x26
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d009      	beq.n	8007a54 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	6879      	ldr	r1, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	1a9b      	subs	r3, r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	331b      	adds	r3, #27
 8007a50:	2201      	movs	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	334d      	adds	r3, #77	@ 0x4d
 8007a64:	2203      	movs	r2, #3
 8007a66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	78fa      	ldrb	r2, [r7, #3]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f007 f882 	bl	800eb7a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	3344      	adds	r3, #68	@ 0x44
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	e3df      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f006 facc 	bl	800e032 <USB_ReadChInterrupts>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa4:	d111      	bne.n	8007aca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ab8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f007 f859 	bl	800eb7a <USB_HC_Halt>
 8007ac8:	e3c0      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f006 faad 	bl	800e032 <USB_ReadChInterrupts>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d168      	bne.n	8007bb4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	3344      	adds	r3, #68	@ 0x44
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f006 fa97 	bl	800e032 <USB_ReadChInterrupts>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0a:	2b40      	cmp	r3, #64	@ 0x40
 8007b0c:	d112      	bne.n	8007b34 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	6879      	ldr	r1, [r7, #4]
 8007b12:	4613      	mov	r3, r2
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	440b      	add	r3, r1
 8007b1c:	3319      	adds	r3, #25
 8007b1e:	2201      	movs	r2, #1
 8007b20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b2e:	461a      	mov	r2, r3
 8007b30:	2340      	movs	r3, #64	@ 0x40
 8007b32:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007b34:	78fa      	ldrb	r2, [r7, #3]
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	331b      	adds	r3, #27
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d019      	beq.n	8007b7e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	331b      	adds	r3, #27
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	334d      	adds	r3, #77	@ 0x4d
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f006 ffe4 	bl	800eb7a <USB_HC_Halt>
 8007bb2:	e34b      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f006 fa38 	bl	800e032 <USB_ReadChInterrupts>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc8:	2b40      	cmp	r3, #64	@ 0x40
 8007bca:	d139      	bne.n	8007c40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	6879      	ldr	r1, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	334d      	adds	r3, #77	@ 0x4d
 8007bdc:	2205      	movs	r2, #5
 8007bde:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	331a      	adds	r3, #26
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3319      	adds	r3, #25
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	3344      	adds	r3, #68	@ 0x44
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f006 ffa7 	bl	800eb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c38:	461a      	mov	r2, r3
 8007c3a:	2340      	movs	r3, #64	@ 0x40
 8007c3c:	6093      	str	r3, [r2, #8]
 8007c3e:	e305      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f006 f9f2 	bl	800e032 <USB_ReadChInterrupts>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d11a      	bne.n	8007c8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c64:	461a      	mov	r2, r3
 8007c66:	2308      	movs	r3, #8
 8007c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	334d      	adds	r3, #77	@ 0x4d
 8007c7a:	2206      	movs	r2, #6
 8007c7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f006 ff77 	bl	800eb7a <USB_HC_Halt>
 8007c8c:	e2de      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	78fa      	ldrb	r2, [r7, #3]
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f006 f9cb 	bl	800e032 <USB_ReadChInterrupts>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d144      	bne.n	8007d30 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	6879      	ldr	r1, [r7, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3344      	adds	r3, #68	@ 0x44
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	6879      	ldr	r1, [r7, #4]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	334d      	adds	r3, #77	@ 0x4d
 8007cca:	2204      	movs	r2, #4
 8007ccc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3319      	adds	r3, #25
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d114      	bne.n	8007d0e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8007ce4:	78fa      	ldrb	r2, [r7, #3]
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	011b      	lsls	r3, r3, #4
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	3318      	adds	r3, #24
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	3319      	adds	r3, #25
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f006 ff2f 	bl	800eb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d28:	461a      	mov	r2, r3
 8007d2a:	2310      	movs	r3, #16
 8007d2c:	6093      	str	r3, [r2, #8]
 8007d2e:	e28d      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f006 f97a 	bl	800e032 <USB_ReadChInterrupts>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d44:	2b80      	cmp	r3, #128	@ 0x80
 8007d46:	d169      	bne.n	8007e1c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	799b      	ldrb	r3, [r3, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d111      	bne.n	8007d74 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007d50:	78fa      	ldrb	r2, [r7, #3]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	334d      	adds	r3, #77	@ 0x4d
 8007d60:	2207      	movs	r2, #7
 8007d62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f006 ff04 	bl	800eb7a <USB_HC_Halt>
 8007d72:	e049      	b.n	8007e08 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	011b      	lsls	r3, r3, #4
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	3344      	adds	r3, #68	@ 0x44
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1c59      	adds	r1, r3, #1
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	1a9b      	subs	r3, r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4403      	add	r3, r0
 8007d94:	3344      	adds	r3, #68	@ 0x44
 8007d96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007d98:	78fa      	ldrb	r2, [r7, #3]
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	3344      	adds	r3, #68	@ 0x44
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d922      	bls.n	8007df4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	4613      	mov	r3, r2
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	440b      	add	r3, r1
 8007dbc:	3344      	adds	r3, #68	@ 0x44
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	334c      	adds	r3, #76	@ 0x4c
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	440b      	add	r3, r1
 8007de4:	334c      	adds	r3, #76	@ 0x4c
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f00d fdc9 	bl	8015984 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007df2:	e009      	b.n	8007e08 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	334c      	adds	r3, #76	@ 0x4c
 8007e04:	2202      	movs	r2, #2
 8007e06:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e14:	461a      	mov	r2, r3
 8007e16:	2380      	movs	r3, #128	@ 0x80
 8007e18:	6093      	str	r3, [r2, #8]
 8007e1a:	e217      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f006 f904 	bl	800e032 <USB_ReadChInterrupts>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e34:	d11b      	bne.n	8007e6e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007e36:	78fa      	ldrb	r2, [r7, #3]
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	334d      	adds	r3, #77	@ 0x4d
 8007e46:	2209      	movs	r2, #9
 8007e48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f006 fe91 	bl	800eb7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e64:	461a      	mov	r2, r3
 8007e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e6a:	6093      	str	r3, [r2, #8]
 8007e6c:	e1ee      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f006 f8db 	bl	800e032 <USB_ReadChInterrupts>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	f040 81df 	bne.w	8008246 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e94:	461a      	mov	r2, r3
 8007e96:	2302      	movs	r3, #2
 8007e98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	334d      	adds	r3, #77	@ 0x4d
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	f040 8093 	bne.w	8007fd8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	011b      	lsls	r3, r3, #4
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	334d      	adds	r3, #77	@ 0x4d
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	6879      	ldr	r1, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	440b      	add	r3, r1
 8007ed4:	334c      	adds	r3, #76	@ 0x4c
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	3326      	adds	r3, #38	@ 0x26
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d00b      	beq.n	8007f08 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007ef0:	78fa      	ldrb	r2, [r7, #3]
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	3326      	adds	r3, #38	@ 0x26
 8007f00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	f040 8190 	bne.w	8008228 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	799b      	ldrb	r3, [r3, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d115      	bne.n	8007f3c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	333d      	adds	r3, #61	@ 0x3d
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	f083 0301 	eor.w	r3, r3, #1
 8007f28:	b2d8      	uxtb	r0, r3
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	333d      	adds	r3, #61	@ 0x3d
 8007f38:	4602      	mov	r2, r0
 8007f3a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	799b      	ldrb	r3, [r3, #6]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	f040 8171 	bne.w	8008228 <HCD_HC_OUT_IRQHandler+0x920>
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	3334      	adds	r3, #52	@ 0x34
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8165 	beq.w	8008228 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007f5e:	78fa      	ldrb	r2, [r7, #3]
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	4613      	mov	r3, r2
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	3334      	adds	r3, #52	@ 0x34
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4403      	add	r3, r0
 8007f7e:	3328      	adds	r3, #40	@ 0x28
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	440b      	add	r3, r1
 8007f84:	1e59      	subs	r1, r3, #1
 8007f86:	78fa      	ldrb	r2, [r7, #3]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4403      	add	r3, r0
 8007f94:	3328      	adds	r3, #40	@ 0x28
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f9c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 813f 	beq.w	8008228 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	333d      	adds	r3, #61	@ 0x3d
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	78fa      	ldrb	r2, [r7, #3]
 8007fbe:	f083 0301 	eor.w	r3, r3, #1
 8007fc2:	b2d8      	uxtb	r0, r3
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	011b      	lsls	r3, r3, #4
 8007fca:	1a9b      	subs	r3, r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	440b      	add	r3, r1
 8007fd0:	333d      	adds	r3, #61	@ 0x3d
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	e127      	b.n	8008228 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	334d      	adds	r3, #77	@ 0x4d
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d120      	bne.n	8008030 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	334d      	adds	r3, #77	@ 0x4d
 8007ffe:	2202      	movs	r2, #2
 8008000:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	331b      	adds	r3, #27
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	f040 8107 	bne.w	8008228 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	334c      	adds	r3, #76	@ 0x4c
 800802a:	2202      	movs	r2, #2
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	e0fb      	b.n	8008228 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	334d      	adds	r3, #77	@ 0x4d
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b04      	cmp	r3, #4
 8008044:	d13a      	bne.n	80080bc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008046:	78fa      	ldrb	r2, [r7, #3]
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4613      	mov	r3, r2
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	440b      	add	r3, r1
 8008054:	334d      	adds	r3, #77	@ 0x4d
 8008056:	2202      	movs	r2, #2
 8008058:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800805a:	78fa      	ldrb	r2, [r7, #3]
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	4613      	mov	r3, r2
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	440b      	add	r3, r1
 8008068:	334c      	adds	r3, #76	@ 0x4c
 800806a:	2202      	movs	r2, #2
 800806c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	331b      	adds	r3, #27
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	f040 80d1 	bne.w	8008228 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	4613      	mov	r3, r2
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	331b      	adds	r3, #27
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080b8:	6053      	str	r3, [r2, #4]
 80080ba:	e0b5      	b.n	8008228 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	334d      	adds	r3, #77	@ 0x4d
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	2b05      	cmp	r3, #5
 80080d0:	d114      	bne.n	80080fc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	1a9b      	subs	r3, r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	334d      	adds	r3, #77	@ 0x4d
 80080e2:	2202      	movs	r2, #2
 80080e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80080e6:	78fa      	ldrb	r2, [r7, #3]
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	4613      	mov	r3, r2
 80080ec:	011b      	lsls	r3, r3, #4
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	440b      	add	r3, r1
 80080f4:	334c      	adds	r3, #76	@ 0x4c
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e095      	b.n	8008228 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	334d      	adds	r3, #77	@ 0x4d
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b06      	cmp	r3, #6
 8008110:	d114      	bne.n	800813c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	334d      	adds	r3, #77	@ 0x4d
 8008122:	2202      	movs	r2, #2
 8008124:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	334c      	adds	r3, #76	@ 0x4c
 8008136:	2205      	movs	r2, #5
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	e075      	b.n	8008228 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	334d      	adds	r3, #77	@ 0x4d
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b07      	cmp	r3, #7
 8008150:	d00a      	beq.n	8008168 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008152:	78fa      	ldrb	r2, [r7, #3]
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	1a9b      	subs	r3, r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	334d      	adds	r3, #77	@ 0x4d
 8008162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008164:	2b09      	cmp	r3, #9
 8008166:	d170      	bne.n	800824a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008168:	78fa      	ldrb	r2, [r7, #3]
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	4613      	mov	r3, r2
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	334d      	adds	r3, #77	@ 0x4d
 8008178:	2202      	movs	r2, #2
 800817a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	3344      	adds	r3, #68	@ 0x44
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	1c59      	adds	r1, r3, #1
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4403      	add	r3, r0
 800819c:	3344      	adds	r3, #68	@ 0x44
 800819e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80081a0:	78fa      	ldrb	r2, [r7, #3]
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	3344      	adds	r3, #68	@ 0x44
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d914      	bls.n	80081e0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	3344      	adds	r3, #68	@ 0x44
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80081ca:	78fa      	ldrb	r2, [r7, #3]
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	4613      	mov	r3, r2
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	334c      	adds	r3, #76	@ 0x4c
 80081da:	2204      	movs	r2, #4
 80081dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80081de:	e022      	b.n	8008226 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	334c      	adds	r3, #76	@ 0x4c
 80081f0:	2202      	movs	r2, #2
 80081f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800820a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008212:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008220:	461a      	mov	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008226:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4613      	mov	r3, r2
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	334c      	adds	r3, #76	@ 0x4c
 8008238:	781a      	ldrb	r2, [r3, #0]
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f00d fba0 	bl	8015984 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008244:	e002      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800824a:	bf00      	nop
  }
}
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b08a      	sub	sp, #40	@ 0x28
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f003 030f 	and.w	r3, r3, #15
 8008272:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	0c5b      	lsrs	r3, r3, #17
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	091b      	lsrs	r3, r3, #4
 8008282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008286:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b02      	cmp	r3, #2
 800828c:	d004      	beq.n	8008298 <HCD_RXQLVL_IRQHandler+0x46>
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b05      	cmp	r3, #5
 8008292:	f000 80b6 	beq.w	8008402 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008296:	e0b7      	b.n	8008408 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80b3 	beq.w	8008406 <HCD_RXQLVL_IRQHandler+0x1b4>
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	4613      	mov	r3, r2
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	332c      	adds	r3, #44	@ 0x2c
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80a7 	beq.w	8008406 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	4613      	mov	r3, r2
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	1a9b      	subs	r3, r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	3338      	adds	r3, #56	@ 0x38
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	18d1      	adds	r1, r2, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	4613      	mov	r3, r2
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4403      	add	r3, r0
 80082dc:	3334      	adds	r3, #52	@ 0x34
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4299      	cmp	r1, r3
 80082e2:	f200 8083 	bhi.w	80083ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	4613      	mov	r3, r2
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	332c      	adds	r3, #44	@ 0x2c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	b292      	uxth	r2, r2
 8008300:	4619      	mov	r1, r3
 8008302:	f005 fe2b 	bl	800df5c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4613      	mov	r3, r2
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	332c      	adds	r3, #44	@ 0x2c
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	18d1      	adds	r1, r2, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	4613      	mov	r3, r2
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4403      	add	r3, r0
 800832a:	332c      	adds	r3, #44	@ 0x2c
 800832c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	4613      	mov	r3, r2
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	1a9b      	subs	r3, r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	3338      	adds	r3, #56	@ 0x38
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	18d1      	adds	r1, r2, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	4613      	mov	r3, r2
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4403      	add	r3, r0
 8008352:	3338      	adds	r3, #56	@ 0x38
 8008354:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	4413      	add	r3, r2
 800835e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	0cdb      	lsrs	r3, r3, #19
 8008366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800836a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	4613      	mov	r3, r2
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	3328      	adds	r3, #40	@ 0x28
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	4293      	cmp	r3, r2
 8008384:	d13f      	bne.n	8008406 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d03c      	beq.n	8008406 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	4413      	add	r3, r2
 8008394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4613      	mov	r3, r2
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	333c      	adds	r3, #60	@ 0x3c
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	f083 0301 	eor.w	r3, r3, #1
 80083d4:	b2d8      	uxtb	r0, r3
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	69ba      	ldr	r2, [r7, #24]
 80083da:	4613      	mov	r3, r2
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	333c      	adds	r3, #60	@ 0x3c
 80083e6:	4602      	mov	r2, r0
 80083e8:	701a      	strb	r2, [r3, #0]
      break;
 80083ea:	e00c      	b.n	8008406 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	4613      	mov	r3, r2
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	334c      	adds	r3, #76	@ 0x4c
 80083fc:	2204      	movs	r2, #4
 80083fe:	701a      	strb	r2, [r3, #0]
      break;
 8008400:	e001      	b.n	8008406 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008402:	bf00      	nop
 8008404:	e000      	b.n	8008408 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008406:	bf00      	nop
  }
}
 8008408:	bf00      	nop
 800840a:	3728      	adds	r7, #40	@ 0x28
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800843c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b02      	cmp	r3, #2
 8008446:	d10b      	bne.n	8008460 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b01      	cmp	r3, #1
 8008450:	d102      	bne.n	8008458 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f00d fa7a 	bl	801594c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f043 0302 	orr.w	r3, r3, #2
 800845e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b08      	cmp	r3, #8
 8008468:	d132      	bne.n	80084d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f043 0308 	orr.w	r3, r3, #8
 8008470:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b04      	cmp	r3, #4
 800847a:	d126      	bne.n	80084ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7a5b      	ldrb	r3, [r3, #9]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d113      	bne.n	80084ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800848a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800848e:	d106      	bne.n	800849e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2102      	movs	r1, #2
 8008496:	4618      	mov	r0, r3
 8008498:	f005 fef0 	bl	800e27c <USB_InitFSLSPClkSel>
 800849c:	e011      	b.n	80084c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2101      	movs	r1, #1
 80084a4:	4618      	mov	r0, r3
 80084a6:	f005 fee9 	bl	800e27c <USB_InitFSLSPClkSel>
 80084aa:	e00a      	b.n	80084c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	79db      	ldrb	r3, [r3, #7]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d106      	bne.n	80084c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084ba:	461a      	mov	r2, r3
 80084bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80084c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f00d fa6c 	bl	80159a0 <HAL_HCD_PortEnabled_Callback>
 80084c8:	e002      	b.n	80084d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f00d fa76 	bl	80159bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d103      	bne.n	80084e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f043 0320 	orr.w	r3, r3, #32
 80084e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084e8:	461a      	mov	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	6013      	str	r3, [r2, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e267      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d075      	beq.n	8008602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008516:	4b88      	ldr	r3, [pc, #544]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 030c 	and.w	r3, r3, #12
 800851e:	2b04      	cmp	r3, #4
 8008520:	d00c      	beq.n	800853c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008522:	4b85      	ldr	r3, [pc, #532]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800852a:	2b08      	cmp	r3, #8
 800852c:	d112      	bne.n	8008554 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800852e:	4b82      	ldr	r3, [pc, #520]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800853a:	d10b      	bne.n	8008554 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800853c:	4b7e      	ldr	r3, [pc, #504]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d05b      	beq.n	8008600 <HAL_RCC_OscConfig+0x108>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d157      	bne.n	8008600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e242      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800855c:	d106      	bne.n	800856c <HAL_RCC_OscConfig+0x74>
 800855e:	4b76      	ldr	r3, [pc, #472]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a75      	ldr	r2, [pc, #468]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	e01d      	b.n	80085a8 <HAL_RCC_OscConfig+0xb0>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008574:	d10c      	bne.n	8008590 <HAL_RCC_OscConfig+0x98>
 8008576:	4b70      	ldr	r3, [pc, #448]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a6f      	ldr	r2, [pc, #444]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800857c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4b6d      	ldr	r3, [pc, #436]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a6c      	ldr	r2, [pc, #432]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	e00b      	b.n	80085a8 <HAL_RCC_OscConfig+0xb0>
 8008590:	4b69      	ldr	r3, [pc, #420]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a68      	ldr	r2, [pc, #416]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4b66      	ldr	r3, [pc, #408]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a65      	ldr	r2, [pc, #404]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80085a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d013      	beq.n	80085d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085b0:	f7fb fe48 	bl	8004244 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085b8:	f7fb fe44 	bl	8004244 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b64      	cmp	r3, #100	@ 0x64
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e207      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ca:	4b5b      	ldr	r3, [pc, #364]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0xc0>
 80085d6:	e014      	b.n	8008602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d8:	f7fb fe34 	bl	8004244 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085e0:	f7fb fe30 	bl	8004244 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b64      	cmp	r3, #100	@ 0x64
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e1f3      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085f2:	4b51      	ldr	r3, [pc, #324]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0xe8>
 80085fe:	e000      	b.n	8008602 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d063      	beq.n	80086d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800860e:	4b4a      	ldr	r3, [pc, #296]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f003 030c 	and.w	r3, r3, #12
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800861a:	4b47      	ldr	r3, [pc, #284]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008622:	2b08      	cmp	r3, #8
 8008624:	d11c      	bne.n	8008660 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008626:	4b44      	ldr	r3, [pc, #272]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d116      	bne.n	8008660 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008632:	4b41      	ldr	r3, [pc, #260]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_RCC_OscConfig+0x152>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d001      	beq.n	800864a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e1c7      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800864a:	4b3b      	ldr	r3, [pc, #236]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	4937      	ldr	r1, [pc, #220]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800865a:	4313      	orrs	r3, r2
 800865c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800865e:	e03a      	b.n	80086d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d020      	beq.n	80086aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008668:	4b34      	ldr	r3, [pc, #208]	@ (800873c <HAL_RCC_OscConfig+0x244>)
 800866a:	2201      	movs	r2, #1
 800866c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866e:	f7fb fde9 	bl	8004244 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008676:	f7fb fde5 	bl	8004244 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e1a8      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008688:	4b2b      	ldr	r3, [pc, #172]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008694:	4b28      	ldr	r3, [pc, #160]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4925      	ldr	r1, [pc, #148]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	600b      	str	r3, [r1, #0]
 80086a8:	e015      	b.n	80086d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086aa:	4b24      	ldr	r3, [pc, #144]	@ (800873c <HAL_RCC_OscConfig+0x244>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b0:	f7fb fdc8 	bl	8004244 <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086b8:	f7fb fdc4 	bl	8004244 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e187      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f0      	bne.n	80086b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d036      	beq.n	8008750 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d016      	beq.n	8008718 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086ea:	4b15      	ldr	r3, [pc, #84]	@ (8008740 <HAL_RCC_OscConfig+0x248>)
 80086ec:	2201      	movs	r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f0:	f7fb fda8 	bl	8004244 <HAL_GetTick>
 80086f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f6:	e008      	b.n	800870a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086f8:	f7fb fda4 	bl	8004244 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e167      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800870a:	4b0b      	ldr	r3, [pc, #44]	@ (8008738 <HAL_RCC_OscConfig+0x240>)
 800870c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0f0      	beq.n	80086f8 <HAL_RCC_OscConfig+0x200>
 8008716:	e01b      	b.n	8008750 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008718:	4b09      	ldr	r3, [pc, #36]	@ (8008740 <HAL_RCC_OscConfig+0x248>)
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800871e:	f7fb fd91 	bl	8004244 <HAL_GetTick>
 8008722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008724:	e00e      	b.n	8008744 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008726:	f7fb fd8d 	bl	8004244 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d907      	bls.n	8008744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e150      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
 8008738:	40023800 	.word	0x40023800
 800873c:	42470000 	.word	0x42470000
 8008740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008744:	4b88      	ldr	r3, [pc, #544]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1ea      	bne.n	8008726 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8097 	beq.w	800888c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008762:	4b81      	ldr	r3, [pc, #516]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10f      	bne.n	800878e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	4b7d      	ldr	r3, [pc, #500]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	4a7c      	ldr	r2, [pc, #496]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800877c:	6413      	str	r3, [r2, #64]	@ 0x40
 800877e:	4b7a      	ldr	r3, [pc, #488]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008786:	60bb      	str	r3, [r7, #8]
 8008788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800878e:	4b77      	ldr	r3, [pc, #476]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d118      	bne.n	80087cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800879a:	4b74      	ldr	r3, [pc, #464]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a73      	ldr	r2, [pc, #460]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 80087a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087a6:	f7fb fd4d 	bl	8004244 <HAL_GetTick>
 80087aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ac:	e008      	b.n	80087c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ae:	f7fb fd49 	bl	8004244 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e10c      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087c0:	4b6a      	ldr	r3, [pc, #424]	@ (800896c <HAL_RCC_OscConfig+0x474>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0f0      	beq.n	80087ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d106      	bne.n	80087e2 <HAL_RCC_OscConfig+0x2ea>
 80087d4:	4b64      	ldr	r3, [pc, #400]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d8:	4a63      	ldr	r2, [pc, #396]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087da:	f043 0301 	orr.w	r3, r3, #1
 80087de:	6713      	str	r3, [r2, #112]	@ 0x70
 80087e0:	e01c      	b.n	800881c <HAL_RCC_OscConfig+0x324>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d10c      	bne.n	8008804 <HAL_RCC_OscConfig+0x30c>
 80087ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ee:	4a5e      	ldr	r2, [pc, #376]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087f0:	f043 0304 	orr.w	r3, r3, #4
 80087f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80087f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087fa:	4a5b      	ldr	r2, [pc, #364]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	6713      	str	r3, [r2, #112]	@ 0x70
 8008802:	e00b      	b.n	800881c <HAL_RCC_OscConfig+0x324>
 8008804:	4b58      	ldr	r3, [pc, #352]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008808:	4a57      	ldr	r2, [pc, #348]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008810:	4b55      	ldr	r3, [pc, #340]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008814:	4a54      	ldr	r2, [pc, #336]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008816:	f023 0304 	bic.w	r3, r3, #4
 800881a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d015      	beq.n	8008850 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008824:	f7fb fd0e 	bl	8004244 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800882a:	e00a      	b.n	8008842 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800882c:	f7fb fd0a 	bl	8004244 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e0cb      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008842:	4b49      	ldr	r3, [pc, #292]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0ee      	beq.n	800882c <HAL_RCC_OscConfig+0x334>
 800884e:	e014      	b.n	800887a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008850:	f7fb fcf8 	bl	8004244 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008856:	e00a      	b.n	800886e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008858:	f7fb fcf4 	bl	8004244 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008866:	4293      	cmp	r3, r2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e0b5      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800886e:	4b3e      	ldr	r3, [pc, #248]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008872:	f003 0302 	and.w	r3, r3, #2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1ee      	bne.n	8008858 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800887a:	7dfb      	ldrb	r3, [r7, #23]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d105      	bne.n	800888c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008880:	4b39      	ldr	r3, [pc, #228]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008884:	4a38      	ldr	r2, [pc, #224]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800888a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 80a1 	beq.w	80089d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008896:	4b34      	ldr	r3, [pc, #208]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 030c 	and.w	r3, r3, #12
 800889e:	2b08      	cmp	r3, #8
 80088a0:	d05c      	beq.n	800895c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d141      	bne.n	800892e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088aa:	4b31      	ldr	r3, [pc, #196]	@ (8008970 <HAL_RCC_OscConfig+0x478>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b0:	f7fb fcc8 	bl	8004244 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088b8:	f7fb fcc4 	bl	8004244 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e087      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ca:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f0      	bne.n	80088b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	019b      	lsls	r3, r3, #6
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	085b      	lsrs	r3, r3, #1
 80088ee:	3b01      	subs	r3, #1
 80088f0:	041b      	lsls	r3, r3, #16
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	491b      	ldr	r1, [pc, #108]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008900:	4b1b      	ldr	r3, [pc, #108]	@ (8008970 <HAL_RCC_OscConfig+0x478>)
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008906:	f7fb fc9d 	bl	8004244 <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800890c:	e008      	b.n	8008920 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800890e:	f7fb fc99 	bl	8004244 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d901      	bls.n	8008920 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e05c      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008920:	4b11      	ldr	r3, [pc, #68]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0f0      	beq.n	800890e <HAL_RCC_OscConfig+0x416>
 800892c:	e054      	b.n	80089d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800892e:	4b10      	ldr	r3, [pc, #64]	@ (8008970 <HAL_RCC_OscConfig+0x478>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008934:	f7fb fc86 	bl	8004244 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800893c:	f7fb fc82 	bl	8004244 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e045      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800894e:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <HAL_RCC_OscConfig+0x470>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x444>
 800895a:	e03d      	b.n	80089d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d107      	bne.n	8008974 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e038      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
 8008968:	40023800 	.word	0x40023800
 800896c:	40007000 	.word	0x40007000
 8008970:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008974:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <HAL_RCC_OscConfig+0x4ec>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d028      	beq.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800898c:	429a      	cmp	r2, r3
 800898e:	d121      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800899a:	429a      	cmp	r2, r3
 800899c:	d11a      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80089a4:	4013      	ands	r3, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80089aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d111      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	3b01      	subs	r3, #1
 80089be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d107      	bne.n	80089d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	40023800 	.word	0x40023800

080089e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0cc      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089fc:	4b68      	ldr	r3, [pc, #416]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d90c      	bls.n	8008a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b65      	ldr	r3, [pc, #404]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a12:	4b63      	ldr	r3, [pc, #396]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0b8      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d020      	beq.n	8008a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a3c:	4b59      	ldr	r3, [pc, #356]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	4a58      	ldr	r2, [pc, #352]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a54:	4b53      	ldr	r3, [pc, #332]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	4a52      	ldr	r2, [pc, #328]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a60:	4b50      	ldr	r3, [pc, #320]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	494d      	ldr	r1, [pc, #308]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d044      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d107      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a86:	4b47      	ldr	r3, [pc, #284]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d119      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e07f      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d003      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d107      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e06f      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e067      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ac6:	4b37      	ldr	r3, [pc, #220]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f023 0203 	bic.w	r2, r3, #3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	4934      	ldr	r1, [pc, #208]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ad8:	f7fb fbb4 	bl	8004244 <HAL_GetTick>
 8008adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ade:	e00a      	b.n	8008af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ae0:	f7fb fbb0 	bl	8004244 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e04f      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008af6:	4b2b      	ldr	r3, [pc, #172]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 020c 	and.w	r2, r3, #12
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d1eb      	bne.n	8008ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b08:	4b25      	ldr	r3, [pc, #148]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d20c      	bcs.n	8008b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b16:	4b22      	ldr	r3, [pc, #136]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1e:	4b20      	ldr	r3, [pc, #128]	@ (8008ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d001      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e032      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d008      	beq.n	8008b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4916      	ldr	r1, [pc, #88]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d009      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	490e      	ldr	r1, [pc, #56]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b6e:	f000 f821 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 8008b72:	4602      	mov	r2, r0
 8008b74:	4b0b      	ldr	r3, [pc, #44]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	490a      	ldr	r1, [pc, #40]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8008b80:	5ccb      	ldrb	r3, [r1, r3]
 8008b82:	fa22 f303 	lsr.w	r3, r2, r3
 8008b86:	4a09      	ldr	r2, [pc, #36]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b8a:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fb fb14 	bl	80041bc <HAL_InitTick>

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	40023c00 	.word	0x40023c00
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	08018934 	.word	0x08018934
 8008bac:	20000008 	.word	0x20000008
 8008bb0:	2000000c 	.word	0x2000000c

08008bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb8:	b094      	sub	sp, #80	@ 0x50
 8008bba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bcc:	4b79      	ldr	r3, [pc, #484]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	f003 030c 	and.w	r3, r3, #12
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d00d      	beq.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x40>
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	f200 80e1 	bhi.w	8008da0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_RCC_GetSysClockFreq+0x34>
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d003      	beq.n	8008bee <HAL_RCC_GetSysClockFreq+0x3a>
 8008be6:	e0db      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008be8:	4b73      	ldr	r3, [pc, #460]	@ (8008db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008bec:	e0db      	b.n	8008da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bee:	4b73      	ldr	r3, [pc, #460]	@ (8008dbc <HAL_RCC_GetSysClockFreq+0x208>)
 8008bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008bf2:	e0d8      	b.n	8008da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bfc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d063      	beq.n	8008cd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	099b      	lsrs	r3, r3, #6
 8008c10:	2200      	movs	r2, #0
 8008c12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008c26:	4622      	mov	r2, r4
 8008c28:	462b      	mov	r3, r5
 8008c2a:	f04f 0000 	mov.w	r0, #0
 8008c2e:	f04f 0100 	mov.w	r1, #0
 8008c32:	0159      	lsls	r1, r3, #5
 8008c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c38:	0150      	lsls	r0, r2, #5
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4621      	mov	r1, r4
 8008c40:	1a51      	subs	r1, r2, r1
 8008c42:	6139      	str	r1, [r7, #16]
 8008c44:	4629      	mov	r1, r5
 8008c46:	eb63 0301 	sbc.w	r3, r3, r1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	f04f 0300 	mov.w	r3, #0
 8008c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c58:	4659      	mov	r1, fp
 8008c5a:	018b      	lsls	r3, r1, #6
 8008c5c:	4651      	mov	r1, sl
 8008c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c62:	4651      	mov	r1, sl
 8008c64:	018a      	lsls	r2, r1, #6
 8008c66:	4651      	mov	r1, sl
 8008c68:	ebb2 0801 	subs.w	r8, r2, r1
 8008c6c:	4659      	mov	r1, fp
 8008c6e:	eb63 0901 	sbc.w	r9, r3, r1
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	f04f 0300 	mov.w	r3, #0
 8008c7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c86:	4690      	mov	r8, r2
 8008c88:	4699      	mov	r9, r3
 8008c8a:	4623      	mov	r3, r4
 8008c8c:	eb18 0303 	adds.w	r3, r8, r3
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	462b      	mov	r3, r5
 8008c94:	eb49 0303 	adc.w	r3, r9, r3
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	024b      	lsls	r3, r1, #9
 8008caa:	4621      	mov	r1, r4
 8008cac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	024a      	lsls	r2, r1, #9
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cba:	2200      	movs	r2, #0
 8008cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008cc4:	f7f7 ffc0 	bl	8000c48 <__aeabi_uldivmod>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4613      	mov	r3, r2
 8008cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd0:	e058      	b.n	8008d84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cd2:	4b38      	ldr	r3, [pc, #224]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	099b      	lsrs	r3, r3, #6
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4618      	mov	r0, r3
 8008cdc:	4611      	mov	r1, r2
 8008cde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008ce2:	623b      	str	r3, [r7, #32]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ce8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cec:	4642      	mov	r2, r8
 8008cee:	464b      	mov	r3, r9
 8008cf0:	f04f 0000 	mov.w	r0, #0
 8008cf4:	f04f 0100 	mov.w	r1, #0
 8008cf8:	0159      	lsls	r1, r3, #5
 8008cfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cfe:	0150      	lsls	r0, r2, #5
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4641      	mov	r1, r8
 8008d06:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d10:	f04f 0200 	mov.w	r2, #0
 8008d14:	f04f 0300 	mov.w	r3, #0
 8008d18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d24:	ebb2 040a 	subs.w	r4, r2, sl
 8008d28:	eb63 050b 	sbc.w	r5, r3, fp
 8008d2c:	f04f 0200 	mov.w	r2, #0
 8008d30:	f04f 0300 	mov.w	r3, #0
 8008d34:	00eb      	lsls	r3, r5, #3
 8008d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d3a:	00e2      	lsls	r2, r4, #3
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	461d      	mov	r5, r3
 8008d40:	4643      	mov	r3, r8
 8008d42:	18e3      	adds	r3, r4, r3
 8008d44:	603b      	str	r3, [r7, #0]
 8008d46:	464b      	mov	r3, r9
 8008d48:	eb45 0303 	adc.w	r3, r5, r3
 8008d4c:	607b      	str	r3, [r7, #4]
 8008d4e:	f04f 0200 	mov.w	r2, #0
 8008d52:	f04f 0300 	mov.w	r3, #0
 8008d56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	028b      	lsls	r3, r1, #10
 8008d5e:	4621      	mov	r1, r4
 8008d60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d64:	4621      	mov	r1, r4
 8008d66:	028a      	lsls	r2, r1, #10
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d6e:	2200      	movs	r2, #0
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	61fa      	str	r2, [r7, #28]
 8008d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d78:	f7f7 ff66 	bl	8000c48 <__aeabi_uldivmod>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4613      	mov	r3, r2
 8008d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d84:	4b0b      	ldr	r3, [pc, #44]	@ (8008db4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	3301      	adds	r3, #1
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d9e:	e002      	b.n	8008da6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008da0:	4b05      	ldr	r3, [pc, #20]	@ (8008db8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3750      	adds	r7, #80	@ 0x50
 8008dac:	46bd      	mov	sp, r7
 8008dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008db2:	bf00      	nop
 8008db4:	40023800 	.word	0x40023800
 8008db8:	00f42400 	.word	0x00f42400
 8008dbc:	007a1200 	.word	0x007a1200

08008dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dc4:	4b03      	ldr	r3, [pc, #12]	@ (8008dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000008 	.word	0x20000008

08008dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ddc:	f7ff fff0 	bl	8008dc0 <HAL_RCC_GetHCLKFreq>
 8008de0:	4602      	mov	r2, r0
 8008de2:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	0a9b      	lsrs	r3, r3, #10
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	4903      	ldr	r1, [pc, #12]	@ (8008dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dee:	5ccb      	ldrb	r3, [r1, r3]
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	40023800 	.word	0x40023800
 8008dfc:	08018944 	.word	0x08018944

08008e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e04:	f7ff ffdc 	bl	8008dc0 <HAL_RCC_GetHCLKFreq>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	4b05      	ldr	r3, [pc, #20]	@ (8008e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	0b5b      	lsrs	r3, r3, #13
 8008e10:	f003 0307 	and.w	r3, r3, #7
 8008e14:	4903      	ldr	r1, [pc, #12]	@ (8008e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e16:	5ccb      	ldrb	r3, [r1, r3]
 8008e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	40023800 	.word	0x40023800
 8008e24:	08018944 	.word	0x08018944

08008e28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d105      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d035      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e50:	4b62      	ldr	r3, [pc, #392]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e56:	f7fb f9f5 	bl	8004244 <HAL_GetTick>
 8008e5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e5e:	f7fb f9f1 	bl	8004244 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e0b0      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e70:	4b5b      	ldr	r3, [pc, #364]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f0      	bne.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	019a      	lsls	r2, r3, #6
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	071b      	lsls	r3, r3, #28
 8008e88:	4955      	ldr	r1, [pc, #340]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008e90:	4b52      	ldr	r3, [pc, #328]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e96:	f7fb f9d5 	bl	8004244 <HAL_GetTick>
 8008e9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e9e:	f7fb f9d1 	bl	8004244 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e090      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8083 	beq.w	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	4b44      	ldr	r3, [pc, #272]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	4a43      	ldr	r2, [pc, #268]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008eda:	4b41      	ldr	r3, [pc, #260]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a3e      	ldr	r2, [pc, #248]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ef0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ef2:	f7fb f9a7 	bl	8004244 <HAL_GetTick>
 8008ef6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008efa:	f7fb f9a3 	bl	8004244 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e062      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f0c:	4b35      	ldr	r3, [pc, #212]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0f0      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f18:	4b31      	ldr	r3, [pc, #196]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d02f      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d028      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f36:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f40:	4b29      	ldr	r3, [pc, #164]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008f42:	2201      	movs	r2, #1
 8008f44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f46:	4b28      	ldr	r3, [pc, #160]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f4c:	4a24      	ldr	r2, [pc, #144]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f52:	4b23      	ldr	r3, [pc, #140]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d114      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f5e:	f7fb f971 	bl	8004244 <HAL_GetTick>
 8008f62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f64:	e00a      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f66:	f7fb f96d 	bl	8004244 <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e02a      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f7c:	4b18      	ldr	r3, [pc, #96]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0ee      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f94:	d10d      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008f96:	4b12      	ldr	r3, [pc, #72]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008faa:	490d      	ldr	r1, [pc, #52]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	608b      	str	r3, [r1, #8]
 8008fb0:	e005      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fb8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008fbc:	6093      	str	r3, [r2, #8]
 8008fbe:	4b08      	ldr	r3, [pc, #32]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fc0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fca:	4905      	ldr	r1, [pc, #20]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	42470068 	.word	0x42470068
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40007000 	.word	0x40007000
 8008fe8:	42470e40 	.word	0x42470e40

08008fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e073      	b.n	80090ea <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7f5b      	ldrb	r3, [r3, #29]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d105      	bne.n	8009018 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7fa fcb2 	bl	800397c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b10      	cmp	r3, #16
 800902a:	d055      	beq.n	80090d8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	22ca      	movs	r2, #202	@ 0xca
 8009032:	625a      	str	r2, [r3, #36]	@ 0x24
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2253      	movs	r2, #83	@ 0x53
 800903a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f99d 	bl	800937c <RTC_EnterInitMode>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d12c      	bne.n	80090a6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800905a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800905e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6899      	ldr	r1, [r3, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	68d2      	ldr	r2, [r2, #12]
 8009086:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6919      	ldr	r1, [r3, #16]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	041a      	lsls	r2, r3, #16
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f9a4 	bl	80093ea <RTC_ExitInitMode>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d110      	bne.n	80090ce <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80090ba:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	22ff      	movs	r2, #255	@ 0xff
 80090d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80090d6:	e001      	b.n	80090dc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090f2:	b590      	push	{r4, r7, lr}
 80090f4:	b087      	sub	sp, #28
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	7f1b      	ldrb	r3, [r3, #28]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_RTC_SetTime+0x1c>
 800910a:	2302      	movs	r3, #2
 800910c:	e087      	b.n	800921e <HAL_RTC_SetTime+0x12c>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2202      	movs	r2, #2
 8009118:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d126      	bne.n	800916e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2200      	movs	r2, #0
 8009132:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f97b 	bl	8009434 <RTC_ByteToBcd2>
 800913e:	4603      	mov	r3, r0
 8009140:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	785b      	ldrb	r3, [r3, #1]
 8009146:	4618      	mov	r0, r3
 8009148:	f000 f974 	bl	8009434 <RTC_ByteToBcd2>
 800914c:	4603      	mov	r3, r0
 800914e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009150:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f96c 	bl	8009434 <RTC_ByteToBcd2>
 800915c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800915e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	78db      	ldrb	r3, [r3, #3]
 8009166:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	e018      	b.n	80091a0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2200      	movs	r2, #0
 8009180:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800918e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009194:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	78db      	ldrb	r3, [r3, #3]
 800919a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800919c:	4313      	orrs	r3, r2
 800919e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	22ca      	movs	r2, #202	@ 0xca
 80091a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2253      	movs	r2, #83	@ 0x53
 80091ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f8e3 	bl	800937c <RTC_EnterInitMode>
 80091b6:	4603      	mov	r3, r0
 80091b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80091ba:	7cfb      	ldrb	r3, [r7, #19]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d120      	bne.n	8009202 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80091ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80091ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80091de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6899      	ldr	r1, [r3, #8]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f8f6 	bl	80093ea <RTC_ExitInitMode>
 80091fe:	4603      	mov	r3, r0
 8009200:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009202:	7cfb      	ldrb	r3, [r7, #19]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2201      	movs	r2, #1
 800920c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	22ff      	movs	r2, #255	@ 0xff
 8009214:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]

  return status;
 800921c:	7cfb      	ldrb	r3, [r7, #19]
}
 800921e:	4618      	mov	r0, r3
 8009220:	371c      	adds	r7, #28
 8009222:	46bd      	mov	sp, r7
 8009224:	bd90      	pop	{r4, r7, pc}

08009226 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009226:	b590      	push	{r4, r7, lr}
 8009228:	b087      	sub	sp, #28
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	7f1b      	ldrb	r3, [r3, #28]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_RTC_SetDate+0x1c>
 800923e:	2302      	movs	r3, #2
 8009240:	e071      	b.n	8009326 <HAL_RTC_SetDate+0x100>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2202      	movs	r2, #2
 800924c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10e      	bne.n	8009272 <HAL_RTC_SetDate+0x4c>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	785b      	ldrb	r3, [r3, #1]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	785b      	ldrb	r3, [r3, #1]
 8009264:	f023 0310 	bic.w	r3, r3, #16
 8009268:	b2db      	uxtb	r3, r3
 800926a:	330a      	adds	r3, #10
 800926c:	b2da      	uxtb	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d11c      	bne.n	80092b2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	78db      	ldrb	r3, [r3, #3]
 800927c:	4618      	mov	r0, r3
 800927e:	f000 f8d9 	bl	8009434 <RTC_ByteToBcd2>
 8009282:	4603      	mov	r3, r0
 8009284:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	785b      	ldrb	r3, [r3, #1]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f8d2 	bl	8009434 <RTC_ByteToBcd2>
 8009290:	4603      	mov	r3, r0
 8009292:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009294:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	789b      	ldrb	r3, [r3, #2]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f8ca 	bl	8009434 <RTC_ByteToBcd2>
 80092a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80092a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e00e      	b.n	80092d0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	78db      	ldrb	r3, [r3, #3]
 80092b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092be:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80092c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	22ca      	movs	r2, #202	@ 0xca
 80092d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2253      	movs	r2, #83	@ 0x53
 80092de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f84b 	bl	800937c <RTC_EnterInitMode>
 80092e6:	4603      	mov	r3, r0
 80092e8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80092ea:	7cfb      	ldrb	r3, [r7, #19]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10c      	bne.n	800930a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80092fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092fe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f872 	bl	80093ea <RTC_ExitInitMode>
 8009306:	4603      	mov	r3, r0
 8009308:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800930a:	7cfb      	ldrb	r3, [r7, #19]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	22ff      	movs	r2, #255	@ 0xff
 800931c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	771a      	strb	r2, [r3, #28]

  return status;
 8009324:	7cfb      	ldrb	r3, [r7, #19]
}
 8009326:	4618      	mov	r0, r3
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	bd90      	pop	{r4, r7, pc}
	...

08009330 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009338:	2300      	movs	r3, #0
 800933a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a0d      	ldr	r2, [pc, #52]	@ (8009378 <HAL_RTC_WaitForSynchro+0x48>)
 8009342:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009344:	f7fa ff7e 	bl	8004244 <HAL_GetTick>
 8009348:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800934a:	e009      	b.n	8009360 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800934c:	f7fa ff7a 	bl	8004244 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800935a:	d901      	bls.n	8009360 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800935c:	2303      	movs	r3, #3
 800935e:	e007      	b.n	8009370 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f003 0320 	and.w	r3, r3, #32
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0ee      	beq.n	800934c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	00017f5f 	.word	0x00017f5f

0800937c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009384:	2300      	movs	r3, #0
 8009386:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009396:	2b00      	cmp	r3, #0
 8009398:	d122      	bne.n	80093e0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80093aa:	f7fa ff4b 	bl	8004244 <HAL_GetTick>
 80093ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80093b0:	e00c      	b.n	80093cc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093b2:	f7fa ff47 	bl	8004244 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093c0:	d904      	bls.n	80093cc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2204      	movs	r2, #4
 80093c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d102      	bne.n	80093e0 <RTC_EnterInitMode+0x64>
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d1e8      	bne.n	80093b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009404:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff ff8b 	bl	8009330 <HAL_RTC_WaitForSynchro>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2204      	movs	r2, #4
 8009424:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009442:	e005      	b.n	8009450 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	3b0a      	subs	r3, #10
 800944e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b09      	cmp	r3, #9
 8009454:	d8f6      	bhi.n	8009444 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	011b      	lsls	r3, r3, #4
 800945c:	b2da      	uxtb	r2, r3
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	4313      	orrs	r3, r2
 8009462:	b2db      	uxtb	r3, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e022      	b.n	80094c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d105      	bne.n	800949a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fa fa9b 	bl	80039d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2203      	movs	r2, #3
 800949e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f814 	bl	80094d0 <HAL_SD_InitCard>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e00a      	b.n	80094c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094d0:	b5b0      	push	{r4, r5, r7, lr}
 80094d2:	b08e      	sub	sp, #56	@ 0x38
 80094d4:	af04      	add	r7, sp, #16
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80094e8:	2300      	movs	r3, #0
 80094ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80094ec:	2376      	movs	r3, #118	@ 0x76
 80094ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681d      	ldr	r5, [r3, #0]
 80094f4:	466c      	mov	r4, sp
 80094f6:	f107 0314 	add.w	r3, r7, #20
 80094fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009502:	f107 0308 	add.w	r3, r7, #8
 8009506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009508:	4628      	mov	r0, r5
 800950a:	f003 fe43 	bl	800d194 <SDIO_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e04f      	b.n	80095c0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009520:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <HAL_SD_InitCard+0xf8>)
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f003 fe7b 	bl	800d226 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009530:	4b25      	ldr	r3, [pc, #148]	@ (80095c8 <HAL_SD_InitCard+0xf8>)
 8009532:	2201      	movs	r2, #1
 8009534:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009536:	2002      	movs	r0, #2
 8009538:	f7fa fe90 	bl	800425c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 ff13 	bl	800a368 <SD_PowerON>
 8009542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e02e      	b.n	80095c0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fe32 	bl	800a1cc <SD_InitCard>
 8009568:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e01b      	b.n	80095c0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009590:	4618      	mov	r0, r3
 8009592:	f003 feda 	bl	800d34a <SDMMC_CmdBlockLength>
 8009596:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00f      	beq.n	80095be <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a0a      	ldr	r2, [pc, #40]	@ (80095cc <HAL_SD_InitCard+0xfc>)
 80095a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3728      	adds	r7, #40	@ 0x28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bdb0      	pop	{r4, r5, r7, pc}
 80095c8:	422580a0 	.word	0x422580a0
 80095cc:	004005ff 	.word	0x004005ff

080095d0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b092      	sub	sp, #72	@ 0x48
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095de:	f7fa fe31 	bl	8004244 <HAL_GetTick>
 80095e2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d107      	bne.n	8009602 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e1c5      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	f040 81b8 	bne.w	8009980 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	441a      	add	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009620:	429a      	cmp	r2, r3
 8009622:	d907      	bls.n	8009634 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009628:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e1ac      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2203      	movs	r2, #3
 8009638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2200      	movs	r2, #0
 8009642:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009648:	2b01      	cmp	r3, #1
 800964a:	d002      	beq.n	8009652 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800964c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964e:	025b      	lsls	r3, r3, #9
 8009650:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
 8009656:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	025b      	lsls	r3, r3, #9
 800965c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800965e:	2390      	movs	r3, #144	@ 0x90
 8009660:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009662:	2302      	movs	r3, #2
 8009664:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009666:	2300      	movs	r3, #0
 8009668:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800966a:	2301      	movs	r3, #1
 800966c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f107 0214 	add.w	r2, r7, #20
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f003 fe3a 	bl	800d2f2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d90a      	bls.n	800969a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2202      	movs	r2, #2
 8009688:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009690:	4618      	mov	r0, r3
 8009692:	f003 fe9e 	bl	800d3d2 <SDMMC_CmdReadMultiBlock>
 8009696:	6478      	str	r0, [r7, #68]	@ 0x44
 8009698:	e009      	b.n	80096ae <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2201      	movs	r2, #1
 800969e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80096a6:	4618      	mov	r0, r3
 80096a8:	f003 fe71 	bl	800d38e <SDMMC_CmdReadSingleBlock>
 80096ac:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80096ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d012      	beq.n	80096da <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a7e      	ldr	r2, [pc, #504]	@ (80098b4 <HAL_SD_ReadBlocks+0x2e4>)
 80096ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c2:	431a      	orrs	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e159      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80096de:	e061      	b.n	80097a4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d03c      	beq.n	8009768 <HAL_SD_ReadBlocks+0x198>
 80096ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d039      	beq.n	8009768 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80096f4:	2300      	movs	r3, #0
 80096f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f8:	e033      	b.n	8009762 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f003 fd73 	bl	800d1ea <SDIO_ReadFIFO>
 8009704:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009708:	b2da      	uxtb	r2, r3
 800970a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800970e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009710:	3301      	adds	r3, #1
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009716:	3b01      	subs	r3, #1
 8009718:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800971a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971c:	0a1b      	lsrs	r3, r3, #8
 800971e:	b2da      	uxtb	r2, r3
 8009720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009722:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009726:	3301      	adds	r3, #1
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800972a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800972c:	3b01      	subs	r3, #1
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009732:	0c1b      	lsrs	r3, r3, #16
 8009734:	b2da      	uxtb	r2, r3
 8009736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009738:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800973a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973c:	3301      	adds	r3, #1
 800973e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009742:	3b01      	subs	r3, #1
 8009744:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	0e1b      	lsrs	r3, r3, #24
 800974a:	b2da      	uxtb	r2, r3
 800974c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009752:	3301      	adds	r3, #1
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009758:	3b01      	subs	r3, #1
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800975c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800975e:	3301      	adds	r3, #1
 8009760:	643b      	str	r3, [r7, #64]	@ 0x40
 8009762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009764:	2b07      	cmp	r3, #7
 8009766:	d9c8      	bls.n	80096fa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009768:	f7fa fd6c 	bl	8004244 <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009774:	429a      	cmp	r2, r3
 8009776:	d902      	bls.n	800977e <HAL_SD_ReadBlocks+0x1ae>
 8009778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800977a:	2b00      	cmp	r3, #0
 800977c:	d112      	bne.n	80097a4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a4c      	ldr	r2, [pc, #304]	@ (80098b4 <HAL_SD_ReadBlocks+0x2e4>)
 8009784:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800978a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e0f4      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097aa:	f240 332a 	movw	r3, #810	@ 0x32a
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d095      	beq.n	80096e0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d022      	beq.n	8009808 <HAL_SD_ReadBlocks+0x238>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d91f      	bls.n	8009808 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d01b      	beq.n	8009808 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f003 fe63 	bl	800d4a0 <SDMMC_CmdStopTransfer>
 80097da:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80097dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d012      	beq.n	8009808 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a33      	ldr	r2, [pc, #204]	@ (80098b4 <HAL_SD_ReadBlocks+0x2e4>)
 80097e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097f0:	431a      	orrs	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e0c2      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980e:	f003 0308 	and.w	r3, r3, #8
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <HAL_SD_ReadBlocks+0x254>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009820:	2b00      	cmp	r3, #0
 8009822:	d012      	beq.n	800984a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a22      	ldr	r2, [pc, #136]	@ (80098b4 <HAL_SD_ReadBlocks+0x2e4>)
 800982a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009830:	f043 0208 	orr.w	r2, r3, #8
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e0a1      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d012      	beq.n	800987e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a15      	ldr	r2, [pc, #84]	@ (80098b4 <HAL_SD_ReadBlocks+0x2e4>)
 800985e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009864:	f043 0202 	orr.w	r2, r3, #2
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e087      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009884:	f003 0320 	and.w	r3, r3, #32
 8009888:	2b00      	cmp	r3, #0
 800988a:	d064      	beq.n	8009956 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a08      	ldr	r2, [pc, #32]	@ (80098b4 <HAL_SD_ReadBlocks+0x2e4>)
 8009892:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009898:	f043 0220 	orr.w	r2, r3, #32
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e06d      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
 80098b2:	bf00      	nop
 80098b4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4618      	mov	r0, r3
 80098be:	f003 fc94 	bl	800d1ea <SDIO_ReadFIFO>
 80098c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80098c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80098cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ce:	3301      	adds	r3, #1
 80098d0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80098d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d4:	3b01      	subs	r3, #1
 80098d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80098d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80098e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e4:	3301      	adds	r3, #1
 80098e6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80098e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ea:	3b01      	subs	r3, #1
 80098ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80098ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f0:	0c1b      	lsrs	r3, r3, #16
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80098f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fa:	3301      	adds	r3, #1
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80098fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009900:	3b01      	subs	r3, #1
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	0e1b      	lsrs	r3, r3, #24
 8009908:	b2da      	uxtb	r2, r3
 800990a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800990e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009910:	3301      	adds	r3, #1
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8009914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009916:	3b01      	subs	r3, #1
 8009918:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800991a:	f7fa fc93 	bl	8004244 <HAL_GetTick>
 800991e:	4602      	mov	r2, r0
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009926:	429a      	cmp	r2, r3
 8009928:	d902      	bls.n	8009930 <HAL_SD_ReadBlocks+0x360>
 800992a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800992c:	2b00      	cmp	r3, #0
 800992e:	d112      	bne.n	8009956 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a18      	ldr	r2, [pc, #96]	@ (8009998 <HAL_SD_ReadBlocks+0x3c8>)
 8009936:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800993c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e01b      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <HAL_SD_ReadBlocks+0x39a>
 8009964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1a6      	bne.n	80098b8 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009972:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	e006      	b.n	800998e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009984:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
  }
}
 800998e:	4618      	mov	r0, r3
 8009990:	3748      	adds	r7, #72	@ 0x48
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	004005ff 	.word	0x004005ff

0800999c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b092      	sub	sp, #72	@ 0x48
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099aa:	f7fa fc4b 	bl	8004244 <HAL_GetTick>
 80099ae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d107      	bne.n	80099ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e16d      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	f040 8160 	bne.w	8009c9c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	441a      	add	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d907      	bls.n	8009a00 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e154      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2203      	movs	r2, #3
 8009a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d002      	beq.n	8009a1e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1a:	025b      	lsls	r3, r3, #9
 8009a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a22:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	025b      	lsls	r3, r3, #9
 8009a28:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009a2a:	2390      	movs	r3, #144	@ 0x90
 8009a2c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009a36:	2301      	movs	r3, #1
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f107 0218 	add.w	r2, r7, #24
 8009a42:	4611      	mov	r1, r2
 8009a44:	4618      	mov	r0, r3
 8009a46:	f003 fc54 	bl	800d2f2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d90a      	bls.n	8009a66 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2220      	movs	r2, #32
 8009a54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f003 fcfc 	bl	800d45a <SDMMC_CmdWriteMultiBlock>
 8009a62:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a64:	e009      	b.n	8009a7a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2210      	movs	r2, #16
 8009a6a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009a72:	4618      	mov	r0, r3
 8009a74:	f003 fccf 	bl	800d416 <SDMMC_CmdWriteSingleBlock>
 8009a78:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d012      	beq.n	8009aa6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a8b      	ldr	r2, [pc, #556]	@ (8009cb4 <HAL_SD_WriteBlocks+0x318>)
 8009a86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e101      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009aaa:	e065      	b.n	8009b78 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d040      	beq.n	8009b3c <HAL_SD_WriteBlocks+0x1a0>
 8009aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d03d      	beq.n	8009b3c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ac4:	e037      	b.n	8009b36 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8009ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ace:	3301      	adds	r3, #1
 8009ad0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	021a      	lsls	r2, r3, #8
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aec:	3b01      	subs	r3, #1
 8009aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	041a      	lsls	r2, r3, #16
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009afe:	3301      	adds	r3, #1
 8009b00:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b04:	3b01      	subs	r3, #1
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	061a      	lsls	r2, r3, #24
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b16:	3301      	adds	r3, #1
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f107 0214 	add.w	r2, r7, #20
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f003 fb6a 	bl	800d204 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b32:	3301      	adds	r3, #1
 8009b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b38:	2b07      	cmp	r3, #7
 8009b3a:	d9c4      	bls.n	8009ac6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009b3c:	f7fa fb82 	bl	8004244 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d902      	bls.n	8009b52 <HAL_SD_WriteBlocks+0x1b6>
 8009b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d112      	bne.n	8009b78 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a57      	ldr	r2, [pc, #348]	@ (8009cb4 <HAL_SD_WriteBlocks+0x318>)
 8009b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b60:	431a      	orrs	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e098      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b7e:	f240 331a 	movw	r3, #794	@ 0x31a
 8009b82:	4013      	ands	r3, r2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d091      	beq.n	8009aac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d022      	beq.n	8009bdc <HAL_SD_WriteBlocks+0x240>
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d91f      	bls.n	8009bdc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d01b      	beq.n	8009bdc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f003 fc79 	bl	800d4a0 <SDMMC_CmdStopTransfer>
 8009bae:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d012      	beq.n	8009bdc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a3e      	ldr	r2, [pc, #248]	@ (8009cb4 <HAL_SD_WriteBlocks+0x318>)
 8009bbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e066      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be2:	f003 0308 	and.w	r3, r3, #8
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <HAL_SD_WriteBlocks+0x25c>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d012      	beq.n	8009c1e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8009cb4 <HAL_SD_WriteBlocks+0x318>)
 8009bfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c04:	f043 0208 	orr.w	r2, r3, #8
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e045      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d012      	beq.n	8009c52 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a20      	ldr	r2, [pc, #128]	@ (8009cb4 <HAL_SD_WriteBlocks+0x318>)
 8009c32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c38:	f043 0202 	orr.w	r2, r3, #2
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e02b      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c58:	f003 0310 	and.w	r3, r3, #16
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d012      	beq.n	8009c86 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a13      	ldr	r2, [pc, #76]	@ (8009cb4 <HAL_SD_WriteBlocks+0x318>)
 8009c66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6c:	f043 0210 	orr.w	r2, r3, #16
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e011      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009c8e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e006      	b.n	8009caa <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3748      	adds	r7, #72	@ 0x48
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	004005ff 	.word	0x004005ff

08009cb8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cc6:	0f9b      	lsrs	r3, r3, #30
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd2:	0e9b      	lsrs	r3, r3, #26
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	f003 030f 	and.w	r3, r3, #15
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ce4:	0e1b      	lsrs	r3, r3, #24
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cf6:	0c1b      	lsrs	r3, r3, #16
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d18:	0d1b      	lsrs	r3, r3, #20
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 030f 	and.w	r3, r3, #15
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d36:	0bdb      	lsrs	r3, r3, #15
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d48:	0b9b      	lsrs	r3, r3, #14
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d5a:	0b5b      	lsrs	r3, r3, #13
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d6c:	0b1b      	lsrs	r3, r3, #12
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d163      	bne.n	8009e50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d8c:	009a      	lsls	r2, r3, #2
 8009d8e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009d92:	4013      	ands	r3, r2
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009d98:	0f92      	lsrs	r2, r2, #30
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da4:	0edb      	lsrs	r3, r3, #27
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	f003 0307 	and.w	r3, r3, #7
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db6:	0e1b      	lsrs	r3, r3, #24
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	f003 0307 	and.w	r3, r3, #7
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc8:	0d5b      	lsrs	r3, r3, #21
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dda:	0c9b      	lsrs	r3, r3, #18
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0307 	and.w	r3, r3, #7
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dec:	0bdb      	lsrs	r3, r3, #15
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f003 0307 	and.w	r3, r3, #7
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	7e1b      	ldrb	r3, [r3, #24]
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	3302      	adds	r3, #2
 8009e10:	2201      	movs	r2, #1
 8009e12:	fa02 f303 	lsl.w	r3, r2, r3
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009e1a:	fb03 f202 	mul.w	r2, r3, r2
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	7a1b      	ldrb	r3, [r3, #8]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	409a      	lsls	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009e3c:	0a52      	lsrs	r2, r2, #9
 8009e3e:	fb03 f202 	mul.w	r2, r3, r2
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e4e:	e031      	b.n	8009eb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d11d      	bne.n	8009e94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e5c:	041b      	lsls	r3, r3, #16
 8009e5e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e66:	0c1b      	lsrs	r3, r3, #16
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	3301      	adds	r3, #1
 8009e74:	029a      	lsls	r2, r3, #10
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e88:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	661a      	str	r2, [r3, #96]	@ 0x60
 8009e92:	e00f      	b.n	8009eb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a58      	ldr	r2, [pc, #352]	@ (8009ffc <HAL_SD_GetCardCSD+0x344>)
 8009e9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e09d      	b.n	8009ff0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eb8:	0b9b      	lsrs	r3, r3, #14
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eca:	09db      	lsrs	r3, r3, #7
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eec:	0fdb      	lsrs	r3, r3, #31
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ef8:	0f5b      	lsrs	r3, r3, #29
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	f003 0303 	and.w	r3, r3, #3
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f0a:	0e9b      	lsrs	r3, r3, #26
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f003 0307 	and.w	r3, r3, #7
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f1c:	0d9b      	lsrs	r3, r3, #22
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f2e:	0d5b      	lsrs	r3, r3, #21
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f4a:	0c1b      	lsrs	r3, r3, #16
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f5e:	0bdb      	lsrs	r3, r3, #15
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f72:	0b9b      	lsrs	r3, r3, #14
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f86:	0b5b      	lsrs	r3, r3, #13
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9a:	0b1b      	lsrs	r3, r3, #12
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fae:	0a9b      	lsrs	r3, r3, #10
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	004005ff 	.word	0x004005ff

0800a000 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a058:	b5b0      	push	{r4, r5, r7, lr}
 800a05a:	b08e      	sub	sp, #56	@ 0x38
 800a05c:	af04      	add	r7, sp, #16
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2203      	movs	r2, #3
 800a06c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a074:	2b03      	cmp	r3, #3
 800a076:	d02e      	beq.n	800a0d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a07e:	d106      	bne.n	800a08e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a084:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a08c:	e029      	b.n	800a0e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a094:	d10a      	bne.n	800a0ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa1c 	bl	800a4d4 <SD_WideBus_Enable>
 800a09c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0aa:	e01a      	b.n	800a0e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10a      	bne.n	800a0c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fa59 	bl	800a56a <SD_WideBus_Disable>
 800a0b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0c6:	e00c      	b.n	800a0e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0d4:	e005      	b.n	800a0e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00b      	beq.n	800a102 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a26      	ldr	r2, [pc, #152]	@ (800a188 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a0f0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a100:	e01f      	b.n	800a142 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681d      	ldr	r5, [r3, #0]
 800a128:	466c      	mov	r4, sp
 800a12a:	f107 0314 	add.w	r3, r7, #20
 800a12e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a136:	f107 0308 	add.w	r3, r7, #8
 800a13a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a13c:	4628      	mov	r0, r5
 800a13e:	f003 f829 	bl	800d194 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a14a:	4618      	mov	r0, r3
 800a14c:	f003 f8fd 	bl	800d34a <SDMMC_CmdBlockLength>
 800a150:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00c      	beq.n	800a172 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a0a      	ldr	r2, [pc, #40]	@ (800a188 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a15e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	431a      	orrs	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800a17a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3728      	adds	r7, #40	@ 0x28
 800a182:	46bd      	mov	sp, r7
 800a184:	bdb0      	pop	{r4, r5, r7, pc}
 800a186:	bf00      	nop
 800a188:	004005ff 	.word	0x004005ff

0800a18c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a198:	f107 030c 	add.w	r3, r7, #12
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f970 	bl	800a484 <SD_SendStatus>
 800a1a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d005      	beq.n	800a1b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	0a5b      	lsrs	r3, r3, #9
 800a1bc:	f003 030f 	and.w	r3, r3, #15
 800a1c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a1c2:	693b      	ldr	r3, [r7, #16]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a1cc:	b5b0      	push	{r4, r5, r7, lr}
 800a1ce:	b094      	sub	sp, #80	@ 0x50
 800a1d0:	af04      	add	r7, sp, #16
 800a1d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f003 f830 	bl	800d242 <SDIO_GetPowerState>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a1ec:	e0b8      	b.n	800a360 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d02f      	beq.n	800a256 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f003 fa5a 	bl	800d6b4 <SDMMC_CmdSendCID>
 800a200:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <SD_InitCard+0x40>
    {
      return errorstate;
 800a208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a20a:	e0a9      	b.n	800a360 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2100      	movs	r1, #0
 800a212:	4618      	mov	r0, r3
 800a214:	f003 f85a 	bl	800d2cc <SDIO_GetResponse>
 800a218:	4602      	mov	r2, r0
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2104      	movs	r1, #4
 800a224:	4618      	mov	r0, r3
 800a226:	f003 f851 	bl	800d2cc <SDIO_GetResponse>
 800a22a:	4602      	mov	r2, r0
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2108      	movs	r1, #8
 800a236:	4618      	mov	r0, r3
 800a238:	f003 f848 	bl	800d2cc <SDIO_GetResponse>
 800a23c:	4602      	mov	r2, r0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	210c      	movs	r1, #12
 800a248:	4618      	mov	r0, r3
 800a24a:	f003 f83f 	bl	800d2cc <SDIO_GetResponse>
 800a24e:	4602      	mov	r2, r0
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d00d      	beq.n	800a27a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f107 020e 	add.w	r2, r7, #14
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f003 fa60 	bl	800d72e <SDMMC_CmdSetRelAdd>
 800a26e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <SD_InitCard+0xae>
    {
      return errorstate;
 800a276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a278:	e072      	b.n	800a360 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d036      	beq.n	800a2f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a282:	89fb      	ldrh	r3, [r7, #14]
 800a284:	461a      	mov	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a292:	041b      	lsls	r3, r3, #16
 800a294:	4619      	mov	r1, r3
 800a296:	4610      	mov	r0, r2
 800a298:	f003 fa2a 	bl	800d6f0 <SDMMC_CmdSendCSD>
 800a29c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a6:	e05b      	b.n	800a360 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f003 f80c 	bl	800d2cc <SDIO_GetResponse>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2104      	movs	r1, #4
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f003 f803 	bl	800d2cc <SDIO_GetResponse>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2108      	movs	r1, #8
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f002 fffa 	bl	800d2cc <SDIO_GetResponse>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	210c      	movs	r1, #12
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f002 fff1 	bl	800d2cc <SDIO_GetResponse>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2104      	movs	r1, #4
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 ffe8 	bl	800d2cc <SDIO_GetResponse>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	0d1a      	lsrs	r2, r3, #20
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a304:	f107 0310 	add.w	r3, r7, #16
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fcd4 	bl	8009cb8 <HAL_SD_GetCardCSD>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a316:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a31a:	e021      	b.n	800a360 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6819      	ldr	r1, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a324:	041b      	lsls	r3, r3, #16
 800a326:	2200      	movs	r2, #0
 800a328:	461c      	mov	r4, r3
 800a32a:	4615      	mov	r5, r2
 800a32c:	4622      	mov	r2, r4
 800a32e:	462b      	mov	r3, r5
 800a330:	4608      	mov	r0, r1
 800a332:	f003 f8d7 	bl	800d4e4 <SDMMC_CmdSelDesel>
 800a336:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <SD_InitCard+0x176>
  {
    return errorstate;
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	e00e      	b.n	800a360 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681d      	ldr	r5, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	466c      	mov	r4, sp
 800a34a:	f103 0210 	add.w	r2, r3, #16
 800a34e:	ca07      	ldmia	r2, {r0, r1, r2}
 800a350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a354:	3304      	adds	r3, #4
 800a356:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a358:	4628      	mov	r0, r5
 800a35a:	f002 ff1b 	bl	800d194 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3740      	adds	r7, #64	@ 0x40
 800a364:	46bd      	mov	sp, r7
 800a366:	bdb0      	pop	{r4, r5, r7, pc}

0800a368 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a370:	2300      	movs	r3, #0
 800a372:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	2300      	movs	r3, #0
 800a37a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4618      	mov	r0, r3
 800a382:	f003 f8d2 	bl	800d52a <SDMMC_CmdGoIdleState>
 800a386:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	e072      	b.n	800a478 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f003 f8e5 	bl	800d566 <SDMMC_CmdOperCond>
 800a39c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00d      	beq.n	800a3c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f003 f8bb 	bl	800d52a <SDMMC_CmdGoIdleState>
 800a3b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d004      	beq.n	800a3c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	e05b      	b.n	800a478 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d137      	bne.n	800a43e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f003 f8e5 	bl	800d5a4 <SDMMC_CmdAppCommand>
 800a3da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d02d      	beq.n	800a43e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a3e6:	e047      	b.n	800a478 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f003 f8d8 	bl	800d5a4 <SDMMC_CmdAppCommand>
 800a3f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <SD_PowerON+0x98>
    {
      return errorstate;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	e03b      	b.n	800a478 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	491e      	ldr	r1, [pc, #120]	@ (800a480 <SD_PowerON+0x118>)
 800a406:	4618      	mov	r0, r3
 800a408:	f003 f8ee 	bl	800d5e8 <SDMMC_CmdAppOperCommand>
 800a40c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a414:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a418:	e02e      	b.n	800a478 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2100      	movs	r1, #0
 800a420:	4618      	mov	r0, r3
 800a422:	f002 ff53 	bl	800d2cc <SDIO_GetResponse>
 800a426:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	0fdb      	lsrs	r3, r3, #31
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d101      	bne.n	800a434 <SD_PowerON+0xcc>
 800a430:	2301      	movs	r3, #1
 800a432:	e000      	b.n	800a436 <SD_PowerON+0xce>
 800a434:	2300      	movs	r3, #0
 800a436:	613b      	str	r3, [r7, #16]

    count++;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a444:	4293      	cmp	r3, r2
 800a446:	d802      	bhi.n	800a44e <SD_PowerON+0xe6>
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0cc      	beq.n	800a3e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a454:	4293      	cmp	r3, r2
 800a456:	d902      	bls.n	800a45e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a458:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a45c:	e00c      	b.n	800a478 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	645a      	str	r2, [r3, #68]	@ 0x44
 800a46e:	e002      	b.n	800a476 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	c1100000 	.word	0xc1100000

0800a484 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a494:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a498:	e018      	b.n	800a4cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a2:	041b      	lsls	r3, r3, #16
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f003 f962 	bl	800d770 <SDMMC_CmdSendStatus>
 800a4ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	e009      	b.n	800a4cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f002 ff04 	bl	800d2cc <SDIO_GetResponse>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f002 feee 	bl	800d2cc <SDIO_GetResponse>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4fa:	d102      	bne.n	800a502 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a4fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a500:	e02f      	b.n	800a562 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a502:	f107 030c 	add.w	r3, r7, #12
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f879 	bl	800a600 <SD_FindSCR>
 800a50e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	e023      	b.n	800a562 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d01c      	beq.n	800a55e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a52c:	041b      	lsls	r3, r3, #16
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f003 f837 	bl	800d5a4 <SDMMC_CmdAppCommand>
 800a536:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d001      	beq.n	800a542 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	e00f      	b.n	800a562 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2102      	movs	r1, #2
 800a548:	4618      	mov	r0, r3
 800a54a:	f003 f870 	bl	800d62e <SDMMC_CmdBusWidth>
 800a54e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	e003      	b.n	800a562 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	e001      	b.n	800a562 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a55e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b086      	sub	sp, #24
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2100      	movs	r1, #0
 800a580:	4618      	mov	r0, r3
 800a582:	f002 fea3 	bl	800d2cc <SDIO_GetResponse>
 800a586:	4603      	mov	r3, r0
 800a588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a58c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a590:	d102      	bne.n	800a598 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a592:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a596:	e02f      	b.n	800a5f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a598:	f107 030c 	add.w	r3, r7, #12
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 f82e 	bl	800a600 <SD_FindSCR>
 800a5a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	e023      	b.n	800a5f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01c      	beq.n	800a5f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c2:	041b      	lsls	r3, r3, #16
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	f002 ffec 	bl	800d5a4 <SDMMC_CmdAppCommand>
 800a5cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	e00f      	b.n	800a5f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f003 f825 	bl	800d62e <SDMMC_CmdBusWidth>
 800a5e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	e003      	b.n	800a5f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e001      	b.n	800a5f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a600:	b590      	push	{r4, r7, lr}
 800a602:	b08f      	sub	sp, #60	@ 0x3c
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a60a:	f7f9 fe1b 	bl	8004244 <HAL_GetTick>
 800a60e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a614:	2300      	movs	r3, #0
 800a616:	60bb      	str	r3, [r7, #8]
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2108      	movs	r1, #8
 800a626:	4618      	mov	r0, r3
 800a628:	f002 fe8f 	bl	800d34a <SDMMC_CmdBlockLength>
 800a62c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	e0b9      	b.n	800a7ac <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a640:	041b      	lsls	r3, r3, #16
 800a642:	4619      	mov	r1, r3
 800a644:	4610      	mov	r0, r2
 800a646:	f002 ffad 	bl	800d5a4 <SDMMC_CmdAppCommand>
 800a64a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a654:	e0aa      	b.n	800a7ac <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a656:	f04f 33ff 	mov.w	r3, #4294967295
 800a65a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a65c:	2308      	movs	r3, #8
 800a65e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a660:	2330      	movs	r3, #48	@ 0x30
 800a662:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a664:	2302      	movs	r3, #2
 800a666:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a668:	2300      	movs	r3, #0
 800a66a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a66c:	2301      	movs	r3, #1
 800a66e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f107 0210 	add.w	r2, r7, #16
 800a678:	4611      	mov	r1, r2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f002 fe39 	bl	800d2f2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f002 fff4 	bl	800d672 <SDMMC_CmdSendSCR>
 800a68a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d02a      	beq.n	800a6e8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	e08a      	b.n	800a7ac <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a69c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00f      	beq.n	800a6c4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6819      	ldr	r1, [r3, #0]
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	f107 0208 	add.w	r2, r7, #8
 800a6b0:	18d4      	adds	r4, r2, r3
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	f002 fd99 	bl	800d1ea <SDIO_ReadFIFO>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	6023      	str	r3, [r4, #0]
      index++;
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6be:	3301      	adds	r3, #1
 800a6c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6c2:	e006      	b.n	800a6d2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d012      	beq.n	800a6f8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a6d2:	f7f9 fdb7 	bl	8004244 <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d102      	bne.n	800a6e8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6e6:	e061      	b.n	800a7ac <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6ee:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0cf      	beq.n	800a696 <SD_FindSCR+0x96>
 800a6f6:	e000      	b.n	800a6fa <SD_FindSCR+0xfa>
      break;
 800a6f8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <SD_FindSCR+0x116>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a70e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a712:	2b00      	cmp	r3, #0
 800a714:	d005      	beq.n	800a722 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2208      	movs	r2, #8
 800a71c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a71e:	2308      	movs	r3, #8
 800a720:	e044      	b.n	800a7ac <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a728:	f003 0302 	and.w	r3, r3, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2202      	movs	r2, #2
 800a736:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a738:	2302      	movs	r3, #2
 800a73a:	e037      	b.n	800a7ac <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a742:	f003 0320 	and.w	r3, r3, #32
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2220      	movs	r2, #32
 800a750:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a752:	2320      	movs	r3, #32
 800a754:	e02a      	b.n	800a7ac <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a75e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	061a      	lsls	r2, r3, #24
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	021b      	lsls	r3, r3, #8
 800a768:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a76c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	0a1b      	lsrs	r3, r3, #8
 800a772:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a776:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	0e1b      	lsrs	r3, r3, #24
 800a77c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a780:	601a      	str	r2, [r3, #0]
    scr++;
 800a782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a784:	3304      	adds	r3, #4
 800a786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	061a      	lsls	r2, r3, #24
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	021b      	lsls	r3, r3, #8
 800a790:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a794:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	0a1b      	lsrs	r3, r3, #8
 800a79a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a79e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	0e1b      	lsrs	r3, r3, #24
 800a7a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	373c      	adds	r7, #60	@ 0x3c
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd90      	pop	{r4, r7, pc}

0800a7b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e07b      	b.n	800a8be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d108      	bne.n	800a7e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7d6:	d009      	beq.n	800a7ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	61da      	str	r2, [r3, #28]
 800a7de:	e005      	b.n	800a7ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7f9 f94a 	bl	8003aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a822:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a834:	431a      	orrs	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a83e:	431a      	orrs	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	431a      	orrs	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	431a      	orrs	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a85c:	431a      	orrs	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a870:	ea42 0103 	orr.w	r1, r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a878:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	0c1b      	lsrs	r3, r3, #16
 800a88a:	f003 0104 	and.w	r1, r3, #4
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a892:	f003 0210 	and.w	r2, r3, #16
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	69da      	ldr	r2, [r3, #28]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a8ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	603b      	str	r3, [r7, #0]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d101      	bne.n	800a8e8 <HAL_SPI_Transmit+0x22>
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e12d      	b.n	800ab44 <HAL_SPI_Transmit+0x27e>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8f0:	f7f9 fca8 	bl	8004244 <HAL_GetTick>
 800a8f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b01      	cmp	r3, #1
 800a904:	d002      	beq.n	800a90c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a906:	2302      	movs	r3, #2
 800a908:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a90a:	e116      	b.n	800ab3a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <HAL_SPI_Transmit+0x52>
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a91c:	e10d      	b.n	800ab3a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2203      	movs	r2, #3
 800a922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	88fa      	ldrh	r2, [r7, #6]
 800a936:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	88fa      	ldrh	r2, [r7, #6]
 800a93c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a964:	d10f      	bne.n	800a986 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a990:	2b40      	cmp	r3, #64	@ 0x40
 800a992:	d007      	beq.n	800a9a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a9a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ac:	d14f      	bne.n	800aa4e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <HAL_SPI_Transmit+0xf6>
 800a9b6:	8afb      	ldrh	r3, [r7, #22]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d142      	bne.n	800aa42 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9c0:	881a      	ldrh	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9cc:	1c9a      	adds	r2, r3, #2
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a9e0:	e02f      	b.n	800aa42 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f003 0302 	and.w	r3, r3, #2
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d112      	bne.n	800aa16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f4:	881a      	ldrh	r2, [r3, #0]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa00:	1c9a      	adds	r2, r3, #2
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	86da      	strh	r2, [r3, #54]	@ 0x36
 800aa14:	e015      	b.n	800aa42 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa16:	f7f9 fc15 	bl	8004244 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d803      	bhi.n	800aa2e <HAL_SPI_Transmit+0x168>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2c:	d102      	bne.n	800aa34 <HAL_SPI_Transmit+0x16e>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d106      	bne.n	800aa42 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800aa40:	e07b      	b.n	800ab3a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1ca      	bne.n	800a9e2 <HAL_SPI_Transmit+0x11c>
 800aa4c:	e050      	b.n	800aaf0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <HAL_SPI_Transmit+0x196>
 800aa56:	8afb      	ldrh	r3, [r7, #22]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d144      	bne.n	800aae6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aa82:	e030      	b.n	800aae6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 0302 	and.w	r3, r3, #2
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d113      	bne.n	800aaba <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	7812      	ldrb	r2, [r2, #0]
 800aa9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800aab8:	e015      	b.n	800aae6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aaba:	f7f9 fbc3 	bl	8004244 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d803      	bhi.n	800aad2 <HAL_SPI_Transmit+0x20c>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad0:	d102      	bne.n	800aad8 <HAL_SPI_Transmit+0x212>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d106      	bne.n	800aae6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800aae4:	e029      	b.n	800ab3a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1c9      	bne.n	800aa84 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 fbdf 	bl	800b2b8 <SPI_EndRxTxTransaction>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2220      	movs	r2, #32
 800ab04:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10a      	bne.n	800ab24 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab0e:	2300      	movs	r3, #0
 800ab10:	613b      	str	r3, [r7, #16]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	613b      	str	r3, [r7, #16]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	77fb      	strb	r3, [r7, #31]
 800ab30:	e003      	b.n	800ab3a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ab42:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af02      	add	r7, sp, #8
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d002      	beq.n	800ab72 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ab70:	e0fb      	b.n	800ad6a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab7a:	d112      	bne.n	800aba2 <HAL_SPI_Receive+0x56>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10e      	bne.n	800aba2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2204      	movs	r2, #4
 800ab88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ab8c:	88fa      	ldrh	r2, [r7, #6]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	4613      	mov	r3, r2
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 f8ef 	bl	800ad7c <HAL_SPI_TransmitReceive>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	e0e8      	b.n	800ad74 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d101      	bne.n	800abb0 <HAL_SPI_Receive+0x64>
 800abac:	2302      	movs	r3, #2
 800abae:	e0e1      	b.n	800ad74 <HAL_SPI_Receive+0x228>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abb8:	f7f9 fb44 	bl	8004244 <HAL_GetTick>
 800abbc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <HAL_SPI_Receive+0x7e>
 800abc4:	88fb      	ldrh	r3, [r7, #6]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800abce:	e0cc      	b.n	800ad6a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2204      	movs	r2, #4
 800abd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	88fa      	ldrh	r2, [r7, #6]
 800abe8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	88fa      	ldrh	r2, [r7, #6]
 800abee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac16:	d10f      	bne.n	800ac38 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ac36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac42:	2b40      	cmp	r3, #64	@ 0x40
 800ac44:	d007      	beq.n	800ac56 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d16a      	bne.n	800ad34 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ac5e:	e032      	b.n	800acc6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d115      	bne.n	800ac9a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f103 020c 	add.w	r2, r3, #12
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7a:	7812      	ldrb	r2, [r2, #0]
 800ac7c:	b2d2      	uxtb	r2, r2
 800ac7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	3b01      	subs	r3, #1
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ac98:	e015      	b.n	800acc6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac9a:	f7f9 fad3 	bl	8004244 <HAL_GetTick>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	683a      	ldr	r2, [r7, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d803      	bhi.n	800acb2 <HAL_SPI_Receive+0x166>
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb0:	d102      	bne.n	800acb8 <HAL_SPI_Receive+0x16c>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d106      	bne.n	800acc6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800acb8:	2303      	movs	r3, #3
 800acba:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800acc4:	e051      	b.n	800ad6a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acca:	b29b      	uxth	r3, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1c7      	bne.n	800ac60 <HAL_SPI_Receive+0x114>
 800acd0:	e035      	b.n	800ad3e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d113      	bne.n	800ad08 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acea:	b292      	uxth	r2, r2
 800acec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf2:	1c9a      	adds	r2, r3, #2
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	3b01      	subs	r3, #1
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ad06:	e015      	b.n	800ad34 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad08:	f7f9 fa9c 	bl	8004244 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d803      	bhi.n	800ad20 <HAL_SPI_Receive+0x1d4>
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad1e:	d102      	bne.n	800ad26 <HAL_SPI_Receive+0x1da>
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800ad32:	e01a      	b.n	800ad6a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1c9      	bne.n	800acd2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 fa52 	bl	800b1ec <SPI_EndRxTransaction>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2220      	movs	r2, #32
 800ad52:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	75fb      	strb	r3, [r7, #23]
 800ad60:	e003      	b.n	800ad6a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3718      	adds	r7, #24
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08c      	sub	sp, #48	@ 0x30
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <HAL_SPI_TransmitReceive+0x26>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e198      	b.n	800b0d4 <HAL_SPI_TransmitReceive+0x358>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adaa:	f7f9 fa4b 	bl	8004244 <HAL_GetTick>
 800adae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800adb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800adc0:	887b      	ldrh	r3, [r7, #2]
 800adc2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800adc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d00f      	beq.n	800adec <HAL_SPI_TransmitReceive+0x70>
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800add2:	d107      	bne.n	800ade4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <HAL_SPI_TransmitReceive+0x68>
 800addc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d003      	beq.n	800adec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ade4:	2302      	movs	r3, #2
 800ade6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800adea:	e16d      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d005      	beq.n	800adfe <HAL_SPI_TransmitReceive+0x82>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <HAL_SPI_TransmitReceive+0x82>
 800adf8:	887b      	ldrh	r3, [r7, #2]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d103      	bne.n	800ae06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800ae04:	e160      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d003      	beq.n	800ae1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2205      	movs	r2, #5
 800ae16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	887a      	ldrh	r2, [r7, #2]
 800ae2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	887a      	ldrh	r2, [r7, #2]
 800ae30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	887a      	ldrh	r2, [r7, #2]
 800ae3c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	887a      	ldrh	r2, [r7, #2]
 800ae42:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae5a:	2b40      	cmp	r3, #64	@ 0x40
 800ae5c:	d007      	beq.n	800ae6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae76:	d17c      	bne.n	800af72 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <HAL_SPI_TransmitReceive+0x10a>
 800ae80:	8b7b      	ldrh	r3, [r7, #26]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d16a      	bne.n	800af5c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae8a:	881a      	ldrh	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae96:	1c9a      	adds	r2, r3, #2
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	3b01      	subs	r3, #1
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aeaa:	e057      	b.n	800af5c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d11b      	bne.n	800aef2 <HAL_SPI_TransmitReceive+0x176>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d016      	beq.n	800aef2 <HAL_SPI_TransmitReceive+0x176>
 800aec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d113      	bne.n	800aef2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aece:	881a      	ldrh	r2, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeda:	1c9a      	adds	r2, r3, #2
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	3b01      	subs	r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aeee:	2300      	movs	r3, #0
 800aef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d119      	bne.n	800af34 <HAL_SPI_TransmitReceive+0x1b8>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af04:	b29b      	uxth	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d014      	beq.n	800af34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68da      	ldr	r2, [r3, #12]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af14:	b292      	uxth	r2, r2
 800af16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af1c:	1c9a      	adds	r2, r3, #2
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af26:	b29b      	uxth	r3, r3
 800af28:	3b01      	subs	r3, #1
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af30:	2301      	movs	r3, #1
 800af32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800af34:	f7f9 f986 	bl	8004244 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af40:	429a      	cmp	r2, r3
 800af42:	d80b      	bhi.n	800af5c <HAL_SPI_TransmitReceive+0x1e0>
 800af44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d007      	beq.n	800af5c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800af5a:	e0b5      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af60:	b29b      	uxth	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1a2      	bne.n	800aeac <HAL_SPI_TransmitReceive+0x130>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d19d      	bne.n	800aeac <HAL_SPI_TransmitReceive+0x130>
 800af70:	e080      	b.n	800b074 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d002      	beq.n	800af80 <HAL_SPI_TransmitReceive+0x204>
 800af7a:	8b7b      	ldrh	r3, [r7, #26]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d16f      	bne.n	800b060 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	330c      	adds	r3, #12
 800af8a:	7812      	ldrb	r2, [r2, #0]
 800af8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afa6:	e05b      	b.n	800b060 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d11c      	bne.n	800aff0 <HAL_SPI_TransmitReceive+0x274>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afba:	b29b      	uxth	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d017      	beq.n	800aff0 <HAL_SPI_TransmitReceive+0x274>
 800afc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d114      	bne.n	800aff0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	330c      	adds	r3, #12
 800afd0:	7812      	ldrb	r2, [r2, #0]
 800afd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	3b01      	subs	r3, #1
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b01      	cmp	r3, #1
 800affc:	d119      	bne.n	800b032 <HAL_SPI_TransmitReceive+0x2b6>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b002:	b29b      	uxth	r3, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	d014      	beq.n	800b032 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b024:	b29b      	uxth	r3, r3
 800b026:	3b01      	subs	r3, #1
 800b028:	b29a      	uxth	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b02e:	2301      	movs	r3, #1
 800b030:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b032:	f7f9 f907 	bl	8004244 <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b03e:	429a      	cmp	r2, r3
 800b040:	d803      	bhi.n	800b04a <HAL_SPI_TransmitReceive+0x2ce>
 800b042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b048:	d102      	bne.n	800b050 <HAL_SPI_TransmitReceive+0x2d4>
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d107      	bne.n	800b060 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800b05e:	e033      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b064:	b29b      	uxth	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d19e      	bne.n	800afa8 <HAL_SPI_TransmitReceive+0x22c>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b06e:	b29b      	uxth	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d199      	bne.n	800afa8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b076:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 f91d 	bl	800b2b8 <SPI_EndRxTxTransaction>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d006      	beq.n	800b092 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800b090:	e01a      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b09a:	2300      	movs	r3, #0
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	617b      	str	r3, [r7, #20]
 800b0ae:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b0be:	e003      	b.n	800b0c8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b0d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3730      	adds	r7, #48	@ 0x30
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b0ec:	f7f9 f8aa 	bl	8004244 <HAL_GetTick>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f4:	1a9b      	subs	r3, r3, r2
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b0fc:	f7f9 f8a2 	bl	8004244 <HAL_GetTick>
 800b100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b102:	4b39      	ldr	r3, [pc, #228]	@ (800b1e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	015b      	lsls	r3, r3, #5
 800b108:	0d1b      	lsrs	r3, r3, #20
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	fb02 f303 	mul.w	r3, r2, r3
 800b110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b112:	e054      	b.n	800b1be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11a:	d050      	beq.n	800b1be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b11c:	f7f9 f892 	bl	8004244 <HAL_GetTick>
 800b120:	4602      	mov	r2, r0
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	69fa      	ldr	r2, [r7, #28]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d902      	bls.n	800b132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d13d      	bne.n	800b1ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b14a:	d111      	bne.n	800b170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b154:	d004      	beq.n	800b160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b15e:	d107      	bne.n	800b170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b16e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b178:	d10f      	bne.n	800b19a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e017      	b.n	800b1de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	bf0c      	ite	eq
 800b1ce:	2301      	moveq	r3, #1
 800b1d0:	2300      	movne	r3, #0
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d19b      	bne.n	800b114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3720      	adds	r7, #32
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000008 	.word	0x20000008

0800b1ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b200:	d111      	bne.n	800b226 <SPI_EndRxTransaction+0x3a>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b20a:	d004      	beq.n	800b216 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b214:	d107      	bne.n	800b226 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b224:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b22e:	d12a      	bne.n	800b286 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b238:	d012      	beq.n	800b260 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2200      	movs	r2, #0
 800b242:	2180      	movs	r1, #128	@ 0x80
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff ff49 	bl	800b0dc <SPI_WaitFlagStateUntilTimeout>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d02d      	beq.n	800b2ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b254:	f043 0220 	orr.w	r2, r3, #32
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e026      	b.n	800b2ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2200      	movs	r2, #0
 800b268:	2101      	movs	r1, #1
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff ff36 	bl	800b0dc <SPI_WaitFlagStateUntilTimeout>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d01a      	beq.n	800b2ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27a:	f043 0220 	orr.w	r2, r3, #32
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e013      	b.n	800b2ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2200      	movs	r2, #0
 800b28e:	2101      	movs	r1, #1
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff ff23 	bl	800b0dc <SPI_WaitFlagStateUntilTimeout>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d007      	beq.n	800b2ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2a0:	f043 0220 	orr.w	r2, r3, #32
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e000      	b.n	800b2ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	2102      	movs	r1, #2
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f7ff ff04 	bl	800b0dc <SPI_WaitFlagStateUntilTimeout>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d007      	beq.n	800b2ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2de:	f043 0220 	orr.w	r2, r3, #32
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e032      	b.n	800b350 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b2ea:	4b1b      	ldr	r3, [pc, #108]	@ (800b358 <SPI_EndRxTxTransaction+0xa0>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b35c <SPI_EndRxTxTransaction+0xa4>)
 800b2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f4:	0d5b      	lsrs	r3, r3, #21
 800b2f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2fa:	fb02 f303 	mul.w	r3, r2, r3
 800b2fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b308:	d112      	bne.n	800b330 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2200      	movs	r2, #0
 800b312:	2180      	movs	r1, #128	@ 0x80
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f7ff fee1 	bl	800b0dc <SPI_WaitFlagStateUntilTimeout>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d016      	beq.n	800b34e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b324:	f043 0220 	orr.w	r2, r3, #32
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e00f      	b.n	800b350 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	3b01      	subs	r3, #1
 800b33a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b346:	2b80      	cmp	r3, #128	@ 0x80
 800b348:	d0f2      	beq.n	800b330 <SPI_EndRxTxTransaction+0x78>
 800b34a:	e000      	b.n	800b34e <SPI_EndRxTxTransaction+0x96>
        break;
 800b34c:	bf00      	nop
  }

  return HAL_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	20000008 	.word	0x20000008
 800b35c:	165e9f81 	.word	0x165e9f81

0800b360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e041      	b.n	800b3f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7f8 fc5a 	bl	8003c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2202      	movs	r2, #2
 800b390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f000 fb90 	bl	800bac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
	...

0800b400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b01      	cmp	r3, #1
 800b412:	d001      	beq.n	800b418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e04e      	b.n	800b4b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f042 0201 	orr.w	r2, r2, #1
 800b42e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a23      	ldr	r2, [pc, #140]	@ (800b4c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d022      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b442:	d01d      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a1f      	ldr	r2, [pc, #124]	@ (800b4c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d018      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a1e      	ldr	r2, [pc, #120]	@ (800b4cc <HAL_TIM_Base_Start_IT+0xcc>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d013      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00e      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a1b      	ldr	r2, [pc, #108]	@ (800b4d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d009      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a19      	ldr	r2, [pc, #100]	@ (800b4d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d004      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x80>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a18      	ldr	r2, [pc, #96]	@ (800b4dc <HAL_TIM_Base_Start_IT+0xdc>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d111      	bne.n	800b4a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b06      	cmp	r3, #6
 800b490:	d010      	beq.n	800b4b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f042 0201 	orr.w	r2, r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a2:	e007      	b.n	800b4b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	40010000 	.word	0x40010000
 800b4c8:	40000400 	.word	0x40000400
 800b4cc:	40000800 	.word	0x40000800
 800b4d0:	40000c00 	.word	0x40000c00
 800b4d4:	40010400 	.word	0x40010400
 800b4d8:	40014000 	.word	0x40014000
 800b4dc:	40001800 	.word	0x40001800

0800b4e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e041      	b.n	800b576 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d106      	bne.n	800b50c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f7f8 fb78 	bl	8003bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2202      	movs	r2, #2
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f000 fad0 	bl	800bac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d109      	bne.n	800b5a4 <HAL_TIM_PWM_Start+0x24>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	bf14      	ite	ne
 800b59c:	2301      	movne	r3, #1
 800b59e:	2300      	moveq	r3, #0
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	e022      	b.n	800b5ea <HAL_TIM_PWM_Start+0x6a>
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	d109      	bne.n	800b5be <HAL_TIM_PWM_Start+0x3e>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	bf14      	ite	ne
 800b5b6:	2301      	movne	r3, #1
 800b5b8:	2300      	moveq	r3, #0
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	e015      	b.n	800b5ea <HAL_TIM_PWM_Start+0x6a>
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d109      	bne.n	800b5d8 <HAL_TIM_PWM_Start+0x58>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	bf14      	ite	ne
 800b5d0:	2301      	movne	r3, #1
 800b5d2:	2300      	moveq	r3, #0
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	e008      	b.n	800b5ea <HAL_TIM_PWM_Start+0x6a>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	bf14      	ite	ne
 800b5e4:	2301      	movne	r3, #1
 800b5e6:	2300      	moveq	r3, #0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e07c      	b.n	800b6ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <HAL_TIM_PWM_Start+0x82>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b600:	e013      	b.n	800b62a <HAL_TIM_PWM_Start+0xaa>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b04      	cmp	r3, #4
 800b606:	d104      	bne.n	800b612 <HAL_TIM_PWM_Start+0x92>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2202      	movs	r2, #2
 800b60c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b610:	e00b      	b.n	800b62a <HAL_TIM_PWM_Start+0xaa>
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b08      	cmp	r3, #8
 800b616:	d104      	bne.n	800b622 <HAL_TIM_PWM_Start+0xa2>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2202      	movs	r2, #2
 800b61c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b620:	e003      	b.n	800b62a <HAL_TIM_PWM_Start+0xaa>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2202      	movs	r2, #2
 800b626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2201      	movs	r2, #1
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	4618      	mov	r0, r3
 800b634:	f000 fca2 	bl	800bf7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a2d      	ldr	r2, [pc, #180]	@ (800b6f4 <HAL_TIM_PWM_Start+0x174>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d004      	beq.n	800b64c <HAL_TIM_PWM_Start+0xcc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a2c      	ldr	r2, [pc, #176]	@ (800b6f8 <HAL_TIM_PWM_Start+0x178>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d101      	bne.n	800b650 <HAL_TIM_PWM_Start+0xd0>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e000      	b.n	800b652 <HAL_TIM_PWM_Start+0xd2>
 800b650:	2300      	movs	r3, #0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d007      	beq.n	800b666 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b664:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a22      	ldr	r2, [pc, #136]	@ (800b6f4 <HAL_TIM_PWM_Start+0x174>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d022      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b678:	d01d      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6fc <HAL_TIM_PWM_Start+0x17c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d018      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1d      	ldr	r2, [pc, #116]	@ (800b700 <HAL_TIM_PWM_Start+0x180>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d013      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a1c      	ldr	r2, [pc, #112]	@ (800b704 <HAL_TIM_PWM_Start+0x184>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d00e      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a16      	ldr	r2, [pc, #88]	@ (800b6f8 <HAL_TIM_PWM_Start+0x178>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d009      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a18      	ldr	r2, [pc, #96]	@ (800b708 <HAL_TIM_PWM_Start+0x188>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d004      	beq.n	800b6b6 <HAL_TIM_PWM_Start+0x136>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a16      	ldr	r2, [pc, #88]	@ (800b70c <HAL_TIM_PWM_Start+0x18c>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d111      	bne.n	800b6da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f003 0307 	and.w	r3, r3, #7
 800b6c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2b06      	cmp	r3, #6
 800b6c6:	d010      	beq.n	800b6ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f042 0201 	orr.w	r2, r2, #1
 800b6d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6d8:	e007      	b.n	800b6ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f042 0201 	orr.w	r2, r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	40010000 	.word	0x40010000
 800b6f8:	40010400 	.word	0x40010400
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00
 800b708:	40014000 	.word	0x40014000
 800b70c:	40001800 	.word	0x40001800

0800b710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f003 0302 	and.w	r3, r3, #2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d020      	beq.n	800b774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01b      	beq.n	800b774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f06f 0202 	mvn.w	r2, #2
 800b744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f994 	bl	800ba88 <HAL_TIM_IC_CaptureCallback>
 800b760:	e005      	b.n	800b76e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f986 	bl	800ba74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f997 	bl	800ba9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d020      	beq.n	800b7c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f003 0304 	and.w	r3, r3, #4
 800b784:	2b00      	cmp	r3, #0
 800b786:	d01b      	beq.n	800b7c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f06f 0204 	mvn.w	r2, #4
 800b790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2202      	movs	r2, #2
 800b796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f96e 	bl	800ba88 <HAL_TIM_IC_CaptureCallback>
 800b7ac:	e005      	b.n	800b7ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f960 	bl	800ba74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f971 	bl	800ba9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f003 0308 	and.w	r3, r3, #8
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d020      	beq.n	800b80c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d01b      	beq.n	800b80c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f06f 0208 	mvn.w	r2, #8
 800b7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2204      	movs	r2, #4
 800b7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d003      	beq.n	800b7fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 f948 	bl	800ba88 <HAL_TIM_IC_CaptureCallback>
 800b7f8:	e005      	b.n	800b806 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f93a 	bl	800ba74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f94b 	bl	800ba9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f003 0310 	and.w	r3, r3, #16
 800b812:	2b00      	cmp	r3, #0
 800b814:	d020      	beq.n	800b858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 0310 	and.w	r3, r3, #16
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01b      	beq.n	800b858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f06f 0210 	mvn.w	r2, #16
 800b828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2208      	movs	r2, #8
 800b82e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f922 	bl	800ba88 <HAL_TIM_IC_CaptureCallback>
 800b844:	e005      	b.n	800b852 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f914 	bl	800ba74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f925 	bl	800ba9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00c      	beq.n	800b87c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f003 0301 	and.w	r3, r3, #1
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d007      	beq.n	800b87c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f06f 0201 	mvn.w	r2, #1
 800b874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7f5 fec8 	bl	800160c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00c      	beq.n	800b8a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d007      	beq.n	800b8a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fc1a 	bl	800c0d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00c      	beq.n	800b8c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d007      	beq.n	800b8c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b8bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f8f6 	bl	800bab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00c      	beq.n	800b8e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f003 0320 	and.w	r3, r3, #32
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d007      	beq.n	800b8e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f06f 0220 	mvn.w	r2, #32
 800b8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fbec 	bl	800c0c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8e8:	bf00      	nop
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b906:	2b01      	cmp	r3, #1
 800b908:	d101      	bne.n	800b90e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b90a:	2302      	movs	r3, #2
 800b90c:	e0ae      	b.n	800ba6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b0c      	cmp	r3, #12
 800b91a:	f200 809f 	bhi.w	800ba5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b91e:	a201      	add	r2, pc, #4	@ (adr r2, 800b924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b959 	.word	0x0800b959
 800b928:	0800ba5d 	.word	0x0800ba5d
 800b92c:	0800ba5d 	.word	0x0800ba5d
 800b930:	0800ba5d 	.word	0x0800ba5d
 800b934:	0800b999 	.word	0x0800b999
 800b938:	0800ba5d 	.word	0x0800ba5d
 800b93c:	0800ba5d 	.word	0x0800ba5d
 800b940:	0800ba5d 	.word	0x0800ba5d
 800b944:	0800b9db 	.word	0x0800b9db
 800b948:	0800ba5d 	.word	0x0800ba5d
 800b94c:	0800ba5d 	.word	0x0800ba5d
 800b950:	0800ba5d 	.word	0x0800ba5d
 800b954:	0800ba1b 	.word	0x0800ba1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68b9      	ldr	r1, [r7, #8]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 f95c 	bl	800bc1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 0208 	orr.w	r2, r2, #8
 800b972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	699a      	ldr	r2, [r3, #24]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0204 	bic.w	r2, r2, #4
 800b982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6999      	ldr	r1, [r3, #24]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	691a      	ldr	r2, [r3, #16]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	430a      	orrs	r2, r1
 800b994:	619a      	str	r2, [r3, #24]
      break;
 800b996:	e064      	b.n	800ba62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68b9      	ldr	r1, [r7, #8]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f9ac 	bl	800bcfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	699a      	ldr	r2, [r3, #24]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	699a      	ldr	r2, [r3, #24]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6999      	ldr	r1, [r3, #24]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	021a      	lsls	r2, r3, #8
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	619a      	str	r2, [r3, #24]
      break;
 800b9d8:	e043      	b.n	800ba62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 fa01 	bl	800bde8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	69da      	ldr	r2, [r3, #28]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f042 0208 	orr.w	r2, r2, #8
 800b9f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69da      	ldr	r2, [r3, #28]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f022 0204 	bic.w	r2, r2, #4
 800ba04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	69d9      	ldr	r1, [r3, #28]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	430a      	orrs	r2, r1
 800ba16:	61da      	str	r2, [r3, #28]
      break;
 800ba18:	e023      	b.n	800ba62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 fa55 	bl	800bed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69da      	ldr	r2, [r3, #28]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69da      	ldr	r2, [r3, #28]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	69d9      	ldr	r1, [r3, #28]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	021a      	lsls	r2, r3, #8
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	61da      	str	r2, [r3, #28]
      break;
 800ba5a:	e002      	b.n	800ba62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba7c:	bf00      	nop
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a46      	ldr	r2, [pc, #280]	@ (800bbf0 <TIM_Base_SetConfig+0x12c>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d013      	beq.n	800bb04 <TIM_Base_SetConfig+0x40>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bae2:	d00f      	beq.n	800bb04 <TIM_Base_SetConfig+0x40>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a43      	ldr	r2, [pc, #268]	@ (800bbf4 <TIM_Base_SetConfig+0x130>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d00b      	beq.n	800bb04 <TIM_Base_SetConfig+0x40>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a42      	ldr	r2, [pc, #264]	@ (800bbf8 <TIM_Base_SetConfig+0x134>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d007      	beq.n	800bb04 <TIM_Base_SetConfig+0x40>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4a41      	ldr	r2, [pc, #260]	@ (800bbfc <TIM_Base_SetConfig+0x138>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d003      	beq.n	800bb04 <TIM_Base_SetConfig+0x40>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a40      	ldr	r2, [pc, #256]	@ (800bc00 <TIM_Base_SetConfig+0x13c>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d108      	bne.n	800bb16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a35      	ldr	r2, [pc, #212]	@ (800bbf0 <TIM_Base_SetConfig+0x12c>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d02b      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb24:	d027      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a32      	ldr	r2, [pc, #200]	@ (800bbf4 <TIM_Base_SetConfig+0x130>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d023      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a31      	ldr	r2, [pc, #196]	@ (800bbf8 <TIM_Base_SetConfig+0x134>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d01f      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4a30      	ldr	r2, [pc, #192]	@ (800bbfc <TIM_Base_SetConfig+0x138>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d01b      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4a2f      	ldr	r2, [pc, #188]	@ (800bc00 <TIM_Base_SetConfig+0x13c>)
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d017      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	4a2e      	ldr	r2, [pc, #184]	@ (800bc04 <TIM_Base_SetConfig+0x140>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d013      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a2d      	ldr	r2, [pc, #180]	@ (800bc08 <TIM_Base_SetConfig+0x144>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d00f      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4a2c      	ldr	r2, [pc, #176]	@ (800bc0c <TIM_Base_SetConfig+0x148>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d00b      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4a2b      	ldr	r2, [pc, #172]	@ (800bc10 <TIM_Base_SetConfig+0x14c>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d007      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4a2a      	ldr	r2, [pc, #168]	@ (800bc14 <TIM_Base_SetConfig+0x150>)
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d003      	beq.n	800bb76 <TIM_Base_SetConfig+0xb2>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a29      	ldr	r2, [pc, #164]	@ (800bc18 <TIM_Base_SetConfig+0x154>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d108      	bne.n	800bb88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689a      	ldr	r2, [r3, #8]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a10      	ldr	r2, [pc, #64]	@ (800bbf0 <TIM_Base_SetConfig+0x12c>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d003      	beq.n	800bbbc <TIM_Base_SetConfig+0xf8>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a12      	ldr	r2, [pc, #72]	@ (800bc00 <TIM_Base_SetConfig+0x13c>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d103      	bne.n	800bbc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	691a      	ldr	r2, [r3, #16]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d105      	bne.n	800bbe2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	f023 0201 	bic.w	r2, r3, #1
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	611a      	str	r2, [r3, #16]
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	40010000 	.word	0x40010000
 800bbf4:	40000400 	.word	0x40000400
 800bbf8:	40000800 	.word	0x40000800
 800bbfc:	40000c00 	.word	0x40000c00
 800bc00:	40010400 	.word	0x40010400
 800bc04:	40014000 	.word	0x40014000
 800bc08:	40014400 	.word	0x40014400
 800bc0c:	40014800 	.word	0x40014800
 800bc10:	40001800 	.word	0x40001800
 800bc14:	40001c00 	.word	0x40001c00
 800bc18:	40002000 	.word	0x40002000

0800bc1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	f023 0201 	bic.w	r2, r3, #1
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f023 0303 	bic.w	r3, r3, #3
 800bc52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f023 0302 	bic.w	r3, r3, #2
 800bc64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a20      	ldr	r2, [pc, #128]	@ (800bcf4 <TIM_OC1_SetConfig+0xd8>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d003      	beq.n	800bc80 <TIM_OC1_SetConfig+0x64>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a1f      	ldr	r2, [pc, #124]	@ (800bcf8 <TIM_OC1_SetConfig+0xdc>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d10c      	bne.n	800bc9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	f023 0308 	bic.w	r3, r3, #8
 800bc86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f023 0304 	bic.w	r3, r3, #4
 800bc98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a15      	ldr	r2, [pc, #84]	@ (800bcf4 <TIM_OC1_SetConfig+0xd8>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d003      	beq.n	800bcaa <TIM_OC1_SetConfig+0x8e>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a14      	ldr	r2, [pc, #80]	@ (800bcf8 <TIM_OC1_SetConfig+0xdc>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d111      	bne.n	800bcce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bcb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	621a      	str	r2, [r3, #32]
}
 800bce8:	bf00      	nop
 800bcea:	371c      	adds	r7, #28
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	40010000 	.word	0x40010000
 800bcf8:	40010400 	.word	0x40010400

0800bcfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	f023 0210 	bic.w	r2, r3, #16
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	021b      	lsls	r3, r3, #8
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f023 0320 	bic.w	r3, r3, #32
 800bd46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	011b      	lsls	r3, r3, #4
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a22      	ldr	r2, [pc, #136]	@ (800bde0 <TIM_OC2_SetConfig+0xe4>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d003      	beq.n	800bd64 <TIM_OC2_SetConfig+0x68>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a21      	ldr	r2, [pc, #132]	@ (800bde4 <TIM_OC2_SetConfig+0xe8>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d10d      	bne.n	800bd80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	011b      	lsls	r3, r3, #4
 800bd72:	697a      	ldr	r2, [r7, #20]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a17      	ldr	r2, [pc, #92]	@ (800bde0 <TIM_OC2_SetConfig+0xe4>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d003      	beq.n	800bd90 <TIM_OC2_SetConfig+0x94>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a16      	ldr	r2, [pc, #88]	@ (800bde4 <TIM_OC2_SetConfig+0xe8>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d113      	bne.n	800bdb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	621a      	str	r2, [r3, #32]
}
 800bdd2:	bf00      	nop
 800bdd4:	371c      	adds	r7, #28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	40010000 	.word	0x40010000
 800bde4:	40010400 	.word	0x40010400

0800bde8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	021b      	lsls	r3, r3, #8
 800be38:	697a      	ldr	r2, [r7, #20]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a21      	ldr	r2, [pc, #132]	@ (800bec8 <TIM_OC3_SetConfig+0xe0>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d003      	beq.n	800be4e <TIM_OC3_SetConfig+0x66>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a20      	ldr	r2, [pc, #128]	@ (800becc <TIM_OC3_SetConfig+0xe4>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d10d      	bne.n	800be6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4313      	orrs	r3, r2
 800be60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a16      	ldr	r2, [pc, #88]	@ (800bec8 <TIM_OC3_SetConfig+0xe0>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d003      	beq.n	800be7a <TIM_OC3_SetConfig+0x92>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a15      	ldr	r2, [pc, #84]	@ (800becc <TIM_OC3_SetConfig+0xe4>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d113      	bne.n	800bea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	011b      	lsls	r3, r3, #4
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	4313      	orrs	r3, r2
 800be94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	621a      	str	r2, [r3, #32]
}
 800bebc:	bf00      	nop
 800bebe:	371c      	adds	r7, #28
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr
 800bec8:	40010000 	.word	0x40010000
 800becc:	40010400 	.word	0x40010400

0800bed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800befe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	021b      	lsls	r3, r3, #8
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	031b      	lsls	r3, r3, #12
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a12      	ldr	r2, [pc, #72]	@ (800bf74 <TIM_OC4_SetConfig+0xa4>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d003      	beq.n	800bf38 <TIM_OC4_SetConfig+0x68>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a11      	ldr	r2, [pc, #68]	@ (800bf78 <TIM_OC4_SetConfig+0xa8>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d109      	bne.n	800bf4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	019b      	lsls	r3, r3, #6
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685a      	ldr	r2, [r3, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	621a      	str	r2, [r3, #32]
}
 800bf66:	bf00      	nop
 800bf68:	371c      	adds	r7, #28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	40010000 	.word	0x40010000
 800bf78:	40010400 	.word	0x40010400

0800bf7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b087      	sub	sp, #28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f003 031f 	and.w	r3, r3, #31
 800bf8e:	2201      	movs	r2, #1
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6a1a      	ldr	r2, [r3, #32]
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	43db      	mvns	r3, r3
 800bf9e:	401a      	ands	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6a1a      	ldr	r2, [r3, #32]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f003 031f 	and.w	r3, r3, #31
 800bfae:	6879      	ldr	r1, [r7, #4]
 800bfb0:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	621a      	str	r2, [r3, #32]
}
 800bfba:	bf00      	nop
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
	...

0800bfc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d101      	bne.n	800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfdc:	2302      	movs	r3, #2
 800bfde:	e05a      	b.n	800c096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2202      	movs	r2, #2
 800bfec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a21      	ldr	r2, [pc, #132]	@ (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d022      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c02c:	d01d      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a1d      	ldr	r2, [pc, #116]	@ (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d018      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a1b      	ldr	r2, [pc, #108]	@ (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d013      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a1a      	ldr	r2, [pc, #104]	@ (800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d00e      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a18      	ldr	r2, [pc, #96]	@ (800c0b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d009      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a17      	ldr	r2, [pc, #92]	@ (800c0b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d004      	beq.n	800c06a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a15      	ldr	r2, [pc, #84]	@ (800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d10c      	bne.n	800c084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	4313      	orrs	r3, r2
 800c07a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	40010000 	.word	0x40010000
 800c0a8:	40000400 	.word	0x40000400
 800c0ac:	40000800 	.word	0x40000800
 800c0b0:	40000c00 	.word	0x40000c00
 800c0b4:	40010400 	.word	0x40010400
 800c0b8:	40014000 	.word	0x40014000
 800c0bc:	40001800 	.word	0x40001800

0800c0c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e042      	b.n	800c180 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f7 fdf2 	bl	8003cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2224      	movs	r2, #36	@ 0x24
 800c118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68da      	ldr	r2, [r3, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c12a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fdbd 	bl	800ccac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	691a      	ldr	r2, [r3, #16]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	695a      	ldr	r2, [r3, #20]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68da      	ldr	r2, [r3, #12]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2220      	movs	r2, #32
 800c174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08a      	sub	sp, #40	@ 0x28
 800c18c:	af02      	add	r7, sp, #8
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	4613      	mov	r3, r2
 800c196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d175      	bne.n	800c294 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <HAL_UART_Transmit+0x2c>
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e06e      	b.n	800c296 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2221      	movs	r2, #33	@ 0x21
 800c1c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c1c6:	f7f8 f83d 	bl	8004244 <HAL_GetTick>
 800c1ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	88fa      	ldrh	r2, [r7, #6]
 800c1d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	88fa      	ldrh	r2, [r7, #6]
 800c1d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1e0:	d108      	bne.n	800c1f4 <HAL_UART_Transmit+0x6c>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	61bb      	str	r3, [r7, #24]
 800c1f2:	e003      	b.n	800c1fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c1fc:	e02e      	b.n	800c25c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2200      	movs	r2, #0
 800c206:	2180      	movs	r1, #128	@ 0x80
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f000 fb1f 	bl	800c84c <UART_WaitOnFlagUntilTimeout>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2220      	movs	r2, #32
 800c218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c21c:	2303      	movs	r3, #3
 800c21e:	e03a      	b.n	800c296 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10b      	bne.n	800c23e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	3302      	adds	r3, #2
 800c23a:	61bb      	str	r3, [r7, #24]
 800c23c:	e007      	b.n	800c24e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	781a      	ldrb	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	3301      	adds	r3, #1
 800c24c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c252:	b29b      	uxth	r3, r3
 800c254:	3b01      	subs	r3, #1
 800c256:	b29a      	uxth	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1cb      	bne.n	800c1fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	2200      	movs	r2, #0
 800c26e:	2140      	movs	r1, #64	@ 0x40
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 faeb 	bl	800c84c <UART_WaitOnFlagUntilTimeout>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2220      	movs	r2, #32
 800c280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c284:	2303      	movs	r3, #3
 800c286:	e006      	b.n	800c296 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2220      	movs	r2, #32
 800c28c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	e000      	b.n	800c296 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c294:	2302      	movs	r3, #2
  }
}
 800c296:	4618      	mov	r0, r3
 800c298:	3720      	adds	r7, #32
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	d112      	bne.n	800c2de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <HAL_UART_Receive_IT+0x26>
 800c2be:	88fb      	ldrh	r3, [r7, #6]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e00b      	b.n	800c2e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c2ce:	88fb      	ldrh	r3, [r7, #6]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 fb12 	bl	800c8fe <UART_Start_Receive_IT>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	e000      	b.n	800c2e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c2de:	2302      	movs	r3, #2
  }
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b0ba      	sub	sp, #232	@ 0xe8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c30e:	2300      	movs	r3, #0
 800c310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c314:	2300      	movs	r3, #0
 800c316:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c31e:	f003 030f 	and.w	r3, r3, #15
 800c322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10f      	bne.n	800c34e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c332:	f003 0320 	and.w	r3, r3, #32
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <HAL_UART_IRQHandler+0x66>
 800c33a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c33e:	f003 0320 	and.w	r3, r3, #32
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fbf2 	bl	800cb30 <UART_Receive_IT>
      return;
 800c34c:	e25b      	b.n	800c806 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c34e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 80de 	beq.w	800c514 <HAL_UART_IRQHandler+0x22c>
 800c358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c35c:	f003 0301 	and.w	r3, r3, #1
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c368:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 80d1 	beq.w	800c514 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <HAL_UART_IRQHandler+0xae>
 800c37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c386:	2b00      	cmp	r3, #0
 800c388:	d005      	beq.n	800c396 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c38e:	f043 0201 	orr.w	r2, r3, #1
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c39a:	f003 0304 	and.w	r3, r3, #4
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00b      	beq.n	800c3ba <HAL_UART_IRQHandler+0xd2>
 800c3a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d005      	beq.n	800c3ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3b2:	f043 0202 	orr.w	r2, r3, #2
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3be:	f003 0302 	and.w	r3, r3, #2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00b      	beq.n	800c3de <HAL_UART_IRQHandler+0xf6>
 800c3c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d005      	beq.n	800c3de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3d6:	f043 0204 	orr.w	r2, r3, #4
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d011      	beq.n	800c40e <HAL_UART_IRQHandler+0x126>
 800c3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3ee:	f003 0320 	and.w	r3, r3, #32
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d105      	bne.n	800c402 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d005      	beq.n	800c40e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c406:	f043 0208 	orr.w	r2, r3, #8
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c412:	2b00      	cmp	r3, #0
 800c414:	f000 81f2 	beq.w	800c7fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c41c:	f003 0320 	and.w	r3, r3, #32
 800c420:	2b00      	cmp	r3, #0
 800c422:	d008      	beq.n	800c436 <HAL_UART_IRQHandler+0x14e>
 800c424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c428:	f003 0320 	and.w	r3, r3, #32
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fb7d 	bl	800cb30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c440:	2b40      	cmp	r3, #64	@ 0x40
 800c442:	bf0c      	ite	eq
 800c444:	2301      	moveq	r3, #1
 800c446:	2300      	movne	r3, #0
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c452:	f003 0308 	and.w	r3, r3, #8
 800c456:	2b00      	cmp	r3, #0
 800c458:	d103      	bne.n	800c462 <HAL_UART_IRQHandler+0x17a>
 800c45a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d04f      	beq.n	800c502 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fa85 	bl	800c972 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c472:	2b40      	cmp	r3, #64	@ 0x40
 800c474:	d141      	bne.n	800c4fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3314      	adds	r3, #20
 800c47c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c480:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c484:	e853 3f00 	ldrex	r3, [r3]
 800c488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3314      	adds	r3, #20
 800c49e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c4a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c4a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c4ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c4b2:	e841 2300 	strex	r3, r2, [r1]
 800c4b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c4ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1d9      	bne.n	800c476 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d013      	beq.n	800c4f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4ce:	4a7e      	ldr	r2, [pc, #504]	@ (800c6c8 <HAL_UART_IRQHandler+0x3e0>)
 800c4d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7f9 f89c 	bl	8005614 <HAL_DMA_Abort_IT>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d016      	beq.n	800c510 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c4ec:	4610      	mov	r0, r2
 800c4ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f0:	e00e      	b.n	800c510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f994 	bl	800c820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f8:	e00a      	b.n	800c510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f990 	bl	800c820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c500:	e006      	b.n	800c510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f98c 	bl	800c820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c50e:	e175      	b.n	800c7fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c510:	bf00      	nop
    return;
 800c512:	e173      	b.n	800c7fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c518:	2b01      	cmp	r3, #1
 800c51a:	f040 814f 	bne.w	800c7bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c522:	f003 0310 	and.w	r3, r3, #16
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 8148 	beq.w	800c7bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c530:	f003 0310 	and.w	r3, r3, #16
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 8141 	beq.w	800c7bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c53a:	2300      	movs	r3, #0
 800c53c:	60bb      	str	r3, [r7, #8]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60bb      	str	r3, [r7, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	60bb      	str	r3, [r7, #8]
 800c54e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c55a:	2b40      	cmp	r3, #64	@ 0x40
 800c55c:	f040 80b6 	bne.w	800c6cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c56c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 8145 	beq.w	800c800 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c57a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c57e:	429a      	cmp	r2, r3
 800c580:	f080 813e 	bcs.w	800c800 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c58a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c596:	f000 8088 	beq.w	800c6aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	330c      	adds	r3, #12
 800c5a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5a8:	e853 3f00 	ldrex	r3, [r3]
 800c5ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c5b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	330c      	adds	r3, #12
 800c5c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c5c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c5ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c5d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5d6:	e841 2300 	strex	r3, r2, [r1]
 800c5da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1d9      	bne.n	800c59a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3314      	adds	r3, #20
 800c606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c60a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c60e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c610:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c612:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c61c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e1      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	3314      	adds	r3, #20
 800c628:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c638:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3314      	adds	r3, #20
 800c642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c646:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c648:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c64c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c64e:	e841 2300 	strex	r3, r2, [r1]
 800c652:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c654:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e3      	bne.n	800c622 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2220      	movs	r2, #32
 800c65e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	330c      	adds	r3, #12
 800c66e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c67a:	f023 0310 	bic.w	r3, r3, #16
 800c67e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	330c      	adds	r3, #12
 800c688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c68c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c68e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c690:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c692:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c694:	e841 2300 	strex	r3, r2, [r1]
 800c698:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c69a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e3      	bne.n	800c668 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7f8 ff45 	bl	8005534 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f8b7 	bl	800c834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6c6:	e09b      	b.n	800c800 <HAL_UART_IRQHandler+0x518>
 800c6c8:	0800ca39 	.word	0x0800ca39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 808e 	beq.w	800c804 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 8089 	beq.w	800c804 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	330c      	adds	r3, #12
 800c6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fc:	e853 3f00 	ldrex	r3, [r3]
 800c700:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	330c      	adds	r3, #12
 800c712:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c716:	647a      	str	r2, [r7, #68]	@ 0x44
 800c718:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c71c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c71e:	e841 2300 	strex	r3, r2, [r1]
 800c722:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1e3      	bne.n	800c6f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3314      	adds	r3, #20
 800c730:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	623b      	str	r3, [r7, #32]
   return(result);
 800c73a:	6a3b      	ldr	r3, [r7, #32]
 800c73c:	f023 0301 	bic.w	r3, r3, #1
 800c740:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	3314      	adds	r3, #20
 800c74a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c74e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c750:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e3      	bne.n	800c72a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2220      	movs	r2, #32
 800c766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	330c      	adds	r3, #12
 800c776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	e853 3f00 	ldrex	r3, [r3]
 800c77e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 0310 	bic.w	r3, r3, #16
 800c786:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	330c      	adds	r3, #12
 800c790:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c794:	61fa      	str	r2, [r7, #28]
 800c796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c798:	69b9      	ldr	r1, [r7, #24]
 800c79a:	69fa      	ldr	r2, [r7, #28]
 800c79c:	e841 2300 	strex	r3, r2, [r1]
 800c7a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1e3      	bne.n	800c770 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c7ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f83d 	bl	800c834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c7ba:	e023      	b.n	800c804 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d009      	beq.n	800c7dc <HAL_UART_IRQHandler+0x4f4>
 800c7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d003      	beq.n	800c7dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f943 	bl	800ca60 <UART_Transmit_IT>
    return;
 800c7da:	e014      	b.n	800c806 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00e      	beq.n	800c806 <HAL_UART_IRQHandler+0x51e>
 800c7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d008      	beq.n	800c806 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f983 	bl	800cb00 <UART_EndTransmit_IT>
    return;
 800c7fa:	e004      	b.n	800c806 <HAL_UART_IRQHandler+0x51e>
    return;
 800c7fc:	bf00      	nop
 800c7fe:	e002      	b.n	800c806 <HAL_UART_IRQHandler+0x51e>
      return;
 800c800:	bf00      	nop
 800c802:	e000      	b.n	800c806 <HAL_UART_IRQHandler+0x51e>
      return;
 800c804:	bf00      	nop
  }
}
 800c806:	37e8      	adds	r7, #232	@ 0xe8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	460b      	mov	r3, r1
 800c83e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	603b      	str	r3, [r7, #0]
 800c858:	4613      	mov	r3, r2
 800c85a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c85c:	e03b      	b.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c864:	d037      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c866:	f7f7 fced 	bl	8004244 <HAL_GetTick>
 800c86a:	4602      	mov	r2, r0
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	6a3a      	ldr	r2, [r7, #32]
 800c872:	429a      	cmp	r2, r3
 800c874:	d302      	bcc.n	800c87c <UART_WaitOnFlagUntilTimeout+0x30>
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d101      	bne.n	800c880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e03a      	b.n	800c8f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	f003 0304 	and.w	r3, r3, #4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d023      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	2b80      	cmp	r3, #128	@ 0x80
 800c892:	d020      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2b40      	cmp	r3, #64	@ 0x40
 800c898:	d01d      	beq.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0308 	and.w	r3, r3, #8
 800c8a4:	2b08      	cmp	r3, #8
 800c8a6:	d116      	bne.n	800c8d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	617b      	str	r3, [r7, #20]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	617b      	str	r3, [r7, #20]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	617b      	str	r3, [r7, #20]
 800c8bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 f857 	bl	800c972 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2208      	movs	r2, #8
 800c8c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e00f      	b.n	800c8f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	bf0c      	ite	eq
 800c8e6:	2301      	moveq	r3, #1
 800c8e8:	2300      	movne	r3, #0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d0b4      	beq.n	800c85e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b085      	sub	sp, #20
 800c902:	af00      	add	r7, sp, #0
 800c904:	60f8      	str	r0, [r7, #12]
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	4613      	mov	r3, r2
 800c90a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	88fa      	ldrh	r2, [r7, #6]
 800c916:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	88fa      	ldrh	r2, [r7, #6]
 800c91c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2222      	movs	r2, #34	@ 0x22
 800c928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d007      	beq.n	800c944 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	68da      	ldr	r2, [r3, #12]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c942:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	695a      	ldr	r2, [r3, #20]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68da      	ldr	r2, [r3, #12]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f042 0220 	orr.w	r2, r2, #32
 800c962:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c972:	b480      	push	{r7}
 800c974:	b095      	sub	sp, #84	@ 0x54
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	330c      	adds	r3, #12
 800c980:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c984:	e853 3f00 	ldrex	r3, [r3]
 800c988:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	330c      	adds	r3, #12
 800c998:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c99a:	643a      	str	r2, [r7, #64]	@ 0x40
 800c99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e5      	bne.n	800c97a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3314      	adds	r3, #20
 800c9b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	e853 3f00 	ldrex	r3, [r3]
 800c9bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	f023 0301 	bic.w	r3, r3, #1
 800c9c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	3314      	adds	r3, #20
 800c9cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9d6:	e841 2300 	strex	r3, r2, [r1]
 800c9da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1e5      	bne.n	800c9ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d119      	bne.n	800ca1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	330c      	adds	r3, #12
 800c9f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	e853 3f00 	ldrex	r3, [r3]
 800c9f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f023 0310 	bic.w	r3, r3, #16
 800ca00:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	330c      	adds	r3, #12
 800ca08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca0a:	61ba      	str	r2, [r7, #24]
 800ca0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6979      	ldr	r1, [r7, #20]
 800ca10:	69ba      	ldr	r2, [r7, #24]
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	613b      	str	r3, [r7, #16]
   return(result);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e5      	bne.n	800c9ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ca2c:	bf00      	nop
 800ca2e:	3754      	adds	r7, #84	@ 0x54
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f7ff fee4 	bl	800c820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca58:	bf00      	nop
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b21      	cmp	r3, #33	@ 0x21
 800ca72:	d13e      	bne.n	800caf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	689b      	ldr	r3, [r3, #8]
 800ca78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca7c:	d114      	bne.n	800caa8 <UART_Transmit_IT+0x48>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d110      	bne.n	800caa8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	881b      	ldrh	r3, [r3, #0]
 800ca90:	461a      	mov	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	1c9a      	adds	r2, r3, #2
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	621a      	str	r2, [r3, #32]
 800caa6:	e008      	b.n	800caba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a1b      	ldr	r3, [r3, #32]
 800caac:	1c59      	adds	r1, r3, #1
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6211      	str	r1, [r2, #32]
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	3b01      	subs	r3, #1
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	4619      	mov	r1, r3
 800cac8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10f      	bne.n	800caee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cadc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68da      	ldr	r2, [r3, #12]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800caec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800caee:	2300      	movs	r3, #0
 800caf0:	e000      	b.n	800caf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800caf2:	2302      	movs	r3, #2
  }
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68da      	ldr	r2, [r3, #12]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2220      	movs	r2, #32
 800cb1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fe73 	bl	800c80c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08c      	sub	sp, #48	@ 0x30
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b22      	cmp	r3, #34	@ 0x22
 800cb42:	f040 80ae 	bne.w	800cca2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb4e:	d117      	bne.n	800cb80 <UART_Receive_IT+0x50>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d113      	bne.n	800cb80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb78:	1c9a      	adds	r2, r3, #2
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	629a      	str	r2, [r3, #40]	@ 0x28
 800cb7e:	e026      	b.n	800cbce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb92:	d007      	beq.n	800cba4 <UART_Receive_IT+0x74>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <UART_Receive_IT+0x82>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d106      	bne.n	800cbb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	e008      	b.n	800cbc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc8:	1c5a      	adds	r2, r3, #1
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d15d      	bne.n	800cc9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68da      	ldr	r2, [r3, #12]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f022 0220 	bic.w	r2, r2, #32
 800cbf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68da      	ldr	r2, [r3, #12]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	695a      	ldr	r2, [r3, #20]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f022 0201 	bic.w	r2, r2, #1
 800cc10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2220      	movs	r2, #32
 800cc16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d135      	bne.n	800cc94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	330c      	adds	r3, #12
 800cc34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	e853 3f00 	ldrex	r3, [r3]
 800cc3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f023 0310 	bic.w	r3, r3, #16
 800cc44:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	330c      	adds	r3, #12
 800cc4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc4e:	623a      	str	r2, [r7, #32]
 800cc50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	69f9      	ldr	r1, [r7, #28]
 800cc54:	6a3a      	ldr	r2, [r7, #32]
 800cc56:	e841 2300 	strex	r3, r2, [r1]
 800cc5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1e5      	bne.n	800cc2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 0310 	and.w	r3, r3, #16
 800cc6c:	2b10      	cmp	r3, #16
 800cc6e:	d10a      	bne.n	800cc86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7ff fdd1 	bl	800c834 <HAL_UARTEx_RxEventCallback>
 800cc92:	e002      	b.n	800cc9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7f4 fd05 	bl	80016a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e002      	b.n	800cca4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e000      	b.n	800cca4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cca2:	2302      	movs	r3, #2
  }
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3730      	adds	r7, #48	@ 0x30
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccb0:	b0c0      	sub	sp, #256	@ 0x100
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ccb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ccc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccc8:	68d9      	ldr	r1, [r3, #12]
 800ccca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	ea40 0301 	orr.w	r3, r0, r1
 800ccd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ccd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	431a      	orrs	r2, r3
 800cce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	431a      	orrs	r2, r3
 800ccec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ccf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cd04:	f021 010c 	bic.w	r1, r1, #12
 800cd08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cd12:	430b      	orrs	r3, r1
 800cd14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cd22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd26:	6999      	ldr	r1, [r3, #24]
 800cd28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	ea40 0301 	orr.w	r3, r0, r1
 800cd32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	4b8f      	ldr	r3, [pc, #572]	@ (800cf78 <UART_SetConfig+0x2cc>)
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d005      	beq.n	800cd4c <UART_SetConfig+0xa0>
 800cd40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	4b8d      	ldr	r3, [pc, #564]	@ (800cf7c <UART_SetConfig+0x2d0>)
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d104      	bne.n	800cd56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd4c:	f7fc f858 	bl	8008e00 <HAL_RCC_GetPCLK2Freq>
 800cd50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cd54:	e003      	b.n	800cd5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd56:	f7fc f83f 	bl	8008dd8 <HAL_RCC_GetPCLK1Freq>
 800cd5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd68:	f040 810c 	bne.w	800cf84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd70:	2200      	movs	r2, #0
 800cd72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cd76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cd7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cd7e:	4622      	mov	r2, r4
 800cd80:	462b      	mov	r3, r5
 800cd82:	1891      	adds	r1, r2, r2
 800cd84:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cd86:	415b      	adcs	r3, r3
 800cd88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cd8e:	4621      	mov	r1, r4
 800cd90:	eb12 0801 	adds.w	r8, r2, r1
 800cd94:	4629      	mov	r1, r5
 800cd96:	eb43 0901 	adc.w	r9, r3, r1
 800cd9a:	f04f 0200 	mov.w	r2, #0
 800cd9e:	f04f 0300 	mov.w	r3, #0
 800cda2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cda6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cdae:	4690      	mov	r8, r2
 800cdb0:	4699      	mov	r9, r3
 800cdb2:	4623      	mov	r3, r4
 800cdb4:	eb18 0303 	adds.w	r3, r8, r3
 800cdb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	eb49 0303 	adc.w	r3, r9, r3
 800cdc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cdd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cdd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cdda:	460b      	mov	r3, r1
 800cddc:	18db      	adds	r3, r3, r3
 800cdde:	653b      	str	r3, [r7, #80]	@ 0x50
 800cde0:	4613      	mov	r3, r2
 800cde2:	eb42 0303 	adc.w	r3, r2, r3
 800cde6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cde8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cdec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cdf0:	f7f3 ff2a 	bl	8000c48 <__aeabi_uldivmod>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	4b61      	ldr	r3, [pc, #388]	@ (800cf80 <UART_SetConfig+0x2d4>)
 800cdfa:	fba3 2302 	umull	r2, r3, r3, r2
 800cdfe:	095b      	lsrs	r3, r3, #5
 800ce00:	011c      	lsls	r4, r3, #4
 800ce02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ce10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ce14:	4642      	mov	r2, r8
 800ce16:	464b      	mov	r3, r9
 800ce18:	1891      	adds	r1, r2, r2
 800ce1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ce1c:	415b      	adcs	r3, r3
 800ce1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ce24:	4641      	mov	r1, r8
 800ce26:	eb12 0a01 	adds.w	sl, r2, r1
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	eb43 0b01 	adc.w	fp, r3, r1
 800ce30:	f04f 0200 	mov.w	r2, #0
 800ce34:	f04f 0300 	mov.w	r3, #0
 800ce38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce44:	4692      	mov	sl, r2
 800ce46:	469b      	mov	fp, r3
 800ce48:	4643      	mov	r3, r8
 800ce4a:	eb1a 0303 	adds.w	r3, sl, r3
 800ce4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce52:	464b      	mov	r3, r9
 800ce54:	eb4b 0303 	adc.w	r3, fp, r3
 800ce58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ce5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ce6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ce70:	460b      	mov	r3, r1
 800ce72:	18db      	adds	r3, r3, r3
 800ce74:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce76:	4613      	mov	r3, r2
 800ce78:	eb42 0303 	adc.w	r3, r2, r3
 800ce7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ce82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ce86:	f7f3 fedf 	bl	8000c48 <__aeabi_uldivmod>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	4611      	mov	r1, r2
 800ce90:	4b3b      	ldr	r3, [pc, #236]	@ (800cf80 <UART_SetConfig+0x2d4>)
 800ce92:	fba3 2301 	umull	r2, r3, r3, r1
 800ce96:	095b      	lsrs	r3, r3, #5
 800ce98:	2264      	movs	r2, #100	@ 0x64
 800ce9a:	fb02 f303 	mul.w	r3, r2, r3
 800ce9e:	1acb      	subs	r3, r1, r3
 800cea0:	00db      	lsls	r3, r3, #3
 800cea2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cea6:	4b36      	ldr	r3, [pc, #216]	@ (800cf80 <UART_SetConfig+0x2d4>)
 800cea8:	fba3 2302 	umull	r2, r3, r3, r2
 800ceac:	095b      	lsrs	r3, r3, #5
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ceb4:	441c      	add	r4, r3
 800ceb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceba:	2200      	movs	r2, #0
 800cebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cec0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cec8:	4642      	mov	r2, r8
 800ceca:	464b      	mov	r3, r9
 800cecc:	1891      	adds	r1, r2, r2
 800cece:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ced0:	415b      	adcs	r3, r3
 800ced2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ced4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ced8:	4641      	mov	r1, r8
 800ceda:	1851      	adds	r1, r2, r1
 800cedc:	6339      	str	r1, [r7, #48]	@ 0x30
 800cede:	4649      	mov	r1, r9
 800cee0:	414b      	adcs	r3, r1
 800cee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cee4:	f04f 0200 	mov.w	r2, #0
 800cee8:	f04f 0300 	mov.w	r3, #0
 800ceec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cef0:	4659      	mov	r1, fp
 800cef2:	00cb      	lsls	r3, r1, #3
 800cef4:	4651      	mov	r1, sl
 800cef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cefa:	4651      	mov	r1, sl
 800cefc:	00ca      	lsls	r2, r1, #3
 800cefe:	4610      	mov	r0, r2
 800cf00:	4619      	mov	r1, r3
 800cf02:	4603      	mov	r3, r0
 800cf04:	4642      	mov	r2, r8
 800cf06:	189b      	adds	r3, r3, r2
 800cf08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf0c:	464b      	mov	r3, r9
 800cf0e:	460a      	mov	r2, r1
 800cf10:	eb42 0303 	adc.w	r3, r2, r3
 800cf14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cf28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	18db      	adds	r3, r3, r3
 800cf30:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf32:	4613      	mov	r3, r2
 800cf34:	eb42 0303 	adc.w	r3, r2, r3
 800cf38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cf3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cf42:	f7f3 fe81 	bl	8000c48 <__aeabi_uldivmod>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf80 <UART_SetConfig+0x2d4>)
 800cf4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cf50:	095b      	lsrs	r3, r3, #5
 800cf52:	2164      	movs	r1, #100	@ 0x64
 800cf54:	fb01 f303 	mul.w	r3, r1, r3
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	3332      	adds	r3, #50	@ 0x32
 800cf5e:	4a08      	ldr	r2, [pc, #32]	@ (800cf80 <UART_SetConfig+0x2d4>)
 800cf60:	fba2 2303 	umull	r2, r3, r2, r3
 800cf64:	095b      	lsrs	r3, r3, #5
 800cf66:	f003 0207 	and.w	r2, r3, #7
 800cf6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4422      	add	r2, r4
 800cf72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cf74:	e106      	b.n	800d184 <UART_SetConfig+0x4d8>
 800cf76:	bf00      	nop
 800cf78:	40011000 	.word	0x40011000
 800cf7c:	40011400 	.word	0x40011400
 800cf80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cf92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cf96:	4642      	mov	r2, r8
 800cf98:	464b      	mov	r3, r9
 800cf9a:	1891      	adds	r1, r2, r2
 800cf9c:	6239      	str	r1, [r7, #32]
 800cf9e:	415b      	adcs	r3, r3
 800cfa0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cfa6:	4641      	mov	r1, r8
 800cfa8:	1854      	adds	r4, r2, r1
 800cfaa:	4649      	mov	r1, r9
 800cfac:	eb43 0501 	adc.w	r5, r3, r1
 800cfb0:	f04f 0200 	mov.w	r2, #0
 800cfb4:	f04f 0300 	mov.w	r3, #0
 800cfb8:	00eb      	lsls	r3, r5, #3
 800cfba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cfbe:	00e2      	lsls	r2, r4, #3
 800cfc0:	4614      	mov	r4, r2
 800cfc2:	461d      	mov	r5, r3
 800cfc4:	4643      	mov	r3, r8
 800cfc6:	18e3      	adds	r3, r4, r3
 800cfc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cfcc:	464b      	mov	r3, r9
 800cfce:	eb45 0303 	adc.w	r3, r5, r3
 800cfd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cfe6:	f04f 0200 	mov.w	r2, #0
 800cfea:	f04f 0300 	mov.w	r3, #0
 800cfee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cff2:	4629      	mov	r1, r5
 800cff4:	008b      	lsls	r3, r1, #2
 800cff6:	4621      	mov	r1, r4
 800cff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cffc:	4621      	mov	r1, r4
 800cffe:	008a      	lsls	r2, r1, #2
 800d000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d004:	f7f3 fe20 	bl	8000c48 <__aeabi_uldivmod>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	4b60      	ldr	r3, [pc, #384]	@ (800d190 <UART_SetConfig+0x4e4>)
 800d00e:	fba3 2302 	umull	r2, r3, r3, r2
 800d012:	095b      	lsrs	r3, r3, #5
 800d014:	011c      	lsls	r4, r3, #4
 800d016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d020:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d028:	4642      	mov	r2, r8
 800d02a:	464b      	mov	r3, r9
 800d02c:	1891      	adds	r1, r2, r2
 800d02e:	61b9      	str	r1, [r7, #24]
 800d030:	415b      	adcs	r3, r3
 800d032:	61fb      	str	r3, [r7, #28]
 800d034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d038:	4641      	mov	r1, r8
 800d03a:	1851      	adds	r1, r2, r1
 800d03c:	6139      	str	r1, [r7, #16]
 800d03e:	4649      	mov	r1, r9
 800d040:	414b      	adcs	r3, r1
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	f04f 0200 	mov.w	r2, #0
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d050:	4659      	mov	r1, fp
 800d052:	00cb      	lsls	r3, r1, #3
 800d054:	4651      	mov	r1, sl
 800d056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d05a:	4651      	mov	r1, sl
 800d05c:	00ca      	lsls	r2, r1, #3
 800d05e:	4610      	mov	r0, r2
 800d060:	4619      	mov	r1, r3
 800d062:	4603      	mov	r3, r0
 800d064:	4642      	mov	r2, r8
 800d066:	189b      	adds	r3, r3, r2
 800d068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d06c:	464b      	mov	r3, r9
 800d06e:	460a      	mov	r2, r1
 800d070:	eb42 0303 	adc.w	r3, r2, r3
 800d074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d082:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d084:	f04f 0200 	mov.w	r2, #0
 800d088:	f04f 0300 	mov.w	r3, #0
 800d08c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d090:	4649      	mov	r1, r9
 800d092:	008b      	lsls	r3, r1, #2
 800d094:	4641      	mov	r1, r8
 800d096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d09a:	4641      	mov	r1, r8
 800d09c:	008a      	lsls	r2, r1, #2
 800d09e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d0a2:	f7f3 fdd1 	bl	8000c48 <__aeabi_uldivmod>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	4b38      	ldr	r3, [pc, #224]	@ (800d190 <UART_SetConfig+0x4e4>)
 800d0ae:	fba3 2301 	umull	r2, r3, r3, r1
 800d0b2:	095b      	lsrs	r3, r3, #5
 800d0b4:	2264      	movs	r2, #100	@ 0x64
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ba:	1acb      	subs	r3, r1, r3
 800d0bc:	011b      	lsls	r3, r3, #4
 800d0be:	3332      	adds	r3, #50	@ 0x32
 800d0c0:	4a33      	ldr	r2, [pc, #204]	@ (800d190 <UART_SetConfig+0x4e4>)
 800d0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0c6:	095b      	lsrs	r3, r3, #5
 800d0c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0cc:	441c      	add	r4, r3
 800d0ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0d6:	677a      	str	r2, [r7, #116]	@ 0x74
 800d0d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d0dc:	4642      	mov	r2, r8
 800d0de:	464b      	mov	r3, r9
 800d0e0:	1891      	adds	r1, r2, r2
 800d0e2:	60b9      	str	r1, [r7, #8]
 800d0e4:	415b      	adcs	r3, r3
 800d0e6:	60fb      	str	r3, [r7, #12]
 800d0e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0ec:	4641      	mov	r1, r8
 800d0ee:	1851      	adds	r1, r2, r1
 800d0f0:	6039      	str	r1, [r7, #0]
 800d0f2:	4649      	mov	r1, r9
 800d0f4:	414b      	adcs	r3, r1
 800d0f6:	607b      	str	r3, [r7, #4]
 800d0f8:	f04f 0200 	mov.w	r2, #0
 800d0fc:	f04f 0300 	mov.w	r3, #0
 800d100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d104:	4659      	mov	r1, fp
 800d106:	00cb      	lsls	r3, r1, #3
 800d108:	4651      	mov	r1, sl
 800d10a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d10e:	4651      	mov	r1, sl
 800d110:	00ca      	lsls	r2, r1, #3
 800d112:	4610      	mov	r0, r2
 800d114:	4619      	mov	r1, r3
 800d116:	4603      	mov	r3, r0
 800d118:	4642      	mov	r2, r8
 800d11a:	189b      	adds	r3, r3, r2
 800d11c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d11e:	464b      	mov	r3, r9
 800d120:	460a      	mov	r2, r1
 800d122:	eb42 0303 	adc.w	r3, r2, r3
 800d126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	2200      	movs	r2, #0
 800d130:	663b      	str	r3, [r7, #96]	@ 0x60
 800d132:	667a      	str	r2, [r7, #100]	@ 0x64
 800d134:	f04f 0200 	mov.w	r2, #0
 800d138:	f04f 0300 	mov.w	r3, #0
 800d13c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d140:	4649      	mov	r1, r9
 800d142:	008b      	lsls	r3, r1, #2
 800d144:	4641      	mov	r1, r8
 800d146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d14a:	4641      	mov	r1, r8
 800d14c:	008a      	lsls	r2, r1, #2
 800d14e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d152:	f7f3 fd79 	bl	8000c48 <__aeabi_uldivmod>
 800d156:	4602      	mov	r2, r0
 800d158:	460b      	mov	r3, r1
 800d15a:	4b0d      	ldr	r3, [pc, #52]	@ (800d190 <UART_SetConfig+0x4e4>)
 800d15c:	fba3 1302 	umull	r1, r3, r3, r2
 800d160:	095b      	lsrs	r3, r3, #5
 800d162:	2164      	movs	r1, #100	@ 0x64
 800d164:	fb01 f303 	mul.w	r3, r1, r3
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	011b      	lsls	r3, r3, #4
 800d16c:	3332      	adds	r3, #50	@ 0x32
 800d16e:	4a08      	ldr	r2, [pc, #32]	@ (800d190 <UART_SetConfig+0x4e4>)
 800d170:	fba2 2303 	umull	r2, r3, r2, r3
 800d174:	095b      	lsrs	r3, r3, #5
 800d176:	f003 020f 	and.w	r2, r3, #15
 800d17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4422      	add	r2, r4
 800d182:	609a      	str	r2, [r3, #8]
}
 800d184:	bf00      	nop
 800d186:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d18a:	46bd      	mov	sp, r7
 800d18c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d190:	51eb851f 	.word	0x51eb851f

0800d194 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d194:	b084      	sub	sp, #16
 800d196:	b480      	push	{r7}
 800d198:	b085      	sub	sp, #20
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
 800d19e:	f107 001c 	add.w	r0, r7, #28
 800d1a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d1aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d1ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d1ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d1b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d1b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d1ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d1be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800d1ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	431a      	orrs	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	b004      	add	sp, #16
 800d1e8:	4770      	bx	lr

0800d1ea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d226:	b480      	push	{r7}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2203      	movs	r2, #3
 800d232:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d242:	b480      	push	{r7}
 800d244:	b083      	sub	sp, #12
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f003 0303 	and.w	r3, r3, #3
}
 800d252:	4618      	mov	r0, r3
 800d254:	370c      	adds	r7, #12
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr

0800d25e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d25e:	b480      	push	{r7}
 800d260:	b085      	sub	sp, #20
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d27c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d282:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d288:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d298:	f023 030f 	bic.w	r3, r3, #15
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3714      	adds	r7, #20
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	b2db      	uxtb	r3, r3
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3314      	adds	r3, #20
 800d2da:	461a      	mov	r2, r3
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	4413      	add	r3, r2
 800d2e0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
}  
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b085      	sub	sp, #20
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d318:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d31e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d324:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	4313      	orrs	r3, r2
 800d32a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d330:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	431a      	orrs	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d33c:	2300      	movs	r3, #0

}
 800d33e:	4618      	mov	r0, r3
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b088      	sub	sp, #32
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d358:	2310      	movs	r3, #16
 800d35a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d35c:	2340      	movs	r3, #64	@ 0x40
 800d35e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d360:	2300      	movs	r3, #0
 800d362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d368:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d36a:	f107 0308 	add.w	r3, r7, #8
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff ff74 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d37a:	2110      	movs	r1, #16
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fa19 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d384:	69fb      	ldr	r3, [r7, #28]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3720      	adds	r7, #32
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b088      	sub	sp, #32
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d39c:	2311      	movs	r3, #17
 800d39e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3a0:	2340      	movs	r3, #64	@ 0x40
 800d3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3ae:	f107 0308 	add.w	r3, r7, #8
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff ff52 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d3ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3be:	2111      	movs	r1, #17
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f9f7 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3c8:	69fb      	ldr	r3, [r7, #28]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3720      	adds	r7, #32
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b088      	sub	sp, #32
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d3e0:	2312      	movs	r3, #18
 800d3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3e4:	2340      	movs	r3, #64	@ 0x40
 800d3e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3f2:	f107 0308 	add.w	r3, r7, #8
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff ff30 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d3fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d402:	2112      	movs	r1, #18
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f9d5 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d40a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40c:	69fb      	ldr	r3, [r7, #28]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3720      	adds	r7, #32
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b088      	sub	sp, #32
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d424:	2318      	movs	r3, #24
 800d426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d428:	2340      	movs	r3, #64	@ 0x40
 800d42a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d42c:	2300      	movs	r3, #0
 800d42e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d434:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d436:	f107 0308 	add.w	r3, r7, #8
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff ff0e 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d442:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d446:	2118      	movs	r1, #24
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f9b3 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d450:	69fb      	ldr	r3, [r7, #28]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3720      	adds	r7, #32
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b088      	sub	sp, #32
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d468:	2319      	movs	r3, #25
 800d46a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d46c:	2340      	movs	r3, #64	@ 0x40
 800d46e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d470:	2300      	movs	r3, #0
 800d472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d478:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d47a:	f107 0308 	add.w	r3, r7, #8
 800d47e:	4619      	mov	r1, r3
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff feec 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d48a:	2119      	movs	r1, #25
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f991 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d494:	69fb      	ldr	r3, [r7, #28]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3720      	adds	r7, #32
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b088      	sub	sp, #32
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d4ac:	230c      	movs	r3, #12
 800d4ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4b0:	2340      	movs	r3, #64	@ 0x40
 800d4b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4be:	f107 0308 	add.w	r3, r7, #8
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff feca 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d4ca:	4a05      	ldr	r2, [pc, #20]	@ (800d4e0 <SDMMC_CmdStopTransfer+0x40>)
 800d4cc:	210c      	movs	r1, #12
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f970 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d4d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d6:	69fb      	ldr	r3, [r7, #28]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	05f5e100 	.word	0x05f5e100

0800d4e4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b08a      	sub	sp, #40	@ 0x28
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d4f4:	2307      	movs	r3, #7
 800d4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4f8:	2340      	movs	r3, #64	@ 0x40
 800d4fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d504:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d506:	f107 0310 	add.w	r3, r7, #16
 800d50a:	4619      	mov	r1, r3
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f7ff fea6 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d512:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d516:	2107      	movs	r1, #7
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f94b 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d51e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d522:	4618      	mov	r0, r3
 800d524:	3728      	adds	r7, #40	@ 0x28
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b088      	sub	sp, #32
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d532:	2300      	movs	r3, #0
 800d534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d53a:	2300      	movs	r3, #0
 800d53c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d53e:	2300      	movs	r3, #0
 800d540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d546:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d548:	f107 0308 	add.w	r3, r7, #8
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff fe85 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fb65 	bl	800dc24 <SDMMC_GetCmdError>
 800d55a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d55c:	69fb      	ldr	r3, [r7, #28]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}

0800d566 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b088      	sub	sp, #32
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d56e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d574:	2308      	movs	r3, #8
 800d576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d578:	2340      	movs	r3, #64	@ 0x40
 800d57a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d57c:	2300      	movs	r3, #0
 800d57e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d584:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d586:	f107 0308 	add.w	r3, r7, #8
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f7ff fe66 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 faf8 	bl	800db88 <SDMMC_GetCmdResp7>
 800d598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d59a:	69fb      	ldr	r3, [r7, #28]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3720      	adds	r7, #32
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d5b2:	2337      	movs	r3, #55	@ 0x37
 800d5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5b6:	2340      	movs	r3, #64	@ 0x40
 800d5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5c4:	f107 0308 	add.w	r3, r7, #8
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff fe47 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d5d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5d4:	2137      	movs	r1, #55	@ 0x37
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f8ec 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5de:	69fb      	ldr	r3, [r7, #28]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3720      	adds	r7, #32
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d5f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d5fe:	2329      	movs	r3, #41	@ 0x29
 800d600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d602:	2340      	movs	r3, #64	@ 0x40
 800d604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d60e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff fe21 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f9ff 	bl	800da20 <SDMMC_GetCmdResp3>
 800d622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d624:	69fb      	ldr	r3, [r7, #28]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3720      	adds	r7, #32
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b088      	sub	sp, #32
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d63c:	2306      	movs	r3, #6
 800d63e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d640:	2340      	movs	r3, #64	@ 0x40
 800d642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d644:	2300      	movs	r3, #0
 800d646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d64c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d64e:	f107 0308 	add.w	r3, r7, #8
 800d652:	4619      	mov	r1, r3
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f7ff fe02 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d65a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d65e:	2106      	movs	r1, #6
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f8a7 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d668:	69fb      	ldr	r3, [r7, #28]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3720      	adds	r7, #32
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b088      	sub	sp, #32
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d67a:	2300      	movs	r3, #0
 800d67c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d67e:	2333      	movs	r3, #51	@ 0x33
 800d680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d682:	2340      	movs	r3, #64	@ 0x40
 800d684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d686:	2300      	movs	r3, #0
 800d688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d68a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d68e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d690:	f107 0308 	add.w	r3, r7, #8
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff fde1 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d69c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6a0:	2133      	movs	r1, #51	@ 0x33
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f886 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d6c4:	23c0      	movs	r3, #192	@ 0xc0
 800d6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6d2:	f107 0308 	add.w	r3, r7, #8
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fdc0 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f956 	bl	800d990 <SDMMC_GetCmdResp2>
 800d6e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6e6:	69fb      	ldr	r3, [r7, #28]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3720      	adds	r7, #32
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d6fe:	2309      	movs	r3, #9
 800d700:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d702:	23c0      	movs	r3, #192	@ 0xc0
 800d704:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d706:	2300      	movs	r3, #0
 800d708:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d70a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d70e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d710:	f107 0308 	add.w	r3, r7, #8
 800d714:	4619      	mov	r1, r3
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff fda1 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f937 	bl	800d990 <SDMMC_GetCmdResp2>
 800d722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d724:	69fb      	ldr	r3, [r7, #28]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3720      	adds	r7, #32
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b088      	sub	sp, #32
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d738:	2300      	movs	r3, #0
 800d73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d73c:	2303      	movs	r3, #3
 800d73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d740:	2340      	movs	r3, #64	@ 0x40
 800d742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d744:	2300      	movs	r3, #0
 800d746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d74c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d74e:	f107 0308 	add.w	r3, r7, #8
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff fd82 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d75a:	683a      	ldr	r2, [r7, #0]
 800d75c:	2103      	movs	r1, #3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f99c 	bl	800da9c <SDMMC_GetCmdResp6>
 800d764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d766:	69fb      	ldr	r3, [r7, #28]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3720      	adds	r7, #32
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b088      	sub	sp, #32
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d77e:	230d      	movs	r3, #13
 800d780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d782:	2340      	movs	r3, #64	@ 0x40
 800d784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d786:	2300      	movs	r3, #0
 800d788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d78a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d78e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d790:	f107 0308 	add.w	r3, r7, #8
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fd61 	bl	800d25e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d79c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7a0:	210d      	movs	r1, #13
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f806 	bl	800d7b4 <SDMMC_GetCmdResp1>
 800d7a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7aa:	69fb      	ldr	r3, [r7, #28]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3720      	adds	r7, #32
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7c2:	4b70      	ldr	r3, [pc, #448]	@ (800d984 <SDMMC_GetCmdResp1+0x1d0>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a70      	ldr	r2, [pc, #448]	@ (800d988 <SDMMC_GetCmdResp1+0x1d4>)
 800d7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7cc:	0a5a      	lsrs	r2, r3, #9
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	fb02 f303 	mul.w	r3, r2, r3
 800d7d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	1e5a      	subs	r2, r3, #1
 800d7da:	61fa      	str	r2, [r7, #28]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7e4:	e0c9      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d0ef      	beq.n	800d7d6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1ea      	bne.n	800d7d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d804:	f003 0304 	and.w	r3, r3, #4
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2204      	movs	r2, #4
 800d810:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d812:	2304      	movs	r3, #4
 800d814:	e0b1      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d004      	beq.n	800d82c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2201      	movs	r2, #1
 800d826:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d828:	2301      	movs	r3, #1
 800d82a:	e0a6      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	22c5      	movs	r2, #197	@ 0xc5
 800d830:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f7ff fd3d 	bl	800d2b2 <SDIO_GetCommandResponse>
 800d838:	4603      	mov	r3, r0
 800d83a:	461a      	mov	r2, r3
 800d83c:	7afb      	ldrb	r3, [r7, #11]
 800d83e:	4293      	cmp	r3, r2
 800d840:	d001      	beq.n	800d846 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d842:	2301      	movs	r3, #1
 800d844:	e099      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d846:	2100      	movs	r1, #0
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f7ff fd3f 	bl	800d2cc <SDIO_GetResponse>
 800d84e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	4b4e      	ldr	r3, [pc, #312]	@ (800d98c <SDMMC_GetCmdResp1+0x1d8>)
 800d854:	4013      	ands	r3, r2
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d85a:	2300      	movs	r3, #0
 800d85c:	e08d      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	da02      	bge.n	800d86a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d868:	e087      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d874:	2340      	movs	r3, #64	@ 0x40
 800d876:	e080      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d882:	2380      	movs	r3, #128	@ 0x80
 800d884:	e079      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d894:	e071      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d002      	beq.n	800d8a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8a4:	e069      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8b4:	e061      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d002      	beq.n	800d8c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d8c4:	e059      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8d4:	e051      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d8e4:	e049      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d8f4:	e041      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d904:	e039      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d002      	beq.n	800d916 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d914:	e031      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d920:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d924:	e029      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d002      	beq.n	800d936 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d930:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d934:	e021      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d940:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d944:	e019      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d002      	beq.n	800d956 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d950:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d954:	e011      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d960:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d964:	e009      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	f003 0308 	and.w	r3, r3, #8
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d970:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d974:	e001      	b.n	800d97a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3720      	adds	r7, #32
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20000008 	.word	0x20000008
 800d988:	10624dd3 	.word	0x10624dd3
 800d98c:	fdffe008 	.word	0xfdffe008

0800d990 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d990:	b480      	push	{r7}
 800d992:	b085      	sub	sp, #20
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d998:	4b1f      	ldr	r3, [pc, #124]	@ (800da18 <SDMMC_GetCmdResp2+0x88>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a1f      	ldr	r2, [pc, #124]	@ (800da1c <SDMMC_GetCmdResp2+0x8c>)
 800d99e:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a2:	0a5b      	lsrs	r3, r3, #9
 800d9a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9a8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	1e5a      	subs	r2, r3, #1
 800d9b2:	60fa      	str	r2, [r7, #12]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9bc:	e026      	b.n	800da0c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d0ef      	beq.n	800d9ae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1ea      	bne.n	800d9ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9dc:	f003 0304 	and.w	r3, r3, #4
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d004      	beq.n	800d9ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9ea:	2304      	movs	r3, #4
 800d9ec:	e00e      	b.n	800da0c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d004      	beq.n	800da04 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da00:	2301      	movs	r3, #1
 800da02:	e003      	b.n	800da0c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	22c5      	movs	r2, #197	@ 0xc5
 800da08:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	20000008 	.word	0x20000008
 800da1c:	10624dd3 	.word	0x10624dd3

0800da20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da28:	4b1a      	ldr	r3, [pc, #104]	@ (800da94 <SDMMC_GetCmdResp3+0x74>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a1a      	ldr	r2, [pc, #104]	@ (800da98 <SDMMC_GetCmdResp3+0x78>)
 800da2e:	fba2 2303 	umull	r2, r3, r2, r3
 800da32:	0a5b      	lsrs	r3, r3, #9
 800da34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da38:	fb02 f303 	mul.w	r3, r2, r3
 800da3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	1e5a      	subs	r2, r3, #1
 800da42:	60fa      	str	r2, [r7, #12]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da4c:	e01b      	b.n	800da86 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0ef      	beq.n	800da3e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800da64:	2b00      	cmp	r3, #0
 800da66:	d1ea      	bne.n	800da3e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da6c:	f003 0304 	and.w	r3, r3, #4
 800da70:	2b00      	cmp	r3, #0
 800da72:	d004      	beq.n	800da7e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2204      	movs	r2, #4
 800da78:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da7a:	2304      	movs	r3, #4
 800da7c:	e003      	b.n	800da86 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	22c5      	movs	r2, #197	@ 0xc5
 800da82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800da84:	2300      	movs	r3, #0
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20000008 	.word	0x20000008
 800da98:	10624dd3 	.word	0x10624dd3

0800da9c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	460b      	mov	r3, r1
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800daaa:	4b35      	ldr	r3, [pc, #212]	@ (800db80 <SDMMC_GetCmdResp6+0xe4>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a35      	ldr	r2, [pc, #212]	@ (800db84 <SDMMC_GetCmdResp6+0xe8>)
 800dab0:	fba2 2303 	umull	r2, r3, r2, r3
 800dab4:	0a5b      	lsrs	r3, r3, #9
 800dab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daba:	fb02 f303 	mul.w	r3, r2, r3
 800dabe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	1e5a      	subs	r2, r3, #1
 800dac4:	61fa      	str	r2, [r7, #28]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d102      	bne.n	800dad0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dace:	e052      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dad4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0ef      	beq.n	800dac0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1ea      	bne.n	800dac0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daee:	f003 0304 	and.w	r3, r3, #4
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d004      	beq.n	800db00 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2204      	movs	r2, #4
 800dafa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dafc:	2304      	movs	r3, #4
 800dafe:	e03a      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2201      	movs	r2, #1
 800db10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db12:	2301      	movs	r3, #1
 800db14:	e02f      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f7ff fbcb 	bl	800d2b2 <SDIO_GetCommandResponse>
 800db1c:	4603      	mov	r3, r0
 800db1e:	461a      	mov	r2, r3
 800db20:	7afb      	ldrb	r3, [r7, #11]
 800db22:	4293      	cmp	r3, r2
 800db24:	d001      	beq.n	800db2a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db26:	2301      	movs	r3, #1
 800db28:	e025      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	22c5      	movs	r2, #197	@ 0xc5
 800db2e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800db30:	2100      	movs	r1, #0
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7ff fbca 	bl	800d2cc <SDIO_GetResponse>
 800db38:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800db40:	2b00      	cmp	r3, #0
 800db42:	d106      	bne.n	800db52 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	0c1b      	lsrs	r3, r3, #16
 800db48:	b29a      	uxth	r2, r3
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800db4e:	2300      	movs	r3, #0
 800db50:	e011      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db60:	e009      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d002      	beq.n	800db72 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db70:	e001      	b.n	800db76 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800db76:	4618      	mov	r0, r3
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	20000008 	.word	0x20000008
 800db84:	10624dd3 	.word	0x10624dd3

0800db88 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db90:	4b22      	ldr	r3, [pc, #136]	@ (800dc1c <SDMMC_GetCmdResp7+0x94>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a22      	ldr	r2, [pc, #136]	@ (800dc20 <SDMMC_GetCmdResp7+0x98>)
 800db96:	fba2 2303 	umull	r2, r3, r2, r3
 800db9a:	0a5b      	lsrs	r3, r3, #9
 800db9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dba0:	fb02 f303 	mul.w	r3, r2, r3
 800dba4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	1e5a      	subs	r2, r3, #1
 800dbaa:	60fa      	str	r2, [r7, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dbb4:	e02c      	b.n	800dc10 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d0ef      	beq.n	800dba6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1ea      	bne.n	800dba6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbd4:	f003 0304 	and.w	r3, r3, #4
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d004      	beq.n	800dbe6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2204      	movs	r2, #4
 800dbe0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbe2:	2304      	movs	r3, #4
 800dbe4:	e014      	b.n	800dc10 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e009      	b.n	800dc10 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2240      	movs	r2, #64	@ 0x40
 800dc0c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc0e:	2300      	movs	r3, #0
  
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	20000008 	.word	0x20000008
 800dc20:	10624dd3 	.word	0x10624dd3

0800dc24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc2c:	4b11      	ldr	r3, [pc, #68]	@ (800dc74 <SDMMC_GetCmdError+0x50>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a11      	ldr	r2, [pc, #68]	@ (800dc78 <SDMMC_GetCmdError+0x54>)
 800dc32:	fba2 2303 	umull	r2, r3, r2, r3
 800dc36:	0a5b      	lsrs	r3, r3, #9
 800dc38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc3c:	fb02 f303 	mul.w	r3, r2, r3
 800dc40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1e5a      	subs	r2, r3, #1
 800dc46:	60fa      	str	r2, [r7, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc50:	e009      	b.n	800dc66 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0f1      	beq.n	800dc42 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	22c5      	movs	r2, #197	@ 0xc5
 800dc62:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3714      	adds	r7, #20
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20000008 	.word	0x20000008
 800dc78:	10624dd3 	.word	0x10624dd3

0800dc7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	f107 001c 	add.w	r0, r7, #28
 800dc8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d123      	bne.n	800dcde <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800dcaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dcbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d105      	bne.n	800dcd2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f9dc 	bl	800e090 <USB_CoreReset>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	73fb      	strb	r3, [r7, #15]
 800dcdc:	e01b      	b.n	800dd16 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f9d0 	bl	800e090 <USB_CoreReset>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dcf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d106      	bne.n	800dd0a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd08:	e005      	b.n	800dd16 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd16:	7fbb      	ldrb	r3, [r7, #30]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d10b      	bne.n	800dd34 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	f043 0206 	orr.w	r2, r3, #6
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	f043 0220 	orr.w	r2, r3, #32
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd40:	b004      	add	sp, #16
 800dd42:	4770      	bx	lr

0800dd44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f043 0201 	orr.w	r2, r3, #1
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd66:	b480      	push	{r7}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f023 0201 	bic.w	r2, r3, #1
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d115      	bne.n	800ddd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ddb6:	200a      	movs	r0, #10
 800ddb8:	f7f6 fa50 	bl	800425c <HAL_Delay>
      ms += 10U;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	330a      	adds	r3, #10
 800ddc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f956 	bl	800e074 <USB_GetMode>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d01e      	beq.n	800de0c <USB_SetCurrentMode+0x84>
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2bc7      	cmp	r3, #199	@ 0xc7
 800ddd2:	d9f0      	bls.n	800ddb6 <USB_SetCurrentMode+0x2e>
 800ddd4:	e01a      	b.n	800de0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ddd6:	78fb      	ldrb	r3, [r7, #3]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d115      	bne.n	800de08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dde8:	200a      	movs	r0, #10
 800ddea:	f7f6 fa37 	bl	800425c <HAL_Delay>
      ms += 10U;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	330a      	adds	r3, #10
 800ddf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f000 f93d 	bl	800e074 <USB_GetMode>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <USB_SetCurrentMode+0x84>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2bc7      	cmp	r3, #199	@ 0xc7
 800de04:	d9f0      	bls.n	800dde8 <USB_SetCurrentMode+0x60>
 800de06:	e001      	b.n	800de0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800de08:	2301      	movs	r3, #1
 800de0a:	e005      	b.n	800de18 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2bc8      	cmp	r3, #200	@ 0xc8
 800de10:	d101      	bne.n	800de16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e000      	b.n	800de18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	3301      	adds	r3, #1
 800de32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de3a:	d901      	bls.n	800de40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de3c:	2303      	movs	r3, #3
 800de3e:	e01b      	b.n	800de78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	2b00      	cmp	r3, #0
 800de46:	daf2      	bge.n	800de2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de48:	2300      	movs	r3, #0
 800de4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	019b      	lsls	r3, r3, #6
 800de50:	f043 0220 	orr.w	r2, r3, #32
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3301      	adds	r3, #1
 800de5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de64:	d901      	bls.n	800de6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de66:	2303      	movs	r3, #3
 800de68:	e006      	b.n	800de78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	f003 0320 	and.w	r3, r3, #32
 800de72:	2b20      	cmp	r3, #32
 800de74:	d0f0      	beq.n	800de58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de9c:	d901      	bls.n	800dea2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de9e:	2303      	movs	r3, #3
 800dea0:	e018      	b.n	800ded4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	691b      	ldr	r3, [r3, #16]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	daf2      	bge.n	800de90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800deaa:	2300      	movs	r3, #0
 800deac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2210      	movs	r2, #16
 800deb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	3301      	adds	r3, #1
 800deb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dec0:	d901      	bls.n	800dec6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dec2:	2303      	movs	r3, #3
 800dec4:	e006      	b.n	800ded4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	f003 0310 	and.w	r3, r3, #16
 800dece:	2b10      	cmp	r3, #16
 800ded0:	d0f0      	beq.n	800deb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b089      	sub	sp, #36	@ 0x24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	4611      	mov	r1, r2
 800deec:	461a      	mov	r2, r3
 800deee:	460b      	mov	r3, r1
 800def0:	71fb      	strb	r3, [r7, #7]
 800def2:	4613      	mov	r3, r2
 800def4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800defe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800df02:	2b00      	cmp	r3, #0
 800df04:	d123      	bne.n	800df4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800df06:	88bb      	ldrh	r3, [r7, #4]
 800df08:	3303      	adds	r3, #3
 800df0a:	089b      	lsrs	r3, r3, #2
 800df0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800df0e:	2300      	movs	r3, #0
 800df10:	61bb      	str	r3, [r7, #24]
 800df12:	e018      	b.n	800df46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df14:	79fb      	ldrb	r3, [r7, #7]
 800df16:	031a      	lsls	r2, r3, #12
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	4413      	add	r3, r2
 800df1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df20:	461a      	mov	r2, r3
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6013      	str	r3, [r2, #0]
      pSrc++;
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	3301      	adds	r3, #1
 800df2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	3301      	adds	r3, #1
 800df32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	3301      	adds	r3, #1
 800df38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	3301      	adds	r3, #1
 800df3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	3301      	adds	r3, #1
 800df44:	61bb      	str	r3, [r7, #24]
 800df46:	69ba      	ldr	r2, [r7, #24]
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d3e2      	bcc.n	800df14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800df4e:	2300      	movs	r3, #0
}
 800df50:	4618      	mov	r0, r3
 800df52:	3724      	adds	r7, #36	@ 0x24
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b08b      	sub	sp, #44	@ 0x2c
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df72:	88fb      	ldrh	r3, [r7, #6]
 800df74:	089b      	lsrs	r3, r3, #2
 800df76:	b29b      	uxth	r3, r3
 800df78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df7a:	88fb      	ldrh	r3, [r7, #6]
 800df7c:	f003 0303 	and.w	r3, r3, #3
 800df80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df82:	2300      	movs	r3, #0
 800df84:	623b      	str	r3, [r7, #32]
 800df86:	e014      	b.n	800dfb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df92:	601a      	str	r2, [r3, #0]
    pDest++;
 800df94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df96:	3301      	adds	r3, #1
 800df98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800df9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9c:	3301      	adds	r3, #1
 800df9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800dfac:	6a3b      	ldr	r3, [r7, #32]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	623b      	str	r3, [r7, #32]
 800dfb2:	6a3a      	ldr	r2, [r7, #32]
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d3e6      	bcc.n	800df88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dfba:	8bfb      	ldrh	r3, [r7, #30]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01e      	beq.n	800dffe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dfca:	461a      	mov	r2, r3
 800dfcc:	f107 0310 	add.w	r3, r7, #16
 800dfd0:	6812      	ldr	r2, [r2, #0]
 800dfd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	fa22 f303 	lsr.w	r3, r2, r3
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe4:	701a      	strb	r2, [r3, #0]
      i++;
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	623b      	str	r3, [r7, #32]
      pDest++;
 800dfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfee:	3301      	adds	r3, #1
 800dff0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800dff2:	8bfb      	ldrh	r3, [r7, #30]
 800dff4:	3b01      	subs	r3, #1
 800dff6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dff8:	8bfb      	ldrh	r3, [r7, #30]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1ea      	bne.n	800dfd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e000:	4618      	mov	r0, r3
 800e002:	372c      	adds	r7, #44	@ 0x2c
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	699b      	ldr	r3, [r3, #24]
 800e01e:	68fa      	ldr	r2, [r7, #12]
 800e020:	4013      	ands	r3, r2
 800e022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e024:	68fb      	ldr	r3, [r7, #12]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e032:	b480      	push	{r7}
 800e034:	b085      	sub	sp, #20
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	460b      	mov	r3, r1
 800e03c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e042:	78fb      	ldrb	r3, [r7, #3]
 800e044:	015a      	lsls	r2, r3, #5
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	4413      	add	r3, r2
 800e04a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e052:	78fb      	ldrb	r3, [r7, #3]
 800e054:	015a      	lsls	r2, r3, #5
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	4413      	add	r3, r2
 800e05a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	4013      	ands	r3, r2
 800e064:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e066:	68bb      	ldr	r3, [r7, #8]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	f003 0301 	and.w	r3, r3, #1
}
 800e084:	4618      	mov	r0, r3
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e098:	2300      	movs	r3, #0
 800e09a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e0a8:	d901      	bls.n	800e0ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	e01b      	b.n	800e0e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	daf2      	bge.n	800e09c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	f043 0201 	orr.w	r2, r3, #1
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e0d2:	d901      	bls.n	800e0d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e006      	b.n	800e0e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	691b      	ldr	r3, [r3, #16]
 800e0dc:	f003 0301 	and.w	r3, r3, #1
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d0f0      	beq.n	800e0c6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
	...

0800e0f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b086      	sub	sp, #24
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e114:	461a      	mov	r2, r3
 800e116:	2300      	movs	r3, #0
 800e118:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e11e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e12a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e136:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e146:	2b00      	cmp	r3, #0
 800e148:	d119      	bne.n	800e17e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e14a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d10a      	bne.n	800e168 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e160:	f043 0304 	orr.w	r3, r3, #4
 800e164:	6013      	str	r3, [r2, #0]
 800e166:	e014      	b.n	800e192 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e176:	f023 0304 	bic.w	r3, r3, #4
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	e009      	b.n	800e192 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e18c:	f023 0304 	bic.w	r3, r3, #4
 800e190:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e192:	2110      	movs	r1, #16
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7ff fe43 	bl	800de20 <USB_FlushTxFifo>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f7ff fe6d 	bl	800de84 <USB_FlushRxFifo>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	613b      	str	r3, [r7, #16]
 800e1b8:	e015      	b.n	800e1e6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1cc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1da:	461a      	mov	r2, r3
 800e1dc:	2300      	movs	r3, #0
 800e1de:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	613b      	str	r3, [r7, #16]
 800e1e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d3e3      	bcc.n	800e1ba <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e1fe:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a18      	ldr	r2, [pc, #96]	@ (800e264 <USB_HostInit+0x170>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d10b      	bne.n	800e220 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e20e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	4a15      	ldr	r2, [pc, #84]	@ (800e268 <USB_HostInit+0x174>)
 800e214:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a14      	ldr	r2, [pc, #80]	@ (800e26c <USB_HostInit+0x178>)
 800e21a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e21e:	e009      	b.n	800e234 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2280      	movs	r2, #128	@ 0x80
 800e224:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a11      	ldr	r2, [pc, #68]	@ (800e270 <USB_HostInit+0x17c>)
 800e22a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a11      	ldr	r2, [pc, #68]	@ (800e274 <USB_HostInit+0x180>)
 800e230:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e234:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d105      	bne.n	800e248 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	f043 0210 	orr.w	r2, r3, #16
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	699a      	ldr	r2, [r3, #24]
 800e24c:	4b0a      	ldr	r3, [pc, #40]	@ (800e278 <USB_HostInit+0x184>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e254:	7dfb      	ldrb	r3, [r7, #23]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e260:	b004      	add	sp, #16
 800e262:	4770      	bx	lr
 800e264:	40040000 	.word	0x40040000
 800e268:	01000200 	.word	0x01000200
 800e26c:	00e00300 	.word	0x00e00300
 800e270:	00600080 	.word	0x00600080
 800e274:	004000e0 	.word	0x004000e0
 800e278:	a3200008 	.word	0xa3200008

0800e27c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e29a:	f023 0303 	bic.w	r3, r3, #3
 800e29e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	f003 0303 	and.w	r3, r3, #3
 800e2ae:	68f9      	ldr	r1, [r7, #12]
 800e2b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e2b8:	78fb      	ldrb	r3, [r7, #3]
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	d107      	bne.n	800e2ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e2ca:	6053      	str	r3, [r2, #4]
 800e2cc:	e00c      	b.n	800e2e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e2ce:	78fb      	ldrb	r3, [r7, #3]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d107      	bne.n	800e2e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2da:	461a      	mov	r2, r3
 800e2dc:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e2e0:	6053      	str	r3, [r2, #4]
 800e2e2:	e001      	b.n	800e2e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e000      	b.n	800e2ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e302:	2300      	movs	r3, #0
 800e304:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e316:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e324:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e326:	2064      	movs	r0, #100	@ 0x64
 800e328:	f7f5 ff98 	bl	800425c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e338:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e33a:	200a      	movs	r0, #10
 800e33c:	f7f5 ff8e 	bl	800425c <HAL_Delay>

  return HAL_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e34a:	b480      	push	{r7}
 800e34c:	b085      	sub	sp, #20
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	460b      	mov	r3, r1
 800e354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e35a:	2300      	movs	r3, #0
 800e35c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e36e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e376:	2b00      	cmp	r3, #0
 800e378:	d109      	bne.n	800e38e <USB_DriveVbus+0x44>
 800e37a:	78fb      	ldrb	r3, [r7, #3]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d106      	bne.n	800e38e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e388:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e38c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e398:	d109      	bne.n	800e3ae <USB_DriveVbus+0x64>
 800e39a:	78fb      	ldrb	r3, [r7, #3]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d106      	bne.n	800e3ae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e3a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3ac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	0c5b      	lsrs	r3, r3, #17
 800e3da:	f003 0303 	and.w	r3, r3, #3
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	b29b      	uxth	r3, r3
}
 800e400:	4618      	mov	r0, r3
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b088      	sub	sp, #32
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	4608      	mov	r0, r1
 800e416:	4611      	mov	r1, r2
 800e418:	461a      	mov	r2, r3
 800e41a:	4603      	mov	r3, r0
 800e41c:	70fb      	strb	r3, [r7, #3]
 800e41e:	460b      	mov	r3, r1
 800e420:	70bb      	strb	r3, [r7, #2]
 800e422:	4613      	mov	r3, r2
 800e424:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800e42e:	78fb      	ldrb	r3, [r7, #3]
 800e430:	015a      	lsls	r2, r3, #5
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	4413      	add	r3, r2
 800e436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e43a:	461a      	mov	r2, r3
 800e43c:	f04f 33ff 	mov.w	r3, #4294967295
 800e440:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e442:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e446:	2b03      	cmp	r3, #3
 800e448:	d87c      	bhi.n	800e544 <USB_HC_Init+0x138>
 800e44a:	a201      	add	r2, pc, #4	@ (adr r2, 800e450 <USB_HC_Init+0x44>)
 800e44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e450:	0800e461 	.word	0x0800e461
 800e454:	0800e507 	.word	0x0800e507
 800e458:	0800e461 	.word	0x0800e461
 800e45c:	0800e4c9 	.word	0x0800e4c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e460:	78fb      	ldrb	r3, [r7, #3]
 800e462:	015a      	lsls	r2, r3, #5
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	4413      	add	r3, r2
 800e468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e46c:	461a      	mov	r2, r3
 800e46e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e474:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	da10      	bge.n	800e49e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e47c:	78fb      	ldrb	r3, [r7, #3]
 800e47e:	015a      	lsls	r2, r3, #5
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	4413      	add	r3, r2
 800e484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	78fa      	ldrb	r2, [r7, #3]
 800e48c:	0151      	lsls	r1, r2, #5
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	440a      	add	r2, r1
 800e492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e49a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e49c:	e055      	b.n	800e54a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4a6f      	ldr	r2, [pc, #444]	@ (800e660 <USB_HC_Init+0x254>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d151      	bne.n	800e54a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e4a6:	78fb      	ldrb	r3, [r7, #3]
 800e4a8:	015a      	lsls	r2, r3, #5
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	78fa      	ldrb	r2, [r7, #3]
 800e4b6:	0151      	lsls	r1, r2, #5
 800e4b8:	693a      	ldr	r2, [r7, #16]
 800e4ba:	440a      	add	r2, r1
 800e4bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e4c4:	60d3      	str	r3, [r2, #12]
      break;
 800e4c6:	e040      	b.n	800e54a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4c8:	78fb      	ldrb	r3, [r7, #3]
 800e4ca:	015a      	lsls	r2, r3, #5
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e4da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e4dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	da34      	bge.n	800e54e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e4e4:	78fb      	ldrb	r3, [r7, #3]
 800e4e6:	015a      	lsls	r2, r3, #5
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	78fa      	ldrb	r2, [r7, #3]
 800e4f4:	0151      	lsls	r1, r2, #5
 800e4f6:	693a      	ldr	r2, [r7, #16]
 800e4f8:	440a      	add	r2, r1
 800e4fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e502:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e504:	e023      	b.n	800e54e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	015a      	lsls	r2, r3, #5
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	4413      	add	r3, r2
 800e50e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e512:	461a      	mov	r2, r3
 800e514:	f240 2325 	movw	r3, #549	@ 0x225
 800e518:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e51a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	da17      	bge.n	800e552 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e522:	78fb      	ldrb	r3, [r7, #3]
 800e524:	015a      	lsls	r2, r3, #5
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	78fa      	ldrb	r2, [r7, #3]
 800e532:	0151      	lsls	r1, r2, #5
 800e534:	693a      	ldr	r2, [r7, #16]
 800e536:	440a      	add	r2, r1
 800e538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e53c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e540:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e542:	e006      	b.n	800e552 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e544:	2301      	movs	r3, #1
 800e546:	77fb      	strb	r3, [r7, #31]
      break;
 800e548:	e004      	b.n	800e554 <USB_HC_Init+0x148>
      break;
 800e54a:	bf00      	nop
 800e54c:	e002      	b.n	800e554 <USB_HC_Init+0x148>
      break;
 800e54e:	bf00      	nop
 800e550:	e000      	b.n	800e554 <USB_HC_Init+0x148>
      break;
 800e552:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e554:	78fb      	ldrb	r3, [r7, #3]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e560:	461a      	mov	r2, r3
 800e562:	2300      	movs	r3, #0
 800e564:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e566:	78fb      	ldrb	r3, [r7, #3]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	78fa      	ldrb	r2, [r7, #3]
 800e576:	0151      	lsls	r1, r2, #5
 800e578:	693a      	ldr	r2, [r7, #16]
 800e57a:	440a      	add	r2, r1
 800e57c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e580:	f043 0302 	orr.w	r3, r3, #2
 800e584:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e58c:	699a      	ldr	r2, [r3, #24]
 800e58e:	78fb      	ldrb	r3, [r7, #3]
 800e590:	f003 030f 	and.w	r3, r3, #15
 800e594:	2101      	movs	r1, #1
 800e596:	fa01 f303 	lsl.w	r3, r1, r3
 800e59a:	6939      	ldr	r1, [r7, #16]
 800e59c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	699b      	ldr	r3, [r3, #24]
 800e5a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e5b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	da03      	bge.n	800e5c0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e5b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5bc:	61bb      	str	r3, [r7, #24]
 800e5be:	e001      	b.n	800e5c4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff fef9 	bl	800e3bc <USB_GetHostSpeed>
 800e5ca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e5cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d106      	bne.n	800e5e2 <USB_HC_Init+0x1d6>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d003      	beq.n	800e5e2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e5da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e5de:	617b      	str	r3, [r7, #20]
 800e5e0:	e001      	b.n	800e5e6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5e6:	787b      	ldrb	r3, [r7, #1]
 800e5e8:	059b      	lsls	r3, r3, #22
 800e5ea:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e5ee:	78bb      	ldrb	r3, [r7, #2]
 800e5f0:	02db      	lsls	r3, r3, #11
 800e5f2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e5fc:	049b      	lsls	r3, r3, #18
 800e5fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e602:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e604:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e606:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e60a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	431a      	orrs	r2, r3
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e614:	78fa      	ldrb	r2, [r7, #3]
 800e616:	0151      	lsls	r1, r2, #5
 800e618:	693a      	ldr	r2, [r7, #16]
 800e61a:	440a      	add	r2, r1
 800e61c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e624:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e626:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d003      	beq.n	800e636 <USB_HC_Init+0x22a>
 800e62e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e632:	2b01      	cmp	r3, #1
 800e634:	d10f      	bne.n	800e656 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e636:	78fb      	ldrb	r3, [r7, #3]
 800e638:	015a      	lsls	r2, r3, #5
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	4413      	add	r3, r2
 800e63e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	78fa      	ldrb	r2, [r7, #3]
 800e646:	0151      	lsls	r1, r2, #5
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	440a      	add	r2, r1
 800e64c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e650:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e654:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e656:	7ffb      	ldrb	r3, [r7, #31]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3720      	adds	r7, #32
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	40040000 	.word	0x40040000

0800e664 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08c      	sub	sp, #48	@ 0x30
 800e668:	af02      	add	r7, sp, #8
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	4613      	mov	r3, r2
 800e670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	785b      	ldrb	r3, [r3, #1]
 800e67a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e67c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e680:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	4a5d      	ldr	r2, [pc, #372]	@ (800e7fc <USB_HC_StartXfer+0x198>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d12f      	bne.n	800e6ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d11c      	bne.n	800e6ca <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	7c9b      	ldrb	r3, [r3, #18]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d003      	beq.n	800e6a0 <USB_HC_StartXfer+0x3c>
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	7c9b      	ldrb	r3, [r3, #18]
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	d124      	bne.n	800e6ea <USB_HC_StartXfer+0x86>
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	799b      	ldrb	r3, [r3, #6]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d120      	bne.n	800e6ea <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	015a      	lsls	r2, r3, #5
 800e6ac:	6a3b      	ldr	r3, [r7, #32]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	69fa      	ldr	r2, [r7, #28]
 800e6b8:	0151      	lsls	r1, r2, #5
 800e6ba:	6a3a      	ldr	r2, [r7, #32]
 800e6bc:	440a      	add	r2, r1
 800e6be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e6c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6c6:	60d3      	str	r3, [r2, #12]
 800e6c8:	e00f      	b.n	800e6ea <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	791b      	ldrb	r3, [r3, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10b      	bne.n	800e6ea <USB_HC_StartXfer+0x86>
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	795b      	ldrb	r3, [r3, #5]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d107      	bne.n	800e6ea <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	785b      	ldrb	r3, [r3, #1]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f000 fb6b 	bl	800edbc <USB_DoPing>
        return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	e232      	b.n	800eb50 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	799b      	ldrb	r3, [r3, #6]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d158      	bne.n	800e7a4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	78db      	ldrb	r3, [r3, #3]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d007      	beq.n	800e70e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e6fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	8a92      	ldrh	r2, [r2, #20]
 800e704:	fb03 f202 	mul.w	r2, r3, r2
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	61da      	str	r2, [r3, #28]
 800e70c:	e07c      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	7c9b      	ldrb	r3, [r3, #18]
 800e712:	2b01      	cmp	r3, #1
 800e714:	d130      	bne.n	800e778 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	6a1b      	ldr	r3, [r3, #32]
 800e71a:	2bbc      	cmp	r3, #188	@ 0xbc
 800e71c:	d918      	bls.n	800e750 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	8a9b      	ldrh	r3, [r3, #20]
 800e722:	461a      	mov	r2, r3
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	69da      	ldr	r2, [r3, #28]
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d003      	beq.n	800e740 <USB_HC_StartXfer+0xdc>
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d103      	bne.n	800e748 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	2202      	movs	r2, #2
 800e744:	60da      	str	r2, [r3, #12]
 800e746:	e05f      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	2201      	movs	r2, #1
 800e74c:	60da      	str	r2, [r3, #12]
 800e74e:	e05b      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	6a1a      	ldr	r2, [r3, #32]
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d007      	beq.n	800e770 <USB_HC_StartXfer+0x10c>
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	2b02      	cmp	r3, #2
 800e766:	d003      	beq.n	800e770 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	2204      	movs	r2, #4
 800e76c:	60da      	str	r2, [r3, #12]
 800e76e:	e04b      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2203      	movs	r2, #3
 800e774:	60da      	str	r2, [r3, #12]
 800e776:	e047      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d10d      	bne.n	800e79a <USB_HC_StartXfer+0x136>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	8a92      	ldrh	r2, [r2, #20]
 800e786:	4293      	cmp	r3, r2
 800e788:	d907      	bls.n	800e79a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e78a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	8a92      	ldrh	r2, [r2, #20]
 800e790:	fb03 f202 	mul.w	r2, r3, r2
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	61da      	str	r2, [r3, #28]
 800e798:	e036      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	6a1a      	ldr	r2, [r3, #32]
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	61da      	str	r2, [r3, #28]
 800e7a2:	e031      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	6a1b      	ldr	r3, [r3, #32]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d018      	beq.n	800e7de <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	6a1b      	ldr	r3, [r3, #32]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	8a92      	ldrh	r2, [r2, #20]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	8a92      	ldrh	r2, [r2, #20]
 800e7bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e7c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e7c4:	8b7b      	ldrh	r3, [r7, #26]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d90b      	bls.n	800e7e2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e7ca:	8b7b      	ldrh	r3, [r7, #26]
 800e7cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e7ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	8a92      	ldrh	r2, [r2, #20]
 800e7d4:	fb03 f202 	mul.w	r2, r3, r2
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	61da      	str	r2, [r3, #28]
 800e7dc:	e001      	b.n	800e7e2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	78db      	ldrb	r3, [r3, #3]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d00a      	beq.n	800e800 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e7ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	8a92      	ldrh	r2, [r2, #20]
 800e7f0:	fb03 f202 	mul.w	r2, r3, r2
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	61da      	str	r2, [r3, #28]
 800e7f8:	e006      	b.n	800e808 <USB_HC_StartXfer+0x1a4>
 800e7fa:	bf00      	nop
 800e7fc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	6a1a      	ldr	r2, [r3, #32]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e810:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e812:	04d9      	lsls	r1, r3, #19
 800e814:	4ba3      	ldr	r3, [pc, #652]	@ (800eaa4 <USB_HC_StartXfer+0x440>)
 800e816:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e818:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	7d9b      	ldrb	r3, [r3, #22]
 800e81e:	075b      	lsls	r3, r3, #29
 800e820:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e824:	69f9      	ldr	r1, [r7, #28]
 800e826:	0148      	lsls	r0, r1, #5
 800e828:	6a39      	ldr	r1, [r7, #32]
 800e82a:	4401      	add	r1, r0
 800e82c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e830:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e832:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e834:	79fb      	ldrb	r3, [r7, #7]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d009      	beq.n	800e84e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	6999      	ldr	r1, [r3, #24]
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	015a      	lsls	r2, r3, #5
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	4413      	add	r3, r2
 800e846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e84a:	460a      	mov	r2, r1
 800e84c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f003 0301 	and.w	r3, r3, #1
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	bf0c      	ite	eq
 800e85e:	2301      	moveq	r3, #1
 800e860:	2300      	movne	r3, #0
 800e862:	b2db      	uxtb	r3, r3
 800e864:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	0151      	lsls	r1, r2, #5
 800e878:	6a3a      	ldr	r2, [r7, #32]
 800e87a:	440a      	add	r2, r1
 800e87c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e880:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e884:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	7e7b      	ldrb	r3, [r7, #25]
 800e896:	075b      	lsls	r3, r3, #29
 800e898:	69f9      	ldr	r1, [r7, #28]
 800e89a:	0148      	lsls	r0, r1, #5
 800e89c:	6a39      	ldr	r1, [r7, #32]
 800e89e:	4401      	add	r1, r0
 800e8a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	799b      	ldrb	r3, [r3, #6]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	f040 80c3 	bne.w	800ea38 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	7c5b      	ldrb	r3, [r3, #17]
 800e8b6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	69fa      	ldr	r2, [r7, #28]
 800e8c0:	0151      	lsls	r1, r2, #5
 800e8c2:	6a3a      	ldr	r2, [r7, #32]
 800e8c4:	440a      	add	r2, r1
 800e8c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e8ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e8ce:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	015a      	lsls	r2, r3, #5
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	69fa      	ldr	r2, [r7, #28]
 800e8e0:	0151      	lsls	r1, r2, #5
 800e8e2:	6a3a      	ldr	r2, [r7, #32]
 800e8e4:	440a      	add	r2, r1
 800e8e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e8ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	79db      	ldrb	r3, [r3, #7]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d123      	bne.n	800e940 <USB_HC_StartXfer+0x2dc>
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	78db      	ldrb	r3, [r3, #3]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d11f      	bne.n	800e940 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	015a      	lsls	r2, r3, #5
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	4413      	add	r3, r2
 800e908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	0151      	lsls	r1, r2, #5
 800e912:	6a3a      	ldr	r2, [r7, #32]
 800e914:	440a      	add	r2, r1
 800e916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e91a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e91e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	015a      	lsls	r2, r3, #5
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	4413      	add	r3, r2
 800e928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	69fa      	ldr	r2, [r7, #28]
 800e930:	0151      	lsls	r1, r2, #5
 800e932:	6a3a      	ldr	r2, [r7, #32]
 800e934:	440a      	add	r2, r1
 800e936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e93e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	7c9b      	ldrb	r3, [r3, #18]
 800e944:	2b01      	cmp	r3, #1
 800e946:	d003      	beq.n	800e950 <USB_HC_StartXfer+0x2ec>
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	7c9b      	ldrb	r3, [r3, #18]
 800e94c:	2b03      	cmp	r3, #3
 800e94e:	d117      	bne.n	800e980 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e954:	2b01      	cmp	r3, #1
 800e956:	d113      	bne.n	800e980 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	78db      	ldrb	r3, [r3, #3]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d10f      	bne.n	800e980 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	015a      	lsls	r2, r3, #5
 800e964:	6a3b      	ldr	r3, [r7, #32]
 800e966:	4413      	add	r3, r2
 800e968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	69fa      	ldr	r2, [r7, #28]
 800e970:	0151      	lsls	r1, r2, #5
 800e972:	6a3a      	ldr	r2, [r7, #32]
 800e974:	440a      	add	r2, r1
 800e976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e97a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e97e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	7c9b      	ldrb	r3, [r3, #18]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d162      	bne.n	800ea4e <USB_HC_StartXfer+0x3ea>
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	78db      	ldrb	r3, [r3, #3]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d15e      	bne.n	800ea4e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	3b01      	subs	r3, #1
 800e996:	2b03      	cmp	r3, #3
 800e998:	d858      	bhi.n	800ea4c <USB_HC_StartXfer+0x3e8>
 800e99a:	a201      	add	r2, pc, #4	@ (adr r2, 800e9a0 <USB_HC_StartXfer+0x33c>)
 800e99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a0:	0800e9b1 	.word	0x0800e9b1
 800e9a4:	0800e9d3 	.word	0x0800e9d3
 800e9a8:	0800e9f5 	.word	0x0800e9f5
 800e9ac:	0800ea17 	.word	0x0800ea17
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	015a      	lsls	r2, r3, #5
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	69fa      	ldr	r2, [r7, #28]
 800e9c0:	0151      	lsls	r1, r2, #5
 800e9c2:	6a3a      	ldr	r2, [r7, #32]
 800e9c4:	440a      	add	r2, r1
 800e9c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9ce:	6053      	str	r3, [r2, #4]
          break;
 800e9d0:	e03d      	b.n	800ea4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	015a      	lsls	r2, r3, #5
 800e9d6:	6a3b      	ldr	r3, [r7, #32]
 800e9d8:	4413      	add	r3, r2
 800e9da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	69fa      	ldr	r2, [r7, #28]
 800e9e2:	0151      	lsls	r1, r2, #5
 800e9e4:	6a3a      	ldr	r2, [r7, #32]
 800e9e6:	440a      	add	r2, r1
 800e9e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9ec:	f043 030e 	orr.w	r3, r3, #14
 800e9f0:	6053      	str	r3, [r2, #4]
          break;
 800e9f2:	e02c      	b.n	800ea4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	015a      	lsls	r2, r3, #5
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	69fa      	ldr	r2, [r7, #28]
 800ea04:	0151      	lsls	r1, r2, #5
 800ea06:	6a3a      	ldr	r2, [r7, #32]
 800ea08:	440a      	add	r2, r1
 800ea0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ea12:	6053      	str	r3, [r2, #4]
          break;
 800ea14:	e01b      	b.n	800ea4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	69fa      	ldr	r2, [r7, #28]
 800ea26:	0151      	lsls	r1, r2, #5
 800ea28:	6a3a      	ldr	r2, [r7, #32]
 800ea2a:	440a      	add	r2, r1
 800ea2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea34:	6053      	str	r3, [r2, #4]
          break;
 800ea36:	e00a      	b.n	800ea4e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	015a      	lsls	r2, r3, #5
 800ea3c:	6a3b      	ldr	r3, [r7, #32]
 800ea3e:	4413      	add	r3, r2
 800ea40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea44:	461a      	mov	r2, r3
 800ea46:	2300      	movs	r3, #0
 800ea48:	6053      	str	r3, [r2, #4]
 800ea4a:	e000      	b.n	800ea4e <USB_HC_StartXfer+0x3ea>
          break;
 800ea4c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	015a      	lsls	r2, r3, #5
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	4413      	add	r3, r2
 800ea56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea64:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	78db      	ldrb	r3, [r3, #3]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d004      	beq.n	800ea78 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea74:	613b      	str	r3, [r7, #16]
 800ea76:	e003      	b.n	800ea80 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ea7e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ea86:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	015a      	lsls	r2, r3, #5
 800ea8c:	6a3b      	ldr	r3, [r7, #32]
 800ea8e:	4413      	add	r3, r2
 800ea90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea94:	461a      	mov	r2, r3
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ea9a:	79fb      	ldrb	r3, [r7, #7]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d003      	beq.n	800eaa8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	e055      	b.n	800eb50 <USB_HC_StartXfer+0x4ec>
 800eaa4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	78db      	ldrb	r3, [r3, #3]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d14e      	bne.n	800eb4e <USB_HC_StartXfer+0x4ea>
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	6a1b      	ldr	r3, [r3, #32]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d04a      	beq.n	800eb4e <USB_HC_StartXfer+0x4ea>
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	79db      	ldrb	r3, [r3, #7]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d146      	bne.n	800eb4e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	7c9b      	ldrb	r3, [r3, #18]
 800eac4:	2b03      	cmp	r3, #3
 800eac6:	d831      	bhi.n	800eb2c <USB_HC_StartXfer+0x4c8>
 800eac8:	a201      	add	r2, pc, #4	@ (adr r2, 800ead0 <USB_HC_StartXfer+0x46c>)
 800eaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eace:	bf00      	nop
 800ead0:	0800eae1 	.word	0x0800eae1
 800ead4:	0800eb05 	.word	0x0800eb05
 800ead8:	0800eae1 	.word	0x0800eae1
 800eadc:	0800eb05 	.word	0x0800eb05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	6a1b      	ldr	r3, [r3, #32]
 800eae4:	3303      	adds	r3, #3
 800eae6:	089b      	lsrs	r3, r3, #2
 800eae8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800eaea:	8afa      	ldrh	r2, [r7, #22]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d91c      	bls.n	800eb30 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	f043 0220 	orr.w	r2, r3, #32
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	619a      	str	r2, [r3, #24]
        }
        break;
 800eb02:	e015      	b.n	800eb30 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	3303      	adds	r3, #3
 800eb0a:	089b      	lsrs	r3, r3, #2
 800eb0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800eb0e:	8afa      	ldrh	r2, [r7, #22]
 800eb10:	6a3b      	ldr	r3, [r7, #32]
 800eb12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb16:	691b      	ldr	r3, [r3, #16]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d90a      	bls.n	800eb34 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	619a      	str	r2, [r3, #24]
        }
        break;
 800eb2a:	e003      	b.n	800eb34 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800eb2c:	bf00      	nop
 800eb2e:	e002      	b.n	800eb36 <USB_HC_StartXfer+0x4d2>
        break;
 800eb30:	bf00      	nop
 800eb32:	e000      	b.n	800eb36 <USB_HC_StartXfer+0x4d2>
        break;
 800eb34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	6999      	ldr	r1, [r3, #24]
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	785a      	ldrb	r2, [r3, #1]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	2000      	movs	r0, #0
 800eb46:	9000      	str	r0, [sp, #0]
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f7ff f9c9 	bl	800dee0 <USB_WritePacket>
  }

  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3728      	adds	r7, #40	@ 0x28
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	b29b      	uxth	r3, r3
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3714      	adds	r7, #20
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800eb7a:	b480      	push	{r7}
 800eb7c:	b089      	sub	sp, #36	@ 0x24
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	460b      	mov	r3, r1
 800eb84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800eb8a:	78fb      	ldrb	r3, [r7, #3]
 800eb8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	015a      	lsls	r2, r3, #5
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	0c9b      	lsrs	r3, r3, #18
 800eba2:	f003 0303 	and.w	r3, r3, #3
 800eba6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	015a      	lsls	r2, r3, #5
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	4413      	add	r3, r2
 800ebb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	0fdb      	lsrs	r3, r3, #31
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	015a      	lsls	r2, r3, #5
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	0fdb      	lsrs	r3, r3, #31
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	f003 0320 	and.w	r3, r3, #32
 800ebdc:	2b20      	cmp	r3, #32
 800ebde:	d10d      	bne.n	800ebfc <USB_HC_Halt+0x82>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d10a      	bne.n	800ebfc <USB_HC_Halt+0x82>
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d005      	beq.n	800ebf8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d002      	beq.n	800ebf8 <USB_HC_Halt+0x7e>
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	2b03      	cmp	r3, #3
 800ebf6:	d101      	bne.n	800ebfc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	e0d8      	b.n	800edae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d002      	beq.n	800ec08 <USB_HC_Halt+0x8e>
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d173      	bne.n	800ecf0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	015a      	lsls	r2, r3, #5
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	69ba      	ldr	r2, [r7, #24]
 800ec18:	0151      	lsls	r1, r2, #5
 800ec1a:	69fa      	ldr	r2, [r7, #28]
 800ec1c:	440a      	add	r2, r1
 800ec1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	f003 0320 	and.w	r3, r3, #32
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d14a      	bne.n	800ecca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d133      	bne.n	800eca8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	69fb      	ldr	r3, [r7, #28]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	69ba      	ldr	r2, [r7, #24]
 800ec50:	0151      	lsls	r1, r2, #5
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	440a      	add	r2, r1
 800ec56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec5e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	015a      	lsls	r2, r3, #5
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	0151      	lsls	r1, r2, #5
 800ec72:	69fa      	ldr	r2, [r7, #28]
 800ec74:	440a      	add	r2, r1
 800ec76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ec7e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	3301      	adds	r3, #1
 800ec84:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ec8c:	d82e      	bhi.n	800ecec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca4:	d0ec      	beq.n	800ec80 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800eca6:	e081      	b.n	800edac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	69ba      	ldr	r2, [r7, #24]
 800ecb8:	0151      	lsls	r1, r2, #5
 800ecba:	69fa      	ldr	r2, [r7, #28]
 800ecbc:	440a      	add	r2, r1
 800ecbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ecc6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ecc8:	e070      	b.n	800edac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	015a      	lsls	r2, r3, #5
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	69ba      	ldr	r2, [r7, #24]
 800ecda:	0151      	lsls	r1, r2, #5
 800ecdc:	69fa      	ldr	r2, [r7, #28]
 800ecde:	440a      	add	r2, r1
 800ece0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ece4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ece8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ecea:	e05f      	b.n	800edac <USB_HC_Halt+0x232>
            break;
 800ecec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ecee:	e05d      	b.n	800edac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	015a      	lsls	r2, r3, #5
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	69ba      	ldr	r2, [r7, #24]
 800ed00:	0151      	lsls	r1, r2, #5
 800ed02:	69fa      	ldr	r2, [r7, #28]
 800ed04:	440a      	add	r2, r1
 800ed06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ed16:	691b      	ldr	r3, [r3, #16]
 800ed18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d133      	bne.n	800ed88 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	015a      	lsls	r2, r3, #5
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	4413      	add	r3, r2
 800ed28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	0151      	lsls	r1, r2, #5
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	440a      	add	r2, r1
 800ed36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	015a      	lsls	r2, r3, #5
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	4413      	add	r3, r2
 800ed48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	69ba      	ldr	r2, [r7, #24]
 800ed50:	0151      	lsls	r1, r2, #5
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	440a      	add	r2, r1
 800ed56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ed5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	3301      	adds	r3, #1
 800ed64:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed6c:	d81d      	bhi.n	800edaa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	015a      	lsls	r2, r3, #5
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	4413      	add	r3, r2
 800ed76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed84:	d0ec      	beq.n	800ed60 <USB_HC_Halt+0x1e6>
 800ed86:	e011      	b.n	800edac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	015a      	lsls	r2, r3, #5
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	4413      	add	r3, r2
 800ed90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69ba      	ldr	r2, [r7, #24]
 800ed98:	0151      	lsls	r1, r2, #5
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	440a      	add	r2, r1
 800ed9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eda2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eda6:	6013      	str	r3, [r2, #0]
 800eda8:	e000      	b.n	800edac <USB_HC_Halt+0x232>
          break;
 800edaa:	bf00      	nop
    }
  }

  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3724      	adds	r7, #36	@ 0x24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
	...

0800edbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800edcc:	78fb      	ldrb	r3, [r7, #3]
 800edce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800edd0:	2301      	movs	r3, #1
 800edd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	04da      	lsls	r2, r3, #19
 800edd8:	4b15      	ldr	r3, [pc, #84]	@ (800ee30 <USB_DoPing+0x74>)
 800edda:	4013      	ands	r3, r2
 800eddc:	693a      	ldr	r2, [r7, #16]
 800edde:	0151      	lsls	r1, r2, #5
 800ede0:	697a      	ldr	r2, [r7, #20]
 800ede2:	440a      	add	r2, r1
 800ede4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ede8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800edec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	015a      	lsls	r2, r3, #5
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	4413      	add	r3, r2
 800edf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ee04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ee0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	015a      	lsls	r2, r3, #5
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	4413      	add	r3, r2
 800ee16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ee20:	2300      	movs	r3, #0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	371c      	adds	r7, #28
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop
 800ee30:	1ff80000 	.word	0x1ff80000

0800ee34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ee44:	2300      	movs	r3, #0
 800ee46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7fe ff8c 	bl	800dd66 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee4e:	2110      	movs	r1, #16
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7fe ffe5 	bl	800de20 <USB_FlushTxFifo>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff f80f 	bl	800de84 <USB_FlushRxFifo>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ee70:	2300      	movs	r3, #0
 800ee72:	61bb      	str	r3, [r7, #24]
 800ee74:	e01f      	b.n	800eeb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	015a      	lsls	r2, r3, #5
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ee9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	015a      	lsls	r2, r3, #5
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	4413      	add	r3, r2
 800eea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeaa:	461a      	mov	r2, r3
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	61bb      	str	r3, [r7, #24]
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	2b0f      	cmp	r3, #15
 800eeba:	d9dc      	bls.n	800ee76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800eebc:	2300      	movs	r3, #0
 800eebe:	61bb      	str	r3, [r7, #24]
 800eec0:	e034      	b.n	800ef2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	015a      	lsls	r2, r3, #5
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	4413      	add	r3, r2
 800eeca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eed8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eee0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eee8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	015a      	lsls	r2, r3, #5
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	4413      	add	r3, r2
 800eef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eef6:	461a      	mov	r2, r3
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	3301      	adds	r3, #1
 800ef00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef08:	d80c      	bhi.n	800ef24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	015a      	lsls	r2, r3, #5
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	4413      	add	r3, r2
 800ef12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef20:	d0ec      	beq.n	800eefc <USB_StopHost+0xc8>
 800ef22:	e000      	b.n	800ef26 <USB_StopHost+0xf2>
        break;
 800ef24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	61bb      	str	r3, [r7, #24]
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	2b0f      	cmp	r3, #15
 800ef30:	d9c7      	bls.n	800eec2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef38:	461a      	mov	r2, r3
 800ef3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f04f 32ff 	mov.w	r2, #4294967295
 800ef46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f7fe fefb 	bl	800dd44 <USB_EnableGlobalInt>

  return ret;
 800ef4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3720      	adds	r7, #32
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ef5c:	4908      	ldr	r1, [pc, #32]	@ (800ef80 <MX_FATFS_Init+0x28>)
 800ef5e:	4809      	ldr	r0, [pc, #36]	@ (800ef84 <MX_FATFS_Init+0x2c>)
 800ef60:	f006 fb5e 	bl	8015620 <FATFS_LinkDriver>
 800ef64:	4603      	mov	r3, r0
 800ef66:	461a      	mov	r2, r3
 800ef68:	4b07      	ldr	r3, [pc, #28]	@ (800ef88 <MX_FATFS_Init+0x30>)
 800ef6a:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800ef6c:	4907      	ldr	r1, [pc, #28]	@ (800ef8c <MX_FATFS_Init+0x34>)
 800ef6e:	4808      	ldr	r0, [pc, #32]	@ (800ef90 <MX_FATFS_Init+0x38>)
 800ef70:	f006 fb56 	bl	8015620 <FATFS_LinkDriver>
 800ef74:	4603      	mov	r3, r0
 800ef76:	461a      	mov	r2, r3
 800ef78:	4b06      	ldr	r3, [pc, #24]	@ (800ef94 <MX_FATFS_Init+0x3c>)
 800ef7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ef7c:	bf00      	nop
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	20000784 	.word	0x20000784
 800ef84:	08018954 	.word	0x08018954
 800ef88:	20000780 	.word	0x20000780
 800ef8c:	20000bf0 	.word	0x20000bf0
 800ef90:	08018968 	.word	0x08018968
 800ef94:	20000bec 	.word	0x20000bec

0800ef98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ef9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800efb2:	f000 f879 	bl	800f0a8 <BSP_SD_IsDetected>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d001      	beq.n	800efc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800efbc:	2301      	movs	r3, #1
 800efbe:	e012      	b.n	800efe6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800efc0:	480b      	ldr	r0, [pc, #44]	@ (800eff0 <BSP_SD_Init+0x48>)
 800efc2:	f7fa fa55 	bl	8009470 <HAL_SD_Init>
 800efc6:	4603      	mov	r3, r0
 800efc8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800efca:	79fb      	ldrb	r3, [r7, #7]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d109      	bne.n	800efe4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800efd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800efd4:	4806      	ldr	r0, [pc, #24]	@ (800eff0 <BSP_SD_Init+0x48>)
 800efd6:	f7fb f83f 	bl	800a058 <HAL_SD_ConfigWideBusOperation>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d001      	beq.n	800efe4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800efe4:	79fb      	ldrb	r3, [r7, #7]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	2000046c 	.word	0x2000046c

0800eff4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b088      	sub	sp, #32
 800eff8:	af02      	add	r7, sp, #8
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
 800f000:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f002:	2300      	movs	r3, #0
 800f004:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	68f9      	ldr	r1, [r7, #12]
 800f010:	4806      	ldr	r0, [pc, #24]	@ (800f02c <BSP_SD_ReadBlocks+0x38>)
 800f012:	f7fa fadd 	bl	80095d0 <HAL_SD_ReadBlocks>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d001      	beq.n	800f020 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f020:	7dfb      	ldrb	r3, [r7, #23]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	2000046c 	.word	0x2000046c

0800f030 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b088      	sub	sp, #32
 800f034:	af02      	add	r7, sp, #8
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	68f9      	ldr	r1, [r7, #12]
 800f04c:	4806      	ldr	r0, [pc, #24]	@ (800f068 <BSP_SD_WriteBlocks+0x38>)
 800f04e:	f7fa fca5 	bl	800999c <HAL_SD_WriteBlocks>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3718      	adds	r7, #24
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	2000046c 	.word	0x2000046c

0800f06c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f070:	4805      	ldr	r0, [pc, #20]	@ (800f088 <BSP_SD_GetCardState+0x1c>)
 800f072:	f7fb f88b 	bl	800a18c <HAL_SD_GetCardState>
 800f076:	4603      	mov	r3, r0
 800f078:	2b04      	cmp	r3, #4
 800f07a:	bf14      	ite	ne
 800f07c:	2301      	movne	r3, #1
 800f07e:	2300      	moveq	r3, #0
 800f080:	b2db      	uxtb	r3, r3
}
 800f082:	4618      	mov	r0, r3
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	2000046c 	.word	0x2000046c

0800f08c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4803      	ldr	r0, [pc, #12]	@ (800f0a4 <BSP_SD_GetCardInfo+0x18>)
 800f098:	f7fa ffb2 	bl	800a000 <HAL_SD_GetCardInfo>
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	2000046c 	.word	0x2000046c

0800f0a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f0b2:	f000 f80b 	bl	800f0cc <BSP_PlatformIsDetected>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f0c0:	79fb      	ldrb	r3, [r7, #7]
 800f0c2:	b2db      	uxtb	r3, r3
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f0d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f0da:	4806      	ldr	r0, [pc, #24]	@ (800f0f4 <BSP_PlatformIsDetected+0x28>)
 800f0dc:	f7f7 f8c0 	bl	8006260 <HAL_GPIO_ReadPin>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d001      	beq.n	800f0ea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f0ea:	79fb      	ldrb	r3, [r7, #7]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	40020c00 	.word	0x40020c00

0800f0f8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	4603      	mov	r3, r0
 800f100:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f102:	4b0b      	ldr	r3, [pc, #44]	@ (800f130 <SD_CheckStatus+0x38>)
 800f104:	2201      	movs	r2, #1
 800f106:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f108:	f7ff ffb0 	bl	800f06c <BSP_SD_GetCardState>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d107      	bne.n	800f122 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f112:	4b07      	ldr	r3, [pc, #28]	@ (800f130 <SD_CheckStatus+0x38>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	b2db      	uxtb	r3, r3
 800f118:	f023 0301 	bic.w	r3, r3, #1
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	4b04      	ldr	r3, [pc, #16]	@ (800f130 <SD_CheckStatus+0x38>)
 800f120:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f122:	4b03      	ldr	r3, [pc, #12]	@ (800f130 <SD_CheckStatus+0x38>)
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	b2db      	uxtb	r3, r3
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	20000011 	.word	0x20000011

0800f134 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	4603      	mov	r3, r0
 800f13c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f13e:	4b0b      	ldr	r3, [pc, #44]	@ (800f16c <SD_initialize+0x38>)
 800f140:	2201      	movs	r2, #1
 800f142:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f144:	f7ff ff30 	bl	800efa8 <BSP_SD_Init>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d107      	bne.n	800f15e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f14e:	79fb      	ldrb	r3, [r7, #7]
 800f150:	4618      	mov	r0, r3
 800f152:	f7ff ffd1 	bl	800f0f8 <SD_CheckStatus>
 800f156:	4603      	mov	r3, r0
 800f158:	461a      	mov	r2, r3
 800f15a:	4b04      	ldr	r3, [pc, #16]	@ (800f16c <SD_initialize+0x38>)
 800f15c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f15e:	4b03      	ldr	r3, [pc, #12]	@ (800f16c <SD_initialize+0x38>)
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	b2db      	uxtb	r3, r3
}
 800f164:	4618      	mov	r0, r3
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	20000011 	.word	0x20000011

0800f170 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f17a:	79fb      	ldrb	r3, [r7, #7]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff ffbb 	bl	800f0f8 <SD_CheckStatus>
 800f182:	4603      	mov	r3, r0
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b086      	sub	sp, #24
 800f190:	af00      	add	r7, sp, #0
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	607a      	str	r2, [r7, #4]
 800f196:	603b      	str	r3, [r7, #0]
 800f198:	4603      	mov	r3, r0
 800f19a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	6879      	ldr	r1, [r7, #4]
 800f1a8:	68b8      	ldr	r0, [r7, #8]
 800f1aa:	f7ff ff23 	bl	800eff4 <BSP_SD_ReadBlocks>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d107      	bne.n	800f1c4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f1b4:	bf00      	nop
 800f1b6:	f7ff ff59 	bl	800f06c <BSP_SD_GetCardState>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1fa      	bne.n	800f1b6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b086      	sub	sp, #24
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	607a      	str	r2, [r7, #4]
 800f1d8:	603b      	str	r3, [r7, #0]
 800f1da:	4603      	mov	r3, r0
 800f1dc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1e6:	683a      	ldr	r2, [r7, #0]
 800f1e8:	6879      	ldr	r1, [r7, #4]
 800f1ea:	68b8      	ldr	r0, [r7, #8]
 800f1ec:	f7ff ff20 	bl	800f030 <BSP_SD_WriteBlocks>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d107      	bne.n	800f206 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f1f6:	bf00      	nop
 800f1f8:	f7ff ff38 	bl	800f06c <BSP_SD_GetCardState>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1fa      	bne.n	800f1f8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f202:	2300      	movs	r3, #0
 800f204:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f206:	7dfb      	ldrb	r3, [r7, #23]
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3718      	adds	r7, #24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b08c      	sub	sp, #48	@ 0x30
 800f214:	af00      	add	r7, sp, #0
 800f216:	4603      	mov	r3, r0
 800f218:	603a      	str	r2, [r7, #0]
 800f21a:	71fb      	strb	r3, [r7, #7]
 800f21c:	460b      	mov	r3, r1
 800f21e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f220:	2301      	movs	r3, #1
 800f222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f226:	4b25      	ldr	r3, [pc, #148]	@ (800f2bc <SD_ioctl+0xac>)
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b00      	cmp	r3, #0
 800f232:	d001      	beq.n	800f238 <SD_ioctl+0x28>
 800f234:	2303      	movs	r3, #3
 800f236:	e03c      	b.n	800f2b2 <SD_ioctl+0xa2>

  switch (cmd)
 800f238:	79bb      	ldrb	r3, [r7, #6]
 800f23a:	2b03      	cmp	r3, #3
 800f23c:	d834      	bhi.n	800f2a8 <SD_ioctl+0x98>
 800f23e:	a201      	add	r2, pc, #4	@ (adr r2, 800f244 <SD_ioctl+0x34>)
 800f240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f244:	0800f255 	.word	0x0800f255
 800f248:	0800f25d 	.word	0x0800f25d
 800f24c:	0800f275 	.word	0x0800f275
 800f250:	0800f28f 	.word	0x0800f28f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f254:	2300      	movs	r3, #0
 800f256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f25a:	e028      	b.n	800f2ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f25c:	f107 030c 	add.w	r3, r7, #12
 800f260:	4618      	mov	r0, r3
 800f262:	f7ff ff13 	bl	800f08c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f272:	e01c      	b.n	800f2ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f274:	f107 030c 	add.w	r3, r7, #12
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff ff07 	bl	800f08c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f280:	b29a      	uxth	r2, r3
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f28c:	e00f      	b.n	800f2ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f28e:	f107 030c 	add.w	r3, r7, #12
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fefa 	bl	800f08c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29a:	0a5a      	lsrs	r2, r3, #9
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f2a6:	e002      	b.n	800f2ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f2a8:	2304      	movs	r3, #4
 800f2aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3730      	adds	r7, #48	@ 0x30
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20000011 	.word	0x20000011

0800f2c0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	4808      	ldr	r0, [pc, #32]	@ (800f30c <USBH_status+0x34>)
 800f2ec:	f000 fe30 	bl	800ff50 <USBH_MSC_UnitIsReady>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d002      	beq.n	800f2fc <USBH_status+0x24>
  {
    res = RES_OK;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	73fb      	strb	r3, [r7, #15]
 800f2fa:	e001      	b.n	800f300 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800f300:	7bfb      	ldrb	r3, [r7, #15]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	20001294 	.word	0x20001294

0800f310 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b094      	sub	sp, #80	@ 0x50
 800f314:	af02      	add	r7, sp, #8
 800f316:	60b9      	str	r1, [r7, #8]
 800f318:	607a      	str	r2, [r7, #4]
 800f31a:	603b      	str	r3, [r7, #0]
 800f31c:	4603      	mov	r3, r0
 800f31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800f326:	7bf9      	ldrb	r1, [r7, #15]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	9300      	str	r3, [sp, #0]
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	4813      	ldr	r0, [pc, #76]	@ (800f380 <USBH_read+0x70>)
 800f332:	f000 fe57 	bl	800ffe4 <USBH_MSC_Read>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d103      	bne.n	800f344 <USBH_read+0x34>
  {
    res = RES_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f342:	e017      	b.n	800f374 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800f344:	f107 0210 	add.w	r2, r7, #16
 800f348:	7bfb      	ldrb	r3, [r7, #15]
 800f34a:	4619      	mov	r1, r3
 800f34c:	480c      	ldr	r0, [pc, #48]	@ (800f380 <USBH_read+0x70>)
 800f34e:	f000 fe25 	bl	800ff9c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800f352:	7f7b      	ldrb	r3, [r7, #29]
 800f354:	2b3a      	cmp	r3, #58	@ 0x3a
 800f356:	d005      	beq.n	800f364 <USBH_read+0x54>
 800f358:	2b3a      	cmp	r3, #58	@ 0x3a
 800f35a:	dc07      	bgt.n	800f36c <USBH_read+0x5c>
 800f35c:	2b04      	cmp	r3, #4
 800f35e:	d001      	beq.n	800f364 <USBH_read+0x54>
 800f360:	2b28      	cmp	r3, #40	@ 0x28
 800f362:	d103      	bne.n	800f36c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800f364:	2303      	movs	r3, #3
 800f366:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800f36a:	e003      	b.n	800f374 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800f36c:	2301      	movs	r3, #1
 800f36e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800f372:	bf00      	nop
    }
  }

  return res;
 800f374:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3748      	adds	r7, #72	@ 0x48
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20001294 	.word	0x20001294

0800f384 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b094      	sub	sp, #80	@ 0x50
 800f388:	af02      	add	r7, sp, #8
 800f38a:	60b9      	str	r1, [r7, #8]
 800f38c:	607a      	str	r2, [r7, #4]
 800f38e:	603b      	str	r3, [r7, #0]
 800f390:	4603      	mov	r3, r0
 800f392:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f394:	2301      	movs	r3, #1
 800f396:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800f39a:	7bf9      	ldrb	r1, [r7, #15]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	4817      	ldr	r0, [pc, #92]	@ (800f404 <USBH_write+0x80>)
 800f3a6:	f000 fe86 	bl	80100b6 <USBH_MSC_Write>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d103      	bne.n	800f3b8 <USBH_write+0x34>
  {
    res = RES_OK;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f3b6:	e01f      	b.n	800f3f8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800f3b8:	f107 0210 	add.w	r2, r7, #16
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	4810      	ldr	r0, [pc, #64]	@ (800f404 <USBH_write+0x80>)
 800f3c2:	f000 fdeb 	bl	800ff9c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800f3c6:	7f7b      	ldrb	r3, [r7, #29]
 800f3c8:	2b3a      	cmp	r3, #58	@ 0x3a
 800f3ca:	d00d      	beq.n	800f3e8 <USBH_write+0x64>
 800f3cc:	2b3a      	cmp	r3, #58	@ 0x3a
 800f3ce:	dc0f      	bgt.n	800f3f0 <USBH_write+0x6c>
 800f3d0:	2b28      	cmp	r3, #40	@ 0x28
 800f3d2:	d009      	beq.n	800f3e8 <USBH_write+0x64>
 800f3d4:	2b28      	cmp	r3, #40	@ 0x28
 800f3d6:	dc0b      	bgt.n	800f3f0 <USBH_write+0x6c>
 800f3d8:	2b04      	cmp	r3, #4
 800f3da:	d005      	beq.n	800f3e8 <USBH_write+0x64>
 800f3dc:	2b27      	cmp	r3, #39	@ 0x27
 800f3de:	d107      	bne.n	800f3f0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800f3e6:	e007      	b.n	800f3f8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800f3e8:	2303      	movs	r3, #3
 800f3ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800f3ee:	e003      	b.n	800f3f8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800f3f6:	bf00      	nop
    }
  }

  return res;
 800f3f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3748      	adds	r7, #72	@ 0x48
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	20001294 	.word	0x20001294

0800f408 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b090      	sub	sp, #64	@ 0x40
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	4603      	mov	r3, r0
 800f410:	603a      	str	r2, [r7, #0]
 800f412:	71fb      	strb	r3, [r7, #7]
 800f414:	460b      	mov	r3, r1
 800f416:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f418:	2301      	movs	r3, #1
 800f41a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800f41e:	79bb      	ldrb	r3, [r7, #6]
 800f420:	2b03      	cmp	r3, #3
 800f422:	d852      	bhi.n	800f4ca <USBH_ioctl+0xc2>
 800f424:	a201      	add	r2, pc, #4	@ (adr r2, 800f42c <USBH_ioctl+0x24>)
 800f426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f42a:	bf00      	nop
 800f42c:	0800f43d 	.word	0x0800f43d
 800f430:	0800f445 	.word	0x0800f445
 800f434:	0800f46f 	.word	0x0800f46f
 800f438:	0800f49b 	.word	0x0800f49b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800f442:	e045      	b.n	800f4d0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800f444:	f107 0208 	add.w	r2, r7, #8
 800f448:	79fb      	ldrb	r3, [r7, #7]
 800f44a:	4619      	mov	r1, r3
 800f44c:	4823      	ldr	r0, [pc, #140]	@ (800f4dc <USBH_ioctl+0xd4>)
 800f44e:	f000 fda5 	bl	800ff9c <USBH_MSC_GetLUNInfo>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800f45e:	2300      	movs	r3, #0
 800f460:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800f464:	e034      	b.n	800f4d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800f46c:	e030      	b.n	800f4d0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800f46e:	f107 0208 	add.w	r2, r7, #8
 800f472:	79fb      	ldrb	r3, [r7, #7]
 800f474:	4619      	mov	r1, r3
 800f476:	4819      	ldr	r0, [pc, #100]	@ (800f4dc <USBH_ioctl+0xd4>)
 800f478:	f000 fd90 	bl	800ff9c <USBH_MSC_GetLUNInfo>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d107      	bne.n	800f492 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800f482:	8a3b      	ldrh	r3, [r7, #16]
 800f484:	461a      	mov	r2, r3
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800f48a:	2300      	movs	r3, #0
 800f48c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800f490:	e01e      	b.n	800f4d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800f498:	e01a      	b.n	800f4d0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800f49a:	f107 0208 	add.w	r2, r7, #8
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	480e      	ldr	r0, [pc, #56]	@ (800f4dc <USBH_ioctl+0xd4>)
 800f4a4:	f000 fd7a 	bl	800ff9c <USBH_MSC_GetLUNInfo>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d109      	bne.n	800f4c2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800f4ae:	8a3b      	ldrh	r3, [r7, #16]
 800f4b0:	0a5b      	lsrs	r3, r3, #9
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800f4c0:	e006      	b.n	800f4d0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800f4c8:	e002      	b.n	800f4d0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800f4ca:	2304      	movs	r3, #4
 800f4cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 800f4d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3740      	adds	r7, #64	@ 0x40
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	20001294 	.word	0x20001294

0800f4e0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f4e0:	b590      	push	{r4, r7, lr}
 800f4e2:	b089      	sub	sp, #36	@ 0x24
 800f4e4:	af04      	add	r7, sp, #16
 800f4e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f4ee:	7919      	ldrb	r1, [r3, #4]
 800f4f0:	2350      	movs	r3, #80	@ 0x50
 800f4f2:	2206      	movs	r2, #6
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f001 fc87 	bl	8010e08 <USBH_FindInterface>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	2bff      	cmp	r3, #255	@ 0xff
 800f502:	d002      	beq.n	800f50a <USBH_MSC_InterfaceInit+0x2a>
 800f504:	7bfb      	ldrb	r3, [r7, #15]
 800f506:	2b01      	cmp	r3, #1
 800f508:	d901      	bls.n	800f50e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f50a:	2302      	movs	r3, #2
 800f50c:	e106      	b.n	800f71c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f001 fc5c 	bl	8010dd0 <USBH_SelectInterface>
 800f518:	4603      	mov	r3, r0
 800f51a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f51c:	7bbb      	ldrb	r3, [r7, #14]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800f522:	2302      	movs	r3, #2
 800f524:	e0fa      	b.n	800f71c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800f52c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800f530:	f006 fc7c 	bl	8015e2c <malloc>
 800f534:	4603      	mov	r3, r0
 800f536:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d101      	bne.n	800f54c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800f548:	2302      	movs	r3, #2
 800f54a:	e0e7      	b.n	800f71c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800f54c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f550:	2100      	movs	r1, #0
 800f552:	68b8      	ldr	r0, [r7, #8]
 800f554:	f007 fb2c 	bl	8016bb0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	211a      	movs	r1, #26
 800f55e:	fb01 f303 	mul.w	r3, r1, r3
 800f562:	4413      	add	r3, r2
 800f564:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	b25b      	sxtb	r3, r3
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	da16      	bge.n	800f59e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800f570:	7bfb      	ldrb	r3, [r7, #15]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	211a      	movs	r1, #26
 800f576:	fb01 f303 	mul.w	r3, r1, r3
 800f57a:	4413      	add	r3, r2
 800f57c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f580:	781a      	ldrb	r2, [r3, #0]
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	211a      	movs	r1, #26
 800f58c:	fb01 f303 	mul.w	r3, r1, r3
 800f590:	4413      	add	r3, r2
 800f592:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f596:	881a      	ldrh	r2, [r3, #0]
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	815a      	strh	r2, [r3, #10]
 800f59c:	e015      	b.n	800f5ca <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800f59e:	7bfb      	ldrb	r3, [r7, #15]
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	211a      	movs	r1, #26
 800f5a4:	fb01 f303 	mul.w	r3, r1, r3
 800f5a8:	4413      	add	r3, r2
 800f5aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f5ae:	781a      	ldrb	r2, [r3, #0]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	211a      	movs	r1, #26
 800f5ba:	fb01 f303 	mul.w	r3, r1, r3
 800f5be:	4413      	add	r3, r2
 800f5c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f5c4:	881a      	ldrh	r2, [r3, #0]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	211a      	movs	r1, #26
 800f5d0:	fb01 f303 	mul.w	r3, r1, r3
 800f5d4:	4413      	add	r3, r2
 800f5d6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	b25b      	sxtb	r3, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	da16      	bge.n	800f610 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	211a      	movs	r1, #26
 800f5e8:	fb01 f303 	mul.w	r3, r1, r3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5f2:	781a      	ldrb	r2, [r3, #0]
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	211a      	movs	r1, #26
 800f5fe:	fb01 f303 	mul.w	r3, r1, r3
 800f602:	4413      	add	r3, r2
 800f604:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f608:	881a      	ldrh	r2, [r3, #0]
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	815a      	strh	r2, [r3, #10]
 800f60e:	e015      	b.n	800f63c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800f610:	7bfb      	ldrb	r3, [r7, #15]
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	211a      	movs	r1, #26
 800f616:	fb01 f303 	mul.w	r3, r1, r3
 800f61a:	4413      	add	r3, r2
 800f61c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	211a      	movs	r1, #26
 800f62c:	fb01 f303 	mul.w	r3, r1, r3
 800f630:	4413      	add	r3, r2
 800f632:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f636:	881a      	ldrh	r2, [r3, #0]
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2200      	movs	r2, #0
 800f640:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	2200      	movs	r2, #0
 800f646:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	2200      	movs	r2, #0
 800f64c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	799b      	ldrb	r3, [r3, #6]
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f002 ff64 	bl	8012522 <USBH_AllocPipe>
 800f65a:	4603      	mov	r3, r0
 800f65c:	461a      	mov	r2, r3
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	79db      	ldrb	r3, [r3, #7]
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f002 ff5a 	bl	8012522 <USBH_AllocPipe>
 800f66e:	4603      	mov	r3, r0
 800f670:	461a      	mov	r2, r3
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 fdc2 	bl	8010200 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	799b      	ldrb	r3, [r3, #6]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d01e      	beq.n	800f6c2 <USBH_MSC_InterfaceInit+0x1e2>
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	891b      	ldrh	r3, [r3, #8]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d01a      	beq.n	800f6c2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	7959      	ldrb	r1, [r3, #5]
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	7998      	ldrb	r0, [r3, #6]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f6a0:	68ba      	ldr	r2, [r7, #8]
 800f6a2:	8912      	ldrh	r2, [r2, #8]
 800f6a4:	9202      	str	r2, [sp, #8]
 800f6a6:	2202      	movs	r2, #2
 800f6a8:	9201      	str	r2, [sp, #4]
 800f6aa:	9300      	str	r3, [sp, #0]
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f002 ff07 	bl	80124c4 <USBH_OpenPipe>
 800f6b6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	79db      	ldrb	r3, [r3, #7]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d02c      	beq.n	800f71a <USBH_MSC_InterfaceInit+0x23a>
 800f6c0:	e001      	b.n	800f6c6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800f6c2:	2303      	movs	r3, #3
 800f6c4:	e02a      	b.n	800f71c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	895b      	ldrh	r3, [r3, #10]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d025      	beq.n	800f71a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	7919      	ldrb	r1, [r3, #4]
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	79d8      	ldrb	r0, [r3, #7]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	8952      	ldrh	r2, [r2, #10]
 800f6e6:	9202      	str	r2, [sp, #8]
 800f6e8:	2202      	movs	r2, #2
 800f6ea:	9201      	str	r2, [sp, #4]
 800f6ec:	9300      	str	r3, [sp, #0]
 800f6ee:	4623      	mov	r3, r4
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f002 fee6 	bl	80124c4 <USBH_OpenPipe>
 800f6f8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	791b      	ldrb	r3, [r3, #4]
 800f6fe:	2200      	movs	r2, #0
 800f700:	4619      	mov	r1, r3
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f006 fad8 	bl	8015cb8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	795b      	ldrb	r3, [r3, #5]
 800f70c:	2200      	movs	r2, #0
 800f70e:	4619      	mov	r1, r3
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f006 fad1 	bl	8015cb8 <USBH_LL_SetToggle>

  return USBH_OK;
 800f716:	2300      	movs	r3, #0
 800f718:	e000      	b.n	800f71c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800f71a:	2303      	movs	r3, #3
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	bd90      	pop	{r4, r7, pc}

0800f724 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f732:	69db      	ldr	r3, [r3, #28]
 800f734:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	795b      	ldrb	r3, [r3, #5]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00e      	beq.n	800f75c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	795b      	ldrb	r3, [r3, #5]
 800f742:	4619      	mov	r1, r3
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f002 fedc 	bl	8012502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	795b      	ldrb	r3, [r3, #5]
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f002 ff07 	bl	8012564 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2200      	movs	r2, #0
 800f75a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	791b      	ldrb	r3, [r3, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00e      	beq.n	800f782 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	791b      	ldrb	r3, [r3, #4]
 800f768:	4619      	mov	r1, r3
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f002 fec9 	bl	8012502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	791b      	ldrb	r3, [r3, #4]
 800f774:	4619      	mov	r1, r3
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f002 fef4 	bl	8012564 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2200      	movs	r2, #0
 800f780:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f788:	69db      	ldr	r3, [r3, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00b      	beq.n	800f7a6 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f794:	69db      	ldr	r3, [r3, #28]
 800f796:	4618      	mov	r0, r3
 800f798:	f006 fb50 	bl	8015e3c <free>
    phost->pActiveClass->pData = 0U;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f7be:	69db      	ldr	r3, [r3, #28]
 800f7c0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	7b9b      	ldrb	r3, [r3, #14]
 800f7ca:	2b03      	cmp	r3, #3
 800f7cc:	d041      	beq.n	800f852 <USBH_MSC_ClassRequest+0xa2>
 800f7ce:	2b03      	cmp	r3, #3
 800f7d0:	dc4b      	bgt.n	800f86a <USBH_MSC_ClassRequest+0xba>
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d001      	beq.n	800f7da <USBH_MSC_ClassRequest+0x2a>
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	d147      	bne.n	800f86a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 fcef 	bl	80101c2 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800f7e8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ea:	2b03      	cmp	r3, #3
 800f7ec:	d104      	bne.n	800f7f8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d137      	bne.n	800f86e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b02      	cmp	r3, #2
 800f804:	d804      	bhi.n	800f810 <USBH_MSC_ClassRequest+0x60>
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	3301      	adds	r3, #1
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	e000      	b.n	800f812 <USBH_MSC_ClassRequest+0x62>
 800f810:	2202      	movs	r2, #2
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800f816:	2300      	movs	r3, #0
 800f818:	73bb      	strb	r3, [r7, #14]
 800f81a:	e014      	b.n	800f846 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800f81c:	7bbb      	ldrb	r3, [r7, #14]
 800f81e:	68ba      	ldr	r2, [r7, #8]
 800f820:	2134      	movs	r1, #52	@ 0x34
 800f822:	fb01 f303 	mul.w	r3, r1, r3
 800f826:	4413      	add	r3, r2
 800f828:	3392      	adds	r3, #146	@ 0x92
 800f82a:	2202      	movs	r2, #2
 800f82c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800f82e:	7bbb      	ldrb	r3, [r7, #14]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	2134      	movs	r1, #52	@ 0x34
 800f834:	fb01 f303 	mul.w	r3, r1, r3
 800f838:	4413      	add	r3, r2
 800f83a:	33c1      	adds	r3, #193	@ 0xc1
 800f83c:	2200      	movs	r2, #0
 800f83e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800f840:	7bbb      	ldrb	r3, [r7, #14]
 800f842:	3301      	adds	r3, #1
 800f844:	73bb      	strb	r3, [r7, #14]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	7bba      	ldrb	r2, [r7, #14]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d3e5      	bcc.n	800f81c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800f850:	e00d      	b.n	800f86e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800f852:	2100      	movs	r1, #0
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f002 f8af 	bl	80119b8 <USBH_ClrFeature>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d108      	bne.n	800f872 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	7bda      	ldrb	r2, [r3, #15]
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	739a      	strb	r2, [r3, #14]
      }
      break;
 800f868:	e003      	b.n	800f872 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800f86a:	bf00      	nop
 800f86c:	e002      	b.n	800f874 <USBH_MSC_ClassRequest+0xc4>
      break;
 800f86e:	bf00      	nop
 800f870:	e000      	b.n	800f874 <USBH_MSC_ClassRequest+0xc4>
      break;
 800f872:	bf00      	nop
  }

  return status;
 800f874:	7bfb      	ldrb	r3, [r7, #15]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3710      	adds	r7, #16
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
	...

0800f880 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f88e:	69db      	ldr	r3, [r3, #28]
 800f890:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800f892:	2301      	movs	r3, #1
 800f894:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800f896:	2301      	movs	r3, #1
 800f898:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800f89a:	2301      	movs	r3, #1
 800f89c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	7b1b      	ldrb	r3, [r3, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <USBH_MSC_Process+0x2e>
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	f000 826f 	beq.w	800fd8a <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800f8ac:	e270      	b.n	800fd90 <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f8b4:	693a      	ldr	r2, [r7, #16]
 800f8b6:	7812      	ldrb	r2, [r2, #0]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	f080 824e 	bcs.w	800fd5a <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	2334      	movs	r3, #52	@ 0x34
 800f8ca:	fb01 f303 	mul.w	r3, r1, r3
 800f8ce:	4413      	add	r3, r2
 800f8d0:	3391      	adds	r3, #145	@ 0x91
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f8dc:	4619      	mov	r1, r3
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	2334      	movs	r3, #52	@ 0x34
 800f8e2:	fb01 f303 	mul.w	r3, r1, r3
 800f8e6:	4413      	add	r3, r2
 800f8e8:	3390      	adds	r3, #144	@ 0x90
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	2b08      	cmp	r3, #8
 800f8ee:	f200 8242 	bhi.w	800fd76 <USBH_MSC_Process+0x4f6>
 800f8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f8 <USBH_MSC_Process+0x78>)
 800f8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f8:	0800f91d 	.word	0x0800f91d
 800f8fc:	0800fd77 	.word	0x0800fd77
 800f900:	0800f9e5 	.word	0x0800f9e5
 800f904:	0800fb69 	.word	0x0800fb69
 800f908:	0800f943 	.word	0x0800f943
 800f90c:	0800fc35 	.word	0x0800fc35
 800f910:	0800fd77 	.word	0x0800fd77
 800f914:	0800fd77 	.word	0x0800fd77
 800f918:	0800fd49 	.word	0x0800fd49
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f922:	4619      	mov	r1, r3
 800f924:	693a      	ldr	r2, [r7, #16]
 800f926:	2334      	movs	r3, #52	@ 0x34
 800f928:	fb01 f303 	mul.w	r3, r1, r3
 800f92c:	4413      	add	r3, r2
 800f92e:	3390      	adds	r3, #144	@ 0x90
 800f930:	2204      	movs	r2, #4
 800f932:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800f940:	e222      	b.n	800fd88 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f948:	b2d9      	uxtb	r1, r3
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f950:	461a      	mov	r2, r3
 800f952:	2334      	movs	r3, #52	@ 0x34
 800f954:	fb02 f303 	mul.w	r3, r2, r3
 800f958:	3398      	adds	r3, #152	@ 0x98
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	4413      	add	r3, r2
 800f95e:	3307      	adds	r3, #7
 800f960:	461a      	mov	r2, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 ff69 	bl	801083a <USBH_MSC_SCSI_Inquiry>
 800f968:	4603      	mov	r3, r0
 800f96a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10b      	bne.n	800f98a <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f978:	4619      	mov	r1, r3
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	2334      	movs	r3, #52	@ 0x34
 800f97e:	fb01 f303 	mul.w	r3, r1, r3
 800f982:	4413      	add	r3, r2
 800f984:	3390      	adds	r3, #144	@ 0x90
 800f986:	2202      	movs	r2, #2
 800f988:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d10c      	bne.n	800f9aa <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f996:	4619      	mov	r1, r3
 800f998:	693a      	ldr	r2, [r7, #16]
 800f99a:	2334      	movs	r3, #52	@ 0x34
 800f99c:	fb01 f303 	mul.w	r3, r1, r3
 800f9a0:	4413      	add	r3, r2
 800f9a2:	3390      	adds	r3, #144	@ 0x90
 800f9a4:	2205      	movs	r2, #5
 800f9a6:	701a      	strb	r2, [r3, #0]
            break;
 800f9a8:	e1e7      	b.n	800fd7a <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800f9aa:	7bfb      	ldrb	r3, [r7, #15]
 800f9ac:	2b04      	cmp	r3, #4
 800f9ae:	f040 81e4 	bne.w	800fd7a <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	693a      	ldr	r2, [r7, #16]
 800f9bc:	2334      	movs	r3, #52	@ 0x34
 800f9be:	fb01 f303 	mul.w	r3, r1, r3
 800f9c2:	4413      	add	r3, r2
 800f9c4:	3390      	adds	r3, #144	@ 0x90
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	2334      	movs	r3, #52	@ 0x34
 800f9d6:	fb01 f303 	mul.w	r3, r1, r3
 800f9da:	4413      	add	r3, r2
 800f9dc:	3391      	adds	r3, #145	@ 0x91
 800f9de:	2202      	movs	r2, #2
 800f9e0:	701a      	strb	r2, [r3, #0]
            break;
 800f9e2:	e1ca      	b.n	800fd7a <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 fe66 	bl	80106c0 <USBH_MSC_SCSI_TestUnitReady>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800f9f8:	7bbb      	ldrb	r3, [r7, #14]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d149      	bne.n	800fa92 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa04:	4619      	mov	r1, r3
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	2334      	movs	r3, #52	@ 0x34
 800fa0a:	fb01 f303 	mul.w	r3, r1, r3
 800fa0e:	4413      	add	r3, r2
 800fa10:	3392      	adds	r3, #146	@ 0x92
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00c      	beq.n	800fa32 <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa1e:	4619      	mov	r1, r3
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	2334      	movs	r3, #52	@ 0x34
 800fa24:	fb01 f303 	mul.w	r3, r1, r3
 800fa28:	4413      	add	r3, r2
 800fa2a:	33c1      	adds	r3, #193	@ 0xc1
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	701a      	strb	r2, [r3, #0]
 800fa30:	e00b      	b.n	800fa4a <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa38:	4619      	mov	r1, r3
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	2334      	movs	r3, #52	@ 0x34
 800fa3e:	fb01 f303 	mul.w	r3, r1, r3
 800fa42:	4413      	add	r3, r2
 800fa44:	33c1      	adds	r3, #193	@ 0xc1
 800fa46:	2200      	movs	r2, #0
 800fa48:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa50:	4619      	mov	r1, r3
 800fa52:	693a      	ldr	r2, [r7, #16]
 800fa54:	2334      	movs	r3, #52	@ 0x34
 800fa56:	fb01 f303 	mul.w	r3, r1, r3
 800fa5a:	4413      	add	r3, r2
 800fa5c:	3390      	adds	r3, #144	@ 0x90
 800fa5e:	2203      	movs	r2, #3
 800fa60:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa68:	4619      	mov	r1, r3
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	2334      	movs	r3, #52	@ 0x34
 800fa6e:	fb01 f303 	mul.w	r3, r1, r3
 800fa72:	4413      	add	r3, r2
 800fa74:	3391      	adds	r3, #145	@ 0x91
 800fa76:	2200      	movs	r2, #0
 800fa78:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa80:	4619      	mov	r1, r3
 800fa82:	693a      	ldr	r2, [r7, #16]
 800fa84:	2334      	movs	r3, #52	@ 0x34
 800fa86:	fb01 f303 	mul.w	r3, r1, r3
 800fa8a:	4413      	add	r3, r2
 800fa8c:	3392      	adds	r3, #146	@ 0x92
 800fa8e:	2200      	movs	r2, #0
 800fa90:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d14a      	bne.n	800fb2e <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fa9e:	4619      	mov	r1, r3
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	2334      	movs	r3, #52	@ 0x34
 800faa4:	fb01 f303 	mul.w	r3, r1, r3
 800faa8:	4413      	add	r3, r2
 800faaa:	3392      	adds	r3, #146	@ 0x92
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	2b02      	cmp	r3, #2
 800fab0:	d00c      	beq.n	800facc <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fab8:	4619      	mov	r1, r3
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	2334      	movs	r3, #52	@ 0x34
 800fabe:	fb01 f303 	mul.w	r3, r1, r3
 800fac2:	4413      	add	r3, r2
 800fac4:	33c1      	adds	r3, #193	@ 0xc1
 800fac6:	2201      	movs	r2, #1
 800fac8:	701a      	strb	r2, [r3, #0]
 800faca:	e00b      	b.n	800fae4 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fad2:	4619      	mov	r1, r3
 800fad4:	693a      	ldr	r2, [r7, #16]
 800fad6:	2334      	movs	r3, #52	@ 0x34
 800fad8:	fb01 f303 	mul.w	r3, r1, r3
 800fadc:	4413      	add	r3, r2
 800fade:	33c1      	adds	r3, #193	@ 0xc1
 800fae0:	2200      	movs	r2, #0
 800fae2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800faea:	4619      	mov	r1, r3
 800faec:	693a      	ldr	r2, [r7, #16]
 800faee:	2334      	movs	r3, #52	@ 0x34
 800faf0:	fb01 f303 	mul.w	r3, r1, r3
 800faf4:	4413      	add	r3, r2
 800faf6:	3390      	adds	r3, #144	@ 0x90
 800faf8:	2205      	movs	r2, #5
 800fafa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb02:	4619      	mov	r1, r3
 800fb04:	693a      	ldr	r2, [r7, #16]
 800fb06:	2334      	movs	r3, #52	@ 0x34
 800fb08:	fb01 f303 	mul.w	r3, r1, r3
 800fb0c:	4413      	add	r3, r2
 800fb0e:	3391      	adds	r3, #145	@ 0x91
 800fb10:	2201      	movs	r2, #1
 800fb12:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	693a      	ldr	r2, [r7, #16]
 800fb1e:	2334      	movs	r3, #52	@ 0x34
 800fb20:	fb01 f303 	mul.w	r3, r1, r3
 800fb24:	4413      	add	r3, r2
 800fb26:	3392      	adds	r3, #146	@ 0x92
 800fb28:	2202      	movs	r2, #2
 800fb2a:	701a      	strb	r2, [r3, #0]
            break;
 800fb2c:	e127      	b.n	800fd7e <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800fb2e:	7bbb      	ldrb	r3, [r7, #14]
 800fb30:	2b04      	cmp	r3, #4
 800fb32:	f040 8124 	bne.w	800fd7e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	2334      	movs	r3, #52	@ 0x34
 800fb42:	fb01 f303 	mul.w	r3, r1, r3
 800fb46:	4413      	add	r3, r2
 800fb48:	3390      	adds	r3, #144	@ 0x90
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb54:	4619      	mov	r1, r3
 800fb56:	693a      	ldr	r2, [r7, #16]
 800fb58:	2334      	movs	r3, #52	@ 0x34
 800fb5a:	fb01 f303 	mul.w	r3, r1, r3
 800fb5e:	4413      	add	r3, r2
 800fb60:	3391      	adds	r3, #145	@ 0x91
 800fb62:	2202      	movs	r2, #2
 800fb64:	701a      	strb	r2, [r3, #0]
            break;
 800fb66:	e10a      	b.n	800fd7e <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb6e:	b2d9      	uxtb	r1, r3
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb76:	461a      	mov	r2, r3
 800fb78:	2334      	movs	r3, #52	@ 0x34
 800fb7a:	fb02 f303 	mul.w	r3, r2, r3
 800fb7e:	3390      	adds	r3, #144	@ 0x90
 800fb80:	693a      	ldr	r2, [r7, #16]
 800fb82:	4413      	add	r3, r2
 800fb84:	3304      	adds	r3, #4
 800fb86:	461a      	mov	r2, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 fddc 	bl	8010746 <USBH_MSC_SCSI_ReadCapacity>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800fb92:	7bfb      	ldrb	r3, [r7, #15]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d120      	bne.n	800fbda <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fb9e:	4619      	mov	r1, r3
 800fba0:	693a      	ldr	r2, [r7, #16]
 800fba2:	2334      	movs	r3, #52	@ 0x34
 800fba4:	fb01 f303 	mul.w	r3, r1, r3
 800fba8:	4413      	add	r3, r2
 800fbaa:	3390      	adds	r3, #144	@ 0x90
 800fbac:	2201      	movs	r2, #1
 800fbae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	693a      	ldr	r2, [r7, #16]
 800fbba:	2334      	movs	r3, #52	@ 0x34
 800fbbc:	fb01 f303 	mul.w	r3, r1, r3
 800fbc0:	4413      	add	r3, r2
 800fbc2:	3391      	adds	r3, #145	@ 0x91
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fbce:	3301      	adds	r3, #1
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800fbd8:	e0d3      	b.n	800fd82 <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	2b02      	cmp	r3, #2
 800fbde:	d10c      	bne.n	800fbfa <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	693a      	ldr	r2, [r7, #16]
 800fbea:	2334      	movs	r3, #52	@ 0x34
 800fbec:	fb01 f303 	mul.w	r3, r1, r3
 800fbf0:	4413      	add	r3, r2
 800fbf2:	3390      	adds	r3, #144	@ 0x90
 800fbf4:	2205      	movs	r2, #5
 800fbf6:	701a      	strb	r2, [r3, #0]
            break;
 800fbf8:	e0c3      	b.n	800fd82 <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800fbfa:	7bfb      	ldrb	r3, [r7, #15]
 800fbfc:	2b04      	cmp	r3, #4
 800fbfe:	f040 80c0 	bne.w	800fd82 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fc08:	4619      	mov	r1, r3
 800fc0a:	693a      	ldr	r2, [r7, #16]
 800fc0c:	2334      	movs	r3, #52	@ 0x34
 800fc0e:	fb01 f303 	mul.w	r3, r1, r3
 800fc12:	4413      	add	r3, r2
 800fc14:	3390      	adds	r3, #144	@ 0x90
 800fc16:	2201      	movs	r2, #1
 800fc18:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fc20:	4619      	mov	r1, r3
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	2334      	movs	r3, #52	@ 0x34
 800fc26:	fb01 f303 	mul.w	r3, r1, r3
 800fc2a:	4413      	add	r3, r2
 800fc2c:	3391      	adds	r3, #145	@ 0x91
 800fc2e:	2202      	movs	r2, #2
 800fc30:	701a      	strb	r2, [r3, #0]
            break;
 800fc32:	e0a6      	b.n	800fd82 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fc3a:	b2d9      	uxtb	r1, r3
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fc42:	461a      	mov	r2, r3
 800fc44:	2334      	movs	r3, #52	@ 0x34
 800fc46:	fb02 f303 	mul.w	r3, r2, r3
 800fc4a:	3398      	adds	r3, #152	@ 0x98
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	4413      	add	r3, r2
 800fc50:	3304      	adds	r3, #4
 800fc52:	461a      	mov	r2, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 fe95 	bl	8010984 <USBH_MSC_SCSI_RequestSense>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800fc5e:	7bfb      	ldrb	r3, [r7, #15]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d145      	bne.n	800fcf0 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	693a      	ldr	r2, [r7, #16]
 800fc6e:	2334      	movs	r3, #52	@ 0x34
 800fc70:	fb01 f303 	mul.w	r3, r1, r3
 800fc74:	4413      	add	r3, r2
 800fc76:	339c      	adds	r3, #156	@ 0x9c
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	2b06      	cmp	r3, #6
 800fc7c:	d00c      	beq.n	800fc98 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fc84:	4619      	mov	r1, r3
 800fc86:	693a      	ldr	r2, [r7, #16]
 800fc88:	2334      	movs	r3, #52	@ 0x34
 800fc8a:	fb01 f303 	mul.w	r3, r1, r3
 800fc8e:	4413      	add	r3, r2
 800fc90:	339c      	adds	r3, #156	@ 0x9c
 800fc92:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800fc94:	2b02      	cmp	r3, #2
 800fc96:	d117      	bne.n	800fcc8 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	f242 720f 	movw	r2, #9999	@ 0x270f
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d80c      	bhi.n	800fcc8 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	693a      	ldr	r2, [r7, #16]
 800fcb8:	2334      	movs	r3, #52	@ 0x34
 800fcba:	fb01 f303 	mul.w	r3, r1, r3
 800fcbe:	4413      	add	r3, r2
 800fcc0:	3390      	adds	r3, #144	@ 0x90
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	701a      	strb	r2, [r3, #0]
                  break;
 800fcc6:	e05f      	b.n	800fd88 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fcce:	4619      	mov	r1, r3
 800fcd0:	693a      	ldr	r2, [r7, #16]
 800fcd2:	2334      	movs	r3, #52	@ 0x34
 800fcd4:	fb01 f303 	mul.w	r3, r1, r3
 800fcd8:	4413      	add	r3, r2
 800fcda:	3390      	adds	r3, #144	@ 0x90
 800fcdc:	2201      	movs	r2, #1
 800fcde:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fce6:	3301      	adds	r3, #1
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 800fcf0:	7bfb      	ldrb	r3, [r7, #15]
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	d10c      	bne.n	800fd10 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	2334      	movs	r3, #52	@ 0x34
 800fd02:	fb01 f303 	mul.w	r3, r1, r3
 800fd06:	4413      	add	r3, r2
 800fd08:	3390      	adds	r3, #144	@ 0x90
 800fd0a:	2208      	movs	r2, #8
 800fd0c:	701a      	strb	r2, [r3, #0]
            break;
 800fd0e:	e03a      	b.n	800fd86 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
 800fd12:	2b04      	cmp	r3, #4
 800fd14:	d137      	bne.n	800fd86 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	693a      	ldr	r2, [r7, #16]
 800fd20:	2334      	movs	r3, #52	@ 0x34
 800fd22:	fb01 f303 	mul.w	r3, r1, r3
 800fd26:	4413      	add	r3, r2
 800fd28:	3390      	adds	r3, #144	@ 0x90
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fd34:	4619      	mov	r1, r3
 800fd36:	693a      	ldr	r2, [r7, #16]
 800fd38:	2334      	movs	r3, #52	@ 0x34
 800fd3a:	fb01 f303 	mul.w	r3, r1, r3
 800fd3e:	4413      	add	r3, r2
 800fd40:	3391      	adds	r3, #145	@ 0x91
 800fd42:	2202      	movs	r2, #2
 800fd44:	701a      	strb	r2, [r3, #0]
            break;
 800fd46:	e01e      	b.n	800fd86 <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800fd4e:	3301      	adds	r3, #1
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800fd58:	e016      	b.n	800fd88 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	2201      	movs	r2, #1
 800fd66:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fd6e:	2102      	movs	r1, #2
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	4798      	blx	r3
      break;
 800fd74:	e00c      	b.n	800fd90 <USBH_MSC_Process+0x510>
            break;
 800fd76:	bf00      	nop
 800fd78:	e00a      	b.n	800fd90 <USBH_MSC_Process+0x510>
            break;
 800fd7a:	bf00      	nop
 800fd7c:	e008      	b.n	800fd90 <USBH_MSC_Process+0x510>
            break;
 800fd7e:	bf00      	nop
 800fd80:	e006      	b.n	800fd90 <USBH_MSC_Process+0x510>
            break;
 800fd82:	bf00      	nop
 800fd84:	e004      	b.n	800fd90 <USBH_MSC_Process+0x510>
            break;
 800fd86:	bf00      	nop
      break;
 800fd88:	e002      	b.n	800fd90 <USBH_MSC_Process+0x510>
      error = USBH_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	75fb      	strb	r3, [r7, #23]
      break;
 800fd8e:	bf00      	nop
  }
  return error;
 800fd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3718      	adds	r7, #24
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop

0800fd9c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b088      	sub	sp, #32
 800fdb6:	af02      	add	r7, sp, #8
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	460b      	mov	r3, r1
 800fdbc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fdc4:	69db      	ldr	r3, [r3, #28]
 800fdc6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800fdd0:	78fb      	ldrb	r3, [r7, #3]
 800fdd2:	693a      	ldr	r2, [r7, #16]
 800fdd4:	2134      	movs	r1, #52	@ 0x34
 800fdd6:	fb01 f303 	mul.w	r3, r1, r3
 800fdda:	4413      	add	r3, r2
 800fddc:	3390      	adds	r3, #144	@ 0x90
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	2b07      	cmp	r3, #7
 800fde2:	d03c      	beq.n	800fe5e <USBH_MSC_RdWrProcess+0xac>
 800fde4:	2b07      	cmp	r3, #7
 800fde6:	f300 80a7 	bgt.w	800ff38 <USBH_MSC_RdWrProcess+0x186>
 800fdea:	2b05      	cmp	r3, #5
 800fdec:	d06c      	beq.n	800fec8 <USBH_MSC_RdWrProcess+0x116>
 800fdee:	2b06      	cmp	r3, #6
 800fdf0:	f040 80a2 	bne.w	800ff38 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800fdf4:	78f9      	ldrb	r1, [r7, #3]
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fea4 	bl	8010b4c <USBH_MSC_SCSI_Read>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d10b      	bne.n	800fe26 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800fe0e:	78fb      	ldrb	r3, [r7, #3]
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	2134      	movs	r1, #52	@ 0x34
 800fe14:	fb01 f303 	mul.w	r3, r1, r3
 800fe18:	4413      	add	r3, r2
 800fe1a:	3390      	adds	r3, #144	@ 0x90
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800fe20:	2300      	movs	r3, #0
 800fe22:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fe24:	e08a      	b.n	800ff3c <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800fe26:	7bfb      	ldrb	r3, [r7, #15]
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	d109      	bne.n	800fe40 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800fe2c:	78fb      	ldrb	r3, [r7, #3]
 800fe2e:	693a      	ldr	r2, [r7, #16]
 800fe30:	2134      	movs	r1, #52	@ 0x34
 800fe32:	fb01 f303 	mul.w	r3, r1, r3
 800fe36:	4413      	add	r3, r2
 800fe38:	3390      	adds	r3, #144	@ 0x90
 800fe3a:	2205      	movs	r2, #5
 800fe3c:	701a      	strb	r2, [r3, #0]
      break;
 800fe3e:	e07d      	b.n	800ff3c <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
 800fe42:	2b04      	cmp	r3, #4
 800fe44:	d17a      	bne.n	800ff3c <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800fe46:	78fb      	ldrb	r3, [r7, #3]
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	2134      	movs	r1, #52	@ 0x34
 800fe4c:	fb01 f303 	mul.w	r3, r1, r3
 800fe50:	4413      	add	r3, r2
 800fe52:	3390      	adds	r3, #144	@ 0x90
 800fe54:	2208      	movs	r2, #8
 800fe56:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800fe58:	2302      	movs	r3, #2
 800fe5a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe5c:	e06e      	b.n	800ff3c <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800fe5e:	78f9      	ldrb	r1, [r7, #3]
 800fe60:	2300      	movs	r3, #0
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	2300      	movs	r3, #0
 800fe66:	2200      	movs	r2, #0
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fe04 	bl	8010a76 <USBH_MSC_SCSI_Write>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10b      	bne.n	800fe90 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800fe78:	78fb      	ldrb	r3, [r7, #3]
 800fe7a:	693a      	ldr	r2, [r7, #16]
 800fe7c:	2134      	movs	r1, #52	@ 0x34
 800fe7e:	fb01 f303 	mul.w	r3, r1, r3
 800fe82:	4413      	add	r3, r2
 800fe84:	3390      	adds	r3, #144	@ 0x90
 800fe86:	2201      	movs	r2, #1
 800fe88:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fe8e:	e057      	b.n	800ff40 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800fe90:	7bfb      	ldrb	r3, [r7, #15]
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	d109      	bne.n	800feaa <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800fe96:	78fb      	ldrb	r3, [r7, #3]
 800fe98:	693a      	ldr	r2, [r7, #16]
 800fe9a:	2134      	movs	r1, #52	@ 0x34
 800fe9c:	fb01 f303 	mul.w	r3, r1, r3
 800fea0:	4413      	add	r3, r2
 800fea2:	3390      	adds	r3, #144	@ 0x90
 800fea4:	2205      	movs	r2, #5
 800fea6:	701a      	strb	r2, [r3, #0]
      break;
 800fea8:	e04a      	b.n	800ff40 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800feaa:	7bfb      	ldrb	r3, [r7, #15]
 800feac:	2b04      	cmp	r3, #4
 800feae:	d147      	bne.n	800ff40 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800feb0:	78fb      	ldrb	r3, [r7, #3]
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	2134      	movs	r1, #52	@ 0x34
 800feb6:	fb01 f303 	mul.w	r3, r1, r3
 800feba:	4413      	add	r3, r2
 800febc:	3390      	adds	r3, #144	@ 0x90
 800febe:	2208      	movs	r2, #8
 800fec0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800fec2:	2302      	movs	r3, #2
 800fec4:	75fb      	strb	r3, [r7, #23]
      break;
 800fec6:	e03b      	b.n	800ff40 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800fec8:	78fb      	ldrb	r3, [r7, #3]
 800feca:	2234      	movs	r2, #52	@ 0x34
 800fecc:	fb02 f303 	mul.w	r3, r2, r3
 800fed0:	3398      	adds	r3, #152	@ 0x98
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	4413      	add	r3, r2
 800fed6:	1d1a      	adds	r2, r3, #4
 800fed8:	78fb      	ldrb	r3, [r7, #3]
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fd51 	bl	8010984 <USBH_MSC_SCSI_RequestSense>
 800fee2:	4603      	mov	r3, r0
 800fee4:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800fee6:	7bfb      	ldrb	r3, [r7, #15]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d113      	bne.n	800ff14 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800feec:	78fb      	ldrb	r3, [r7, #3]
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	2134      	movs	r1, #52	@ 0x34
 800fef2:	fb01 f303 	mul.w	r3, r1, r3
 800fef6:	4413      	add	r3, r2
 800fef8:	3390      	adds	r3, #144	@ 0x90
 800fefa:	2201      	movs	r2, #1
 800fefc:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800fefe:	78fb      	ldrb	r3, [r7, #3]
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	2134      	movs	r1, #52	@ 0x34
 800ff04:	fb01 f303 	mul.w	r3, r1, r3
 800ff08:	4413      	add	r3, r2
 800ff0a:	3391      	adds	r3, #145	@ 0x91
 800ff0c:	2202      	movs	r2, #2
 800ff0e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800ff10:	2302      	movs	r3, #2
 800ff12:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800ff14:	7bfb      	ldrb	r3, [r7, #15]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	d014      	beq.n	800ff44 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ff1a:	7bfb      	ldrb	r3, [r7, #15]
 800ff1c:	2b04      	cmp	r3, #4
 800ff1e:	d111      	bne.n	800ff44 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ff20:	78fb      	ldrb	r3, [r7, #3]
 800ff22:	693a      	ldr	r2, [r7, #16]
 800ff24:	2134      	movs	r1, #52	@ 0x34
 800ff26:	fb01 f303 	mul.w	r3, r1, r3
 800ff2a:	4413      	add	r3, r2
 800ff2c:	3390      	adds	r3, #144	@ 0x90
 800ff2e:	2208      	movs	r2, #8
 800ff30:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ff32:	2302      	movs	r3, #2
 800ff34:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ff36:	e005      	b.n	800ff44 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800ff38:	bf00      	nop
 800ff3a:	e004      	b.n	800ff46 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ff3c:	bf00      	nop
 800ff3e:	e002      	b.n	800ff46 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ff40:	bf00      	nop
 800ff42:	e000      	b.n	800ff46 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ff44:	bf00      	nop

  }
  return error;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	2b0b      	cmp	r3, #11
 800ff6e:	d10c      	bne.n	800ff8a <USBH_MSC_UnitIsReady+0x3a>
 800ff70:	78fb      	ldrb	r3, [r7, #3]
 800ff72:	68ba      	ldr	r2, [r7, #8]
 800ff74:	2134      	movs	r1, #52	@ 0x34
 800ff76:	fb01 f303 	mul.w	r3, r1, r3
 800ff7a:	4413      	add	r3, r2
 800ff7c:	3391      	adds	r3, #145	@ 0x91
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d102      	bne.n	800ff8a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ff84:	2301      	movs	r3, #1
 800ff86:	73fb      	strb	r3, [r7, #15]
 800ff88:	e001      	b.n	800ff8e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ff8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3714      	adds	r7, #20
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr

0800ff9c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b086      	sub	sp, #24
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	60f8      	str	r0, [r7, #12]
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	607a      	str	r2, [r7, #4]
 800ffa8:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ffb0:	69db      	ldr	r3, [r3, #28]
 800ffb2:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	b2db      	uxtb	r3, r3
 800ffba:	2b0b      	cmp	r3, #11
 800ffbc:	d10d      	bne.n	800ffda <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ffbe:	7afb      	ldrb	r3, [r7, #11]
 800ffc0:	2234      	movs	r2, #52	@ 0x34
 800ffc2:	fb02 f303 	mul.w	r3, r2, r3
 800ffc6:	3390      	adds	r3, #144	@ 0x90
 800ffc8:	697a      	ldr	r2, [r7, #20]
 800ffca:	4413      	add	r3, r2
 800ffcc:	2234      	movs	r2, #52	@ 0x34
 800ffce:	4619      	mov	r1, r3
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f006 fe7c 	bl	8016cce <memcpy>
    return USBH_OK;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	e000      	b.n	800ffdc <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ffda:	2302      	movs	r3, #2
  }
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3718      	adds	r7, #24
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af02      	add	r7, sp, #8
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	607a      	str	r2, [r7, #4]
 800ffee:	603b      	str	r3, [r7, #0]
 800fff0:	460b      	mov	r3, r1
 800fff2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800fffa:	69db      	ldr	r3, [r3, #28]
 800fffc:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010004:	b2db      	uxtb	r3, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00e      	beq.n	8010028 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8010010:	2b0b      	cmp	r3, #11
 8010012:	d109      	bne.n	8010028 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8010014:	7afb      	ldrb	r3, [r7, #11]
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	2134      	movs	r1, #52	@ 0x34
 801001a:	fb01 f303 	mul.w	r3, r1, r3
 801001e:	4413      	add	r3, r2
 8010020:	3390      	adds	r3, #144	@ 0x90
 8010022:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8010024:	2b01      	cmp	r3, #1
 8010026:	d001      	beq.n	801002c <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8010028:	2302      	movs	r3, #2
 801002a:	e040      	b.n	80100ae <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	2206      	movs	r2, #6
 8010030:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8010032:	7afb      	ldrb	r3, [r7, #11]
 8010034:	697a      	ldr	r2, [r7, #20]
 8010036:	2134      	movs	r1, #52	@ 0x34
 8010038:	fb01 f303 	mul.w	r3, r1, r3
 801003c:	4413      	add	r3, r2
 801003e:	3390      	adds	r3, #144	@ 0x90
 8010040:	2206      	movs	r2, #6
 8010042:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8010044:	7afb      	ldrb	r3, [r7, #11]
 8010046:	b29a      	uxth	r2, r3
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 801004e:	7af9      	ldrb	r1, [r7, #11]
 8010050:	6a3b      	ldr	r3, [r7, #32]
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f000 fd77 	bl	8010b4c <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010064:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010066:	e016      	b.n	8010096 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	1ad2      	subs	r2, r2, r3
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	f242 7110 	movw	r1, #10000	@ 0x2710
 8010078:	fb01 f303 	mul.w	r3, r1, r3
 801007c:	429a      	cmp	r2, r3
 801007e:	d805      	bhi.n	801008c <USBH_MSC_Read+0xa8>
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	d104      	bne.n	8010096 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2201      	movs	r2, #1
 8010090:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8010092:	2302      	movs	r3, #2
 8010094:	e00b      	b.n	80100ae <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010096:	7afb      	ldrb	r3, [r7, #11]
 8010098:	4619      	mov	r1, r3
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f7ff fe89 	bl	800fdb2 <USBH_MSC_RdWrProcess>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d0e0      	beq.n	8010068 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	2201      	movs	r2, #1
 80100aa:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3718      	adds	r7, #24
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b088      	sub	sp, #32
 80100ba:	af02      	add	r7, sp, #8
 80100bc:	60f8      	str	r0, [r7, #12]
 80100be:	607a      	str	r2, [r7, #4]
 80100c0:	603b      	str	r3, [r7, #0]
 80100c2:	460b      	mov	r3, r1
 80100c4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80100cc:	69db      	ldr	r3, [r3, #28]
 80100ce:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d00e      	beq.n	80100fa <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80100e2:	2b0b      	cmp	r3, #11
 80100e4:	d109      	bne.n	80100fa <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80100e6:	7afb      	ldrb	r3, [r7, #11]
 80100e8:	697a      	ldr	r2, [r7, #20]
 80100ea:	2134      	movs	r1, #52	@ 0x34
 80100ec:	fb01 f303 	mul.w	r3, r1, r3
 80100f0:	4413      	add	r3, r2
 80100f2:	3390      	adds	r3, #144	@ 0x90
 80100f4:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d001      	beq.n	80100fe <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80100fa:	2302      	movs	r3, #2
 80100fc:	e040      	b.n	8010180 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	2207      	movs	r2, #7
 8010102:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8010104:	7afb      	ldrb	r3, [r7, #11]
 8010106:	697a      	ldr	r2, [r7, #20]
 8010108:	2134      	movs	r1, #52	@ 0x34
 801010a:	fb01 f303 	mul.w	r3, r1, r3
 801010e:	4413      	add	r3, r2
 8010110:	3390      	adds	r3, #144	@ 0x90
 8010112:	2207      	movs	r2, #7
 8010114:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8010116:	7afb      	ldrb	r3, [r7, #11]
 8010118:	b29a      	uxth	r2, r3
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8010120:	7af9      	ldrb	r1, [r7, #11]
 8010122:	6a3b      	ldr	r3, [r7, #32]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	68f8      	ldr	r0, [r7, #12]
 801012c:	f000 fca3 	bl	8010a76 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010136:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010138:	e016      	b.n	8010168 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	1ad2      	subs	r2, r2, r3
 8010144:	6a3b      	ldr	r3, [r7, #32]
 8010146:	f242 7110 	movw	r1, #10000	@ 0x2710
 801014a:	fb01 f303 	mul.w	r3, r1, r3
 801014e:	429a      	cmp	r2, r3
 8010150:	d805      	bhi.n	801015e <USBH_MSC_Write+0xa8>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010158:	b2db      	uxtb	r3, r3
 801015a:	2b00      	cmp	r3, #0
 801015c:	d104      	bne.n	8010168 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	2201      	movs	r2, #1
 8010162:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8010164:	2302      	movs	r3, #2
 8010166:	e00b      	b.n	8010180 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8010168:	7afb      	ldrb	r3, [r7, #11]
 801016a:	4619      	mov	r1, r3
 801016c:	68f8      	ldr	r0, [r7, #12]
 801016e:	f7ff fe20 	bl	800fdb2 <USBH_MSC_RdWrProcess>
 8010172:	4603      	mov	r3, r0
 8010174:	2b01      	cmp	r3, #1
 8010176:	d0e0      	beq.n	801013a <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	2201      	movs	r2, #1
 801017c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3718      	adds	r7, #24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2221      	movs	r2, #33	@ 0x21
 8010194:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	22ff      	movs	r2, #255	@ 0xff
 801019a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2200      	movs	r2, #0
 80101a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80101ae:	2200      	movs	r2, #0
 80101b0:	2100      	movs	r1, #0
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f001 ff35 	bl	8012022 <USBH_CtlReq>
 80101b8:	4603      	mov	r3, r0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3708      	adds	r7, #8
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b082      	sub	sp, #8
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	22a1      	movs	r2, #161	@ 0xa1
 80101d0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	22fe      	movs	r2, #254	@ 0xfe
 80101d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2200      	movs	r2, #0
 80101e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80101ea:	2201      	movs	r2, #1
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f001 ff17 	bl	8012022 <USBH_CtlReq>
 80101f4:	4603      	mov	r3, r0
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	4a09      	ldr	r2, [pc, #36]	@ (801023c <USBH_MSC_BOT_Init+0x3c>)
 8010216:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	4a09      	ldr	r2, [pc, #36]	@ (8010240 <USBH_MSC_BOT_Init+0x40>)
 801021c:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2201      	movs	r2, #1
 8010222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 801022e:	2300      	movs	r3, #0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3714      	adds	r7, #20
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr
 801023c:	43425355 	.word	0x43425355
 8010240:	20304050 	.word	0x20304050

08010244 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b088      	sub	sp, #32
 8010248:	af02      	add	r7, sp, #8
 801024a:	6078      	str	r0, [r7, #4]
 801024c:	460b      	mov	r3, r1
 801024e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8010250:	2301      	movs	r3, #1
 8010252:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8010254:	2301      	movs	r3, #1
 8010256:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8010258:	2301      	movs	r3, #1
 801025a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801025c:	2300      	movs	r3, #0
 801025e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010266:	69db      	ldr	r3, [r3, #28]
 8010268:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 801026a:	2300      	movs	r3, #0
 801026c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8010274:	3b01      	subs	r3, #1
 8010276:	2b0a      	cmp	r3, #10
 8010278:	f200 819e 	bhi.w	80105b8 <USBH_MSC_BOT_Process+0x374>
 801027c:	a201      	add	r2, pc, #4	@ (adr r2, 8010284 <USBH_MSC_BOT_Process+0x40>)
 801027e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010282:	bf00      	nop
 8010284:	080102b1 	.word	0x080102b1
 8010288:	080102d9 	.word	0x080102d9
 801028c:	08010343 	.word	0x08010343
 8010290:	08010361 	.word	0x08010361
 8010294:	080103e5 	.word	0x080103e5
 8010298:	08010407 	.word	0x08010407
 801029c:	0801049f 	.word	0x0801049f
 80102a0:	080104bb 	.word	0x080104bb
 80102a4:	0801050d 	.word	0x0801050d
 80102a8:	0801053d 	.word	0x0801053d
 80102ac:	0801059f 	.word	0x0801059f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	78fa      	ldrb	r2, [r7, #3]
 80102b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	2202      	movs	r2, #2
 80102bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	795b      	ldrb	r3, [r3, #5]
 80102ca:	2201      	movs	r2, #1
 80102cc:	9200      	str	r2, [sp, #0]
 80102ce:	221f      	movs	r2, #31
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f002 f8b4 	bl	801243e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80102d6:	e17e      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	795b      	ldrb	r3, [r3, #5]
 80102dc:	4619      	mov	r1, r3
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f005 fcc0 	bl	8015c64 <USBH_LL_GetURBState>
 80102e4:	4603      	mov	r3, r0
 80102e6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80102e8:	7d3b      	ldrb	r3, [r7, #20]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d118      	bne.n	8010320 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00f      	beq.n	8010316 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80102fc:	b25b      	sxtb	r3, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	da04      	bge.n	801030c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	2203      	movs	r2, #3
 8010306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801030a:	e157      	b.n	80105bc <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	2205      	movs	r2, #5
 8010310:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010314:	e152      	b.n	80105bc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	2207      	movs	r2, #7
 801031a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801031e:	e14d      	b.n	80105bc <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010320:	7d3b      	ldrb	r3, [r7, #20]
 8010322:	2b02      	cmp	r3, #2
 8010324:	d104      	bne.n	8010330 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	2201      	movs	r2, #1
 801032a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801032e:	e145      	b.n	80105bc <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8010330:	7d3b      	ldrb	r3, [r7, #20]
 8010332:	2b05      	cmp	r3, #5
 8010334:	f040 8142 	bne.w	80105bc <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	220a      	movs	r2, #10
 801033c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010340:	e13c      	b.n	80105bc <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	895a      	ldrh	r2, [r3, #10]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	791b      	ldrb	r3, [r3, #4]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f002 f899 	bl	8012488 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	2204      	movs	r2, #4
 801035a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 801035e:	e13a      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	791b      	ldrb	r3, [r3, #4]
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f005 fc7c 	bl	8015c64 <USBH_LL_GetURBState>
 801036c:	4603      	mov	r3, r0
 801036e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8010370:	7d3b      	ldrb	r3, [r7, #20]
 8010372:	2b01      	cmp	r3, #1
 8010374:	d12d      	bne.n	80103d2 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801037a:	693a      	ldr	r2, [r7, #16]
 801037c:	8952      	ldrh	r2, [r2, #10]
 801037e:	4293      	cmp	r3, r2
 8010380:	d910      	bls.n	80103a4 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	8952      	ldrh	r2, [r2, #10]
 801038c:	441a      	add	r2, r3
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	8952      	ldrh	r2, [r2, #10]
 801039c:	1a9a      	subs	r2, r3, r2
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80103a2:	e002      	b.n	80103aa <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80103a4:	693b      	ldr	r3, [r7, #16]
 80103a6:	2200      	movs	r2, #0
 80103a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00a      	beq.n	80103c8 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	895a      	ldrh	r2, [r3, #10]
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	791b      	ldrb	r3, [r3, #4]
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f002 f861 	bl	8012488 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80103c6:	e0fb      	b.n	80105c0 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	2207      	movs	r2, #7
 80103cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80103d0:	e0f6      	b.n	80105c0 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80103d2:	7d3b      	ldrb	r3, [r7, #20]
 80103d4:	2b05      	cmp	r3, #5
 80103d6:	f040 80f3 	bne.w	80105c0 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	2209      	movs	r2, #9
 80103de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80103e2:	e0ed      	b.n	80105c0 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	891a      	ldrh	r2, [r3, #8]
 80103ee:	693b      	ldr	r3, [r7, #16]
 80103f0:	795b      	ldrb	r3, [r3, #5]
 80103f2:	2001      	movs	r0, #1
 80103f4:	9000      	str	r0, [sp, #0]
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f002 f821 	bl	801243e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	2206      	movs	r2, #6
 8010400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8010404:	e0e7      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	795b      	ldrb	r3, [r3, #5]
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f005 fc29 	bl	8015c64 <USBH_LL_GetURBState>
 8010412:	4603      	mov	r3, r0
 8010414:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8010416:	7d3b      	ldrb	r3, [r7, #20]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d12f      	bne.n	801047c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010420:	693a      	ldr	r2, [r7, #16]
 8010422:	8912      	ldrh	r2, [r2, #8]
 8010424:	4293      	cmp	r3, r2
 8010426:	d910      	bls.n	801044a <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801042e:	693a      	ldr	r2, [r7, #16]
 8010430:	8912      	ldrh	r2, [r2, #8]
 8010432:	441a      	add	r2, r3
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	8912      	ldrh	r2, [r2, #8]
 8010442:	1a9a      	subs	r2, r3, r2
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010448:	e002      	b.n	8010450 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	2200      	movs	r2, #0
 801044e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00c      	beq.n	8010472 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	891a      	ldrh	r2, [r3, #8]
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	795b      	ldrb	r3, [r3, #5]
 8010466:	2001      	movs	r0, #1
 8010468:	9000      	str	r0, [sp, #0]
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f001 ffe7 	bl	801243e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8010470:	e0a8      	b.n	80105c4 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	2207      	movs	r2, #7
 8010476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801047a:	e0a3      	b.n	80105c4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 801047c:	7d3b      	ldrb	r3, [r7, #20]
 801047e:	2b02      	cmp	r3, #2
 8010480:	d104      	bne.n	801048c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	2205      	movs	r2, #5
 8010486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801048a:	e09b      	b.n	80105c4 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 801048c:	7d3b      	ldrb	r3, [r7, #20]
 801048e:	2b05      	cmp	r3, #5
 8010490:	f040 8098 	bne.w	80105c4 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	220a      	movs	r2, #10
 8010498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801049c:	e092      	b.n	80105c4 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	791b      	ldrb	r3, [r3, #4]
 80104a8:	220d      	movs	r2, #13
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f001 ffec 	bl	8012488 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	2208      	movs	r2, #8
 80104b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80104b8:	e08d      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	791b      	ldrb	r3, [r3, #4]
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f005 fbcf 	bl	8015c64 <USBH_LL_GetURBState>
 80104c6:	4603      	mov	r3, r0
 80104c8:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80104ca:	7d3b      	ldrb	r3, [r7, #20]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d115      	bne.n	80104fc <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	2201      	movs	r2, #1
 80104d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	2201      	movs	r2, #1
 80104dc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f000 f8a9 	bl	8010638 <USBH_MSC_DecodeCSW>
 80104e6:	4603      	mov	r3, r0
 80104e8:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80104ea:	7d7b      	ldrb	r3, [r7, #21]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d102      	bne.n	80104f6 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80104f4:	e068      	b.n	80105c8 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80104f6:	2302      	movs	r3, #2
 80104f8:	75fb      	strb	r3, [r7, #23]
      break;
 80104fa:	e065      	b.n	80105c8 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80104fc:	7d3b      	ldrb	r3, [r7, #20]
 80104fe:	2b05      	cmp	r3, #5
 8010500:	d162      	bne.n	80105c8 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	2209      	movs	r2, #9
 8010506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801050a:	e05d      	b.n	80105c8 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 801050c:	78fb      	ldrb	r3, [r7, #3]
 801050e:	2200      	movs	r2, #0
 8010510:	4619      	mov	r1, r3
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f864 	bl	80105e0 <USBH_MSC_BOT_Abort>
 8010518:	4603      	mov	r3, r0
 801051a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 801051c:	7dbb      	ldrb	r3, [r7, #22]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d104      	bne.n	801052c <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	2207      	movs	r2, #7
 8010526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 801052a:	e04f      	b.n	80105cc <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 801052c:	7dbb      	ldrb	r3, [r7, #22]
 801052e:	2b04      	cmp	r3, #4
 8010530:	d14c      	bne.n	80105cc <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	220b      	movs	r2, #11
 8010536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801053a:	e047      	b.n	80105cc <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 801053c:	78fb      	ldrb	r3, [r7, #3]
 801053e:	2201      	movs	r2, #1
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f000 f84c 	bl	80105e0 <USBH_MSC_BOT_Abort>
 8010548:	4603      	mov	r3, r0
 801054a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 801054c:	7dbb      	ldrb	r3, [r7, #22]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d11d      	bne.n	801058e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	795b      	ldrb	r3, [r3, #5]
 8010556:	4619      	mov	r1, r3
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f005 fbe0 	bl	8015d1e <USBH_LL_GetToggle>
 801055e:	4603      	mov	r3, r0
 8010560:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	7959      	ldrb	r1, [r3, #5]
 8010566:	7bfb      	ldrb	r3, [r7, #15]
 8010568:	f1c3 0301 	rsb	r3, r3, #1
 801056c:	b2db      	uxtb	r3, r3
 801056e:	461a      	mov	r2, r3
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f005 fba1 	bl	8015cb8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	791b      	ldrb	r3, [r3, #4]
 801057a:	2200      	movs	r2, #0
 801057c:	4619      	mov	r1, r3
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f005 fb9a 	bl	8015cb8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	2209      	movs	r2, #9
 8010588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 801058c:	e020      	b.n	80105d0 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 801058e:	7dbb      	ldrb	r3, [r7, #22]
 8010590:	2b04      	cmp	r3, #4
 8010592:	d11d      	bne.n	80105d0 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	220b      	movs	r2, #11
 8010598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801059c:	e018      	b.n	80105d0 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f7ff fdf2 	bl	8010188 <USBH_MSC_BOT_REQ_Reset>
 80105a4:	4603      	mov	r3, r0
 80105a6:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80105a8:	7dfb      	ldrb	r3, [r7, #23]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d112      	bne.n	80105d4 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	2201      	movs	r2, #1
 80105b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 80105b6:	e00d      	b.n	80105d4 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80105b8:	bf00      	nop
 80105ba:	e00c      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105bc:	bf00      	nop
 80105be:	e00a      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105c0:	bf00      	nop
 80105c2:	e008      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105c4:	bf00      	nop
 80105c6:	e006      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105c8:	bf00      	nop
 80105ca:	e004      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105cc:	bf00      	nop
 80105ce:	e002      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105d0:	bf00      	nop
 80105d2:	e000      	b.n	80105d6 <USBH_MSC_BOT_Process+0x392>
      break;
 80105d4:	bf00      	nop
  }
  return status;
 80105d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70fb      	strb	r3, [r7, #3]
 80105ec:	4613      	mov	r3, r2
 80105ee:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80105f0:	2302      	movs	r3, #2
 80105f2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80105fa:	69db      	ldr	r3, [r3, #28]
 80105fc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80105fe:	78bb      	ldrb	r3, [r7, #2]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d002      	beq.n	801060a <USBH_MSC_BOT_Abort+0x2a>
 8010604:	2b01      	cmp	r3, #1
 8010606:	d009      	beq.n	801061c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8010608:	e011      	b.n	801062e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	79db      	ldrb	r3, [r3, #7]
 801060e:	4619      	mov	r1, r3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f001 f9d1 	bl	80119b8 <USBH_ClrFeature>
 8010616:	4603      	mov	r3, r0
 8010618:	73fb      	strb	r3, [r7, #15]
      break;
 801061a:	e008      	b.n	801062e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	799b      	ldrb	r3, [r3, #6]
 8010620:	4619      	mov	r1, r3
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f001 f9c8 	bl	80119b8 <USBH_ClrFeature>
 8010628:	4603      	mov	r3, r0
 801062a:	73fb      	strb	r3, [r7, #15]
      break;
 801062c:	bf00      	nop
  }
  return status;
 801062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3710      	adds	r7, #16
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010646:	69db      	ldr	r3, [r3, #28]
 8010648:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 801064a:	2301      	movs	r3, #1
 801064c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	791b      	ldrb	r3, [r3, #4]
 8010652:	4619      	mov	r1, r3
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f005 fa73 	bl	8015b40 <USBH_LL_GetLastXferSize>
 801065a:	4603      	mov	r3, r0
 801065c:	2b0d      	cmp	r3, #13
 801065e:	d002      	beq.n	8010666 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8010660:	2302      	movs	r3, #2
 8010662:	73fb      	strb	r3, [r7, #15]
 8010664:	e024      	b.n	80106b0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801066a:	4a14      	ldr	r2, [pc, #80]	@ (80106bc <USBH_MSC_DecodeCSW+0x84>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d11d      	bne.n	80106ac <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010678:	429a      	cmp	r2, r3
 801067a:	d119      	bne.n	80106b0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010682:	2b00      	cmp	r3, #0
 8010684:	d102      	bne.n	801068c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8010686:	2300      	movs	r3, #0
 8010688:	73fb      	strb	r3, [r7, #15]
 801068a:	e011      	b.n	80106b0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010692:	2b01      	cmp	r3, #1
 8010694:	d102      	bne.n	801069c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8010696:	2301      	movs	r3, #1
 8010698:	73fb      	strb	r3, [r7, #15]
 801069a:	e009      	b.n	80106b0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106a2:	2b02      	cmp	r3, #2
 80106a4:	d104      	bne.n	80106b0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80106a6:	2302      	movs	r3, #2
 80106a8:	73fb      	strb	r3, [r7, #15]
 80106aa:	e001      	b.n	80106b0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80106ac:	2302      	movs	r3, #2
 80106ae:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	53425355 	.word	0x53425355

080106c0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	460b      	mov	r3, r1
 80106ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 80106cc:	2302      	movs	r3, #2
 80106ce:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80106d6:	69db      	ldr	r3, [r3, #28]
 80106d8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d002      	beq.n	80106ea <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d021      	beq.n	801072c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80106e8:	e028      	b.n	801073c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	2200      	movs	r2, #0
 80106ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	220a      	movs	r2, #10
 80106fc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	3363      	adds	r3, #99	@ 0x63
 8010704:	2210      	movs	r2, #16
 8010706:	2100      	movs	r1, #0
 8010708:	4618      	mov	r0, r3
 801070a:	f006 fa51 	bl	8016bb0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2200      	movs	r2, #0
 8010712:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	2201      	movs	r2, #1
 801071a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	2202      	movs	r2, #2
 8010722:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8010726:	2301      	movs	r3, #1
 8010728:	73fb      	strb	r3, [r7, #15]
      break;
 801072a:	e007      	b.n	801073c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 801072c:	78fb      	ldrb	r3, [r7, #3]
 801072e:	4619      	mov	r1, r3
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7ff fd87 	bl	8010244 <USBH_MSC_BOT_Process>
 8010736:	4603      	mov	r3, r0
 8010738:	73fb      	strb	r3, [r7, #15]
      break;
 801073a:	bf00      	nop
  }

  return error;
 801073c:	7bfb      	ldrb	r3, [r7, #15]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b086      	sub	sp, #24
 801074a:	af00      	add	r7, sp, #0
 801074c:	60f8      	str	r0, [r7, #12]
 801074e:	460b      	mov	r3, r1
 8010750:	607a      	str	r2, [r7, #4]
 8010752:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 8010754:	2301      	movs	r3, #1
 8010756:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801075e:	69db      	ldr	r3, [r3, #28]
 8010760:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010768:	2b01      	cmp	r3, #1
 801076a:	d002      	beq.n	8010772 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 801076c:	2b02      	cmp	r3, #2
 801076e:	d027      	beq.n	80107c0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8010770:	e05e      	b.n	8010830 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	2208      	movs	r2, #8
 8010776:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	2280      	movs	r2, #128	@ 0x80
 801077c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	220a      	movs	r2, #10
 8010784:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	3363      	adds	r3, #99	@ 0x63
 801078c:	2210      	movs	r2, #16
 801078e:	2100      	movs	r1, #0
 8010790:	4618      	mov	r0, r3
 8010792:	f006 fa0d 	bl	8016bb0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2225      	movs	r2, #37	@ 0x25
 801079a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	2201      	movs	r2, #1
 80107a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	2202      	movs	r2, #2
 80107aa:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	f103 0210 	add.w	r2, r3, #16
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80107ba:	2301      	movs	r3, #1
 80107bc:	75fb      	strb	r3, [r7, #23]
      break;
 80107be:	e037      	b.n	8010830 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 80107c0:	7afb      	ldrb	r3, [r7, #11]
 80107c2:	4619      	mov	r1, r3
 80107c4:	68f8      	ldr	r0, [r7, #12]
 80107c6:	f7ff fd3d 	bl	8010244 <USBH_MSC_BOT_Process>
 80107ca:	4603      	mov	r3, r0
 80107cc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80107ce:	7dfb      	ldrb	r3, [r7, #23]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d12c      	bne.n	801082e <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107da:	3303      	adds	r3, #3
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	461a      	mov	r2, r3
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107e6:	3302      	adds	r3, #2
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	021b      	lsls	r3, r3, #8
 80107ec:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107f4:	3301      	adds	r3, #1
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80107fa:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	061b      	lsls	r3, r3, #24
 8010806:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010812:	3307      	adds	r3, #7
 8010814:	781b      	ldrb	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801081e:	3306      	adds	r3, #6
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	021b      	lsls	r3, r3, #8
 8010824:	b29b      	uxth	r3, r3
 8010826:	4313      	orrs	r3, r2
 8010828:	b29a      	uxth	r2, r3
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	809a      	strh	r2, [r3, #4]
      break;
 801082e:	bf00      	nop
  }

  return error;
 8010830:	7dfb      	ldrb	r3, [r7, #23]
}
 8010832:	4618      	mov	r0, r3
 8010834:	3718      	adds	r7, #24
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b086      	sub	sp, #24
 801083e:	af00      	add	r7, sp, #0
 8010840:	60f8      	str	r0, [r7, #12]
 8010842:	460b      	mov	r3, r1
 8010844:	607a      	str	r2, [r7, #4]
 8010846:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8010848:	2302      	movs	r3, #2
 801084a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010852:	69db      	ldr	r3, [r3, #28]
 8010854:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 801085c:	2b01      	cmp	r3, #1
 801085e:	d002      	beq.n	8010866 <USBH_MSC_SCSI_Inquiry+0x2c>
 8010860:	2b02      	cmp	r3, #2
 8010862:	d03d      	beq.n	80108e0 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8010864:	e089      	b.n	801097a <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	2224      	movs	r2, #36	@ 0x24
 801086a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	2280      	movs	r2, #128	@ 0x80
 8010870:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	220a      	movs	r2, #10
 8010878:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	3363      	adds	r3, #99	@ 0x63
 8010880:	220a      	movs	r2, #10
 8010882:	2100      	movs	r1, #0
 8010884:	4618      	mov	r0, r3
 8010886:	f006 f993 	bl	8016bb0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 801088a:	693b      	ldr	r3, [r7, #16]
 801088c:	2212      	movs	r2, #18
 801088e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8010892:	7afb      	ldrb	r3, [r7, #11]
 8010894:	015b      	lsls	r3, r3, #5
 8010896:	b2da      	uxtb	r2, r3
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	2200      	movs	r2, #0
 80108a2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	2200      	movs	r2, #0
 80108aa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	2224      	movs	r2, #36	@ 0x24
 80108b2:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	2200      	movs	r2, #0
 80108ba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	2202      	movs	r2, #2
 80108ca:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	f103 0210 	add.w	r2, r3, #16
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80108da:	2301      	movs	r3, #1
 80108dc:	75fb      	strb	r3, [r7, #23]
      break;
 80108de:	e04c      	b.n	801097a <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80108e0:	7afb      	ldrb	r3, [r7, #11]
 80108e2:	4619      	mov	r1, r3
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f7ff fcad 	bl	8010244 <USBH_MSC_BOT_Process>
 80108ea:	4603      	mov	r3, r0
 80108ec:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d141      	bne.n	8010978 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80108f4:	2222      	movs	r2, #34	@ 0x22
 80108f6:	2100      	movs	r1, #0
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f006 f959 	bl	8016bb0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	f003 031f 	and.w	r3, r3, #31
 801090a:	b2da      	uxtb	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	095b      	lsrs	r3, r3, #5
 801091a:	b2da      	uxtb	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010926:	3301      	adds	r3, #1
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	b25b      	sxtb	r3, r3
 801092c:	2b00      	cmp	r3, #0
 801092e:	da03      	bge.n	8010938 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2201      	movs	r2, #1
 8010934:	709a      	strb	r2, [r3, #2]
 8010936:	e002      	b.n	801093e <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	1cd8      	adds	r0, r3, #3
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010948:	3308      	adds	r3, #8
 801094a:	2208      	movs	r2, #8
 801094c:	4619      	mov	r1, r3
 801094e:	f006 f9be 	bl	8016cce <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f103 000c 	add.w	r0, r3, #12
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801095e:	3310      	adds	r3, #16
 8010960:	2210      	movs	r2, #16
 8010962:	4619      	mov	r1, r3
 8010964:	f006 f9b3 	bl	8016cce <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	331d      	adds	r3, #29
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8010972:	3220      	adds	r2, #32
 8010974:	6812      	ldr	r2, [r2, #0]
 8010976:	601a      	str	r2, [r3, #0]
      break;
 8010978:	bf00      	nop
  }

  return error;
 801097a:	7dfb      	ldrb	r3, [r7, #23]
}
 801097c:	4618      	mov	r0, r3
 801097e:	3718      	adds	r7, #24
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}

08010984 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b086      	sub	sp, #24
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	460b      	mov	r3, r1
 801098e:	607a      	str	r2, [r7, #4]
 8010990:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8010992:	2302      	movs	r3, #2
 8010994:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801099c:	69db      	ldr	r3, [r3, #28]
 801099e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d002      	beq.n	80109b0 <USBH_MSC_SCSI_RequestSense+0x2c>
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	d03d      	beq.n	8010a2a <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80109ae:	e05d      	b.n	8010a6c <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	220e      	movs	r2, #14
 80109b4:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	2280      	movs	r2, #128	@ 0x80
 80109ba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	220a      	movs	r2, #10
 80109c2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	3363      	adds	r3, #99	@ 0x63
 80109ca:	2210      	movs	r2, #16
 80109cc:	2100      	movs	r1, #0
 80109ce:	4618      	mov	r0, r3
 80109d0:	f006 f8ee 	bl	8016bb0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	2203      	movs	r2, #3
 80109d8:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80109dc:	7afb      	ldrb	r3, [r7, #11]
 80109de:	015b      	lsls	r3, r3, #5
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	2200      	movs	r2, #0
 80109ec:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	220e      	movs	r2, #14
 80109fc:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	2202      	movs	r2, #2
 8010a14:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	f103 0210 	add.w	r2, r3, #16
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8010a24:	2301      	movs	r3, #1
 8010a26:	75fb      	strb	r3, [r7, #23]
      break;
 8010a28:	e020      	b.n	8010a6c <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8010a2a:	7afb      	ldrb	r3, [r7, #11]
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	f7ff fc08 	bl	8010244 <USBH_MSC_BOT_Process>
 8010a34:	4603      	mov	r3, r0
 8010a36:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8010a38:	7dfb      	ldrb	r3, [r7, #23]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d115      	bne.n	8010a6a <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a44:	3302      	adds	r3, #2
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	f003 030f 	and.w	r3, r3, #15
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a58:	7b1a      	ldrb	r2, [r3, #12]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a64:	7b5a      	ldrb	r2, [r3, #13]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	709a      	strb	r2, [r3, #2]
      break;
 8010a6a:	bf00      	nop
  }

  return error;
 8010a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b086      	sub	sp, #24
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	60f8      	str	r0, [r7, #12]
 8010a7e:	607a      	str	r2, [r7, #4]
 8010a80:	603b      	str	r3, [r7, #0]
 8010a82:	460b      	mov	r3, r1
 8010a84:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8010a86:	2302      	movs	r3, #2
 8010a88:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010a90:	69db      	ldr	r3, [r3, #28]
 8010a92:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d002      	beq.n	8010aa4 <USBH_MSC_SCSI_Write+0x2e>
 8010a9e:	2b02      	cmp	r3, #2
 8010aa0:	d047      	beq.n	8010b32 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8010aa2:	e04e      	b.n	8010b42 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8010aaa:	461a      	mov	r2, r3
 8010aac:	6a3b      	ldr	r3, [r7, #32]
 8010aae:	fb03 f202 	mul.w	r2, r3, r2
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	220a      	movs	r2, #10
 8010ac2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	3363      	adds	r3, #99	@ 0x63
 8010aca:	2210      	movs	r2, #16
 8010acc:	2100      	movs	r1, #0
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f006 f86e 	bl	8016bb0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	222a      	movs	r2, #42	@ 0x2a
 8010ad8:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8010adc:	79fa      	ldrb	r2, [r7, #7]
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8010ae4:	79ba      	ldrb	r2, [r7, #6]
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8010aec:	797a      	ldrb	r2, [r7, #5]
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8010af4:	1d3b      	adds	r3, r7, #4
 8010af6:	781a      	ldrb	r2, [r3, #0]
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8010afe:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8010b08:	f107 0320 	add.w	r3, r7, #32
 8010b0c:	781a      	ldrb	r2, [r3, #0]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	2202      	movs	r2, #2
 8010b20:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	683a      	ldr	r2, [r7, #0]
 8010b28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b30:	e007      	b.n	8010b42 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8010b32:	7afb      	ldrb	r3, [r7, #11]
 8010b34:	4619      	mov	r1, r3
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7ff fb84 	bl	8010244 <USBH_MSC_BOT_Process>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b40:	bf00      	nop
  }

  return error;
 8010b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3718      	adds	r7, #24
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	607a      	str	r2, [r7, #4]
 8010b56:	603b      	str	r3, [r7, #0]
 8010b58:	460b      	mov	r3, r1
 8010b5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8010b5c:	2302      	movs	r3, #2
 8010b5e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010b66:	69db      	ldr	r3, [r3, #28]
 8010b68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010b70:	2b01      	cmp	r3, #1
 8010b72:	d002      	beq.n	8010b7a <USBH_MSC_SCSI_Read+0x2e>
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d047      	beq.n	8010c08 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8010b78:	e04e      	b.n	8010c18 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8010b80:	461a      	mov	r2, r3
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	fb03 f202 	mul.w	r2, r3, r2
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2280      	movs	r2, #128	@ 0x80
 8010b90:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	220a      	movs	r2, #10
 8010b98:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	3363      	adds	r3, #99	@ 0x63
 8010ba0:	2210      	movs	r2, #16
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f006 f803 	bl	8016bb0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	2228      	movs	r2, #40	@ 0x28
 8010bae:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8010bb2:	79fa      	ldrb	r2, [r7, #7]
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8010bba:	79ba      	ldrb	r2, [r7, #6]
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8010bc2:	797a      	ldrb	r2, [r7, #5]
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8010bca:	1d3b      	adds	r3, r7, #4
 8010bcc:	781a      	ldrb	r2, [r3, #0]
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8010bd4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8010bde:	f107 0320 	add.w	r3, r7, #32
 8010be2:	781a      	ldrb	r2, [r3, #0]
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	2201      	movs	r2, #1
 8010bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	683a      	ldr	r2, [r7, #0]
 8010bfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8010c02:	2301      	movs	r3, #1
 8010c04:	75fb      	strb	r3, [r7, #23]
      break;
 8010c06:	e007      	b.n	8010c18 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8010c08:	7afb      	ldrb	r3, [r7, #11]
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7ff fb19 	bl	8010244 <USBH_MSC_BOT_Process>
 8010c12:	4603      	mov	r3, r0
 8010c14:	75fb      	strb	r3, [r7, #23]
      break;
 8010c16:	bf00      	nop
  }

  return error;
 8010c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3718      	adds	r7, #24
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b084      	sub	sp, #16
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	60f8      	str	r0, [r7, #12]
 8010c2a:	60b9      	str	r1, [r7, #8]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d101      	bne.n	8010c3a <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010c36:	2302      	movs	r3, #2
 8010c38:	e029      	b.n	8010c8e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	79fa      	ldrb	r2, [r7, #7]
 8010c3e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2200      	movs	r2, #0
 8010c46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f000 f81f 	bl	8010c96 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2200      	movs	r2, #0
 8010c64:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d003      	beq.n	8010c86 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010c86:	68f8      	ldr	r0, [r7, #12]
 8010c88:	f004 fea6 	bl	80159d8 <USBH_LL_Init>

  return USBH_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b084      	sub	sp, #16
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	60fb      	str	r3, [r7, #12]
 8010ca6:	e009      	b.n	8010cbc <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	33e0      	adds	r3, #224	@ 0xe0
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4413      	add	r3, r2
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	60fb      	str	r3, [r7, #12]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2b0f      	cmp	r3, #15
 8010cc0:	d9f2      	bls.n	8010ca8 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	60fb      	str	r3, [r7, #12]
 8010cc6:	e009      	b.n	8010cdc <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	4413      	add	r3, r2
 8010cce:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	60fb      	str	r3, [r7, #12]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ce2:	d3f1      	bcc.n	8010cc8 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2201      	movs	r2, #1
 8010d02:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2240      	movs	r2, #64	@ 0x40
 8010d08:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	331c      	adds	r3, #28
 8010d34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f005 ff38 	bl	8016bb0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f005 ff2f 	bl	8016bb0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010d58:	2212      	movs	r2, #18
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f005 ff27 	bl	8016bb0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010d68:	223e      	movs	r2, #62	@ 0x3e
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	f005 ff1f 	bl	8016bb0 <memset>

  return USBH_OK;
 8010d72:	2300      	movs	r3, #0
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3710      	adds	r7, #16
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b085      	sub	sp, #20
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
 8010d84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010d86:	2300      	movs	r3, #0
 8010d88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d016      	beq.n	8010dbe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d10e      	bne.n	8010db8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010da0:	1c59      	adds	r1, r3, #1
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	33de      	adds	r3, #222	@ 0xde
 8010dac:	6839      	ldr	r1, [r7, #0]
 8010dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010db2:	2300      	movs	r3, #0
 8010db4:	73fb      	strb	r3, [r7, #15]
 8010db6:	e004      	b.n	8010dc2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010db8:	2302      	movs	r3, #2
 8010dba:	73fb      	strb	r3, [r7, #15]
 8010dbc:	e001      	b.n	8010dc2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3714      	adds	r7, #20
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	460b      	mov	r3, r1
 8010dda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010de6:	78fa      	ldrb	r2, [r7, #3]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d204      	bcs.n	8010df6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	78fa      	ldrb	r2, [r7, #3]
 8010df0:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8010df4:	e001      	b.n	8010dfa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010df6:	2302      	movs	r3, #2
 8010df8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	4608      	mov	r0, r1
 8010e12:	4611      	mov	r1, r2
 8010e14:	461a      	mov	r2, r3
 8010e16:	4603      	mov	r3, r0
 8010e18:	70fb      	strb	r3, [r7, #3]
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	70bb      	strb	r3, [r7, #2]
 8010e1e:	4613      	mov	r3, r2
 8010e20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010e22:	2300      	movs	r3, #0
 8010e24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010e26:	2300      	movs	r3, #0
 8010e28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010e30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010e32:	e025      	b.n	8010e80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010e34:	7dfb      	ldrb	r3, [r7, #23]
 8010e36:	221a      	movs	r2, #26
 8010e38:	fb02 f303 	mul.w	r3, r2, r3
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	4413      	add	r3, r2
 8010e42:	3302      	adds	r3, #2
 8010e44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	795b      	ldrb	r3, [r3, #5]
 8010e4a:	78fa      	ldrb	r2, [r7, #3]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d002      	beq.n	8010e56 <USBH_FindInterface+0x4e>
 8010e50:	78fb      	ldrb	r3, [r7, #3]
 8010e52:	2bff      	cmp	r3, #255	@ 0xff
 8010e54:	d111      	bne.n	8010e7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010e5a:	78ba      	ldrb	r2, [r7, #2]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d002      	beq.n	8010e66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010e60:	78bb      	ldrb	r3, [r7, #2]
 8010e62:	2bff      	cmp	r3, #255	@ 0xff
 8010e64:	d109      	bne.n	8010e7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010e6a:	787a      	ldrb	r2, [r7, #1]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d002      	beq.n	8010e76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010e70:	787b      	ldrb	r3, [r7, #1]
 8010e72:	2bff      	cmp	r3, #255	@ 0xff
 8010e74:	d101      	bne.n	8010e7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010e76:	7dfb      	ldrb	r3, [r7, #23]
 8010e78:	e006      	b.n	8010e88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010e80:	7dfb      	ldrb	r3, [r7, #23]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d9d6      	bls.n	8010e34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010e86:	23ff      	movs	r3, #255	@ 0xff
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	371c      	adds	r7, #28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f004 fdd7 	bl	8015a50 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f004 fef0 	bl	8015c8a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010eaa:	2300      	movs	r3, #0
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b088      	sub	sp, #32
 8010eb8:	af04      	add	r7, sp, #16
 8010eba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010ebc:	2302      	movs	r3, #2
 8010ebe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d102      	bne.n	8010ed6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2203      	movs	r2, #3
 8010ed4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	2b0b      	cmp	r3, #11
 8010ede:	f200 81bb 	bhi.w	8011258 <USBH_Process+0x3a4>
 8010ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ee8 <USBH_Process+0x34>)
 8010ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee8:	08010f19 	.word	0x08010f19
 8010eec:	08010f4b 	.word	0x08010f4b
 8010ef0:	08010fb3 	.word	0x08010fb3
 8010ef4:	080111f3 	.word	0x080111f3
 8010ef8:	08011259 	.word	0x08011259
 8010efc:	08011053 	.word	0x08011053
 8010f00:	08011199 	.word	0x08011199
 8010f04:	08011089 	.word	0x08011089
 8010f08:	080110a9 	.word	0x080110a9
 8010f0c:	080110c7 	.word	0x080110c7
 8010f10:	0801110b 	.word	0x0801110b
 8010f14:	080111db 	.word	0x080111db
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 819b 	beq.w	801125c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010f2c:	20c8      	movs	r0, #200	@ 0xc8
 8010f2e:	f004 ff29 	bl	8015d84 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f004 fde9 	bl	8015b0a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2200      	movs	r2, #0
 8010f44:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010f48:	e188      	b.n	801125c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d107      	bne.n	8010f64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2202      	movs	r2, #2
 8010f60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010f62:	e18a      	b.n	801127a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010f6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010f6e:	d914      	bls.n	8010f9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010f76:	3301      	adds	r3, #1
 8010f78:	b2da      	uxtb	r2, r3
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010f86:	2b03      	cmp	r3, #3
 8010f88:	d903      	bls.n	8010f92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	220d      	movs	r2, #13
 8010f8e:	701a      	strb	r2, [r3, #0]
      break;
 8010f90:	e173      	b.n	801127a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	701a      	strb	r2, [r3, #0]
      break;
 8010f98:	e16f      	b.n	801127a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010fa0:	f103 020a 	add.w	r2, r3, #10
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8010faa:	200a      	movs	r0, #10
 8010fac:	f004 feea 	bl	8015d84 <USBH_Delay>
      break;
 8010fb0:	e163      	b.n	801127a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d005      	beq.n	8010fc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010fc2:	2104      	movs	r1, #4
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010fc8:	2064      	movs	r0, #100	@ 0x64
 8010fca:	f004 fedb 	bl	8015d84 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f004 fd74 	bl	8015abc <USBH_LL_GetSpeed>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2205      	movs	r2, #5
 8010fe2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f001 fa9b 	bl	8012522 <USBH_AllocPipe>
 8010fec:	4603      	mov	r3, r0
 8010fee:	461a      	mov	r2, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010ff4:	2180      	movs	r1, #128	@ 0x80
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f001 fa93 	bl	8012522 <USBH_AllocPipe>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	461a      	mov	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	7919      	ldrb	r1, [r3, #4]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8011018:	9202      	str	r2, [sp, #8]
 801101a:	2200      	movs	r2, #0
 801101c:	9201      	str	r2, [sp, #4]
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4603      	mov	r3, r0
 8011022:	2280      	movs	r2, #128	@ 0x80
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f001 fa4d 	bl	80124c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	7959      	ldrb	r1, [r3, #5]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801103e:	9202      	str	r2, [sp, #8]
 8011040:	2200      	movs	r2, #0
 8011042:	9201      	str	r2, [sp, #4]
 8011044:	9300      	str	r3, [sp, #0]
 8011046:	4603      	mov	r3, r0
 8011048:	2200      	movs	r2, #0
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f001 fa3a 	bl	80124c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011050:	e113      	b.n	801127a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f000 f916 	bl	8011284 <USBH_HandleEnum>
 8011058:	4603      	mov	r3, r0
 801105a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 801105c:	7bbb      	ldrb	r3, [r7, #14]
 801105e:	b2db      	uxtb	r3, r3
 8011060:	2b00      	cmp	r3, #0
 8011062:	f040 80fd 	bne.w	8011260 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2200      	movs	r2, #0
 801106a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8011074:	2b01      	cmp	r3, #1
 8011076:	d103      	bne.n	8011080 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2208      	movs	r2, #8
 801107c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801107e:	e0ef      	b.n	8011260 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2207      	movs	r2, #7
 8011084:	701a      	strb	r2, [r3, #0]
      break;
 8011086:	e0eb      	b.n	8011260 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 80e8 	beq.w	8011264 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801109a:	2101      	movs	r1, #1
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2208      	movs	r2, #8
 80110a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80110a6:	e0dd      	b.n	8011264 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80110ae:	4619      	mov	r1, r3
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fc3a 	bl	801192a <USBH_SetCfg>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f040 80d5 	bne.w	8011268 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2209      	movs	r2, #9
 80110c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80110c4:	e0d0      	b.n	8011268 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80110cc:	f003 0320 	and.w	r3, r3, #32
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d016      	beq.n	8011102 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80110d4:	2101      	movs	r1, #1
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f000 fc4a 	bl	8011970 <USBH_SetFeature>
 80110dc:	4603      	mov	r3, r0
 80110de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80110e0:	7bbb      	ldrb	r3, [r7, #14]
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d103      	bne.n	80110f0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	220a      	movs	r2, #10
 80110ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80110ee:	e0bd      	b.n	801126c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80110f0:	7bbb      	ldrb	r3, [r7, #14]
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b03      	cmp	r3, #3
 80110f6:	f040 80b9 	bne.w	801126c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	220a      	movs	r2, #10
 80110fe:	701a      	strb	r2, [r3, #0]
      break;
 8011100:	e0b4      	b.n	801126c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	220a      	movs	r2, #10
 8011106:	701a      	strb	r2, [r3, #0]
      break;
 8011108:	e0b0      	b.n	801126c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 80ad 	beq.w	8011270 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2200      	movs	r2, #0
 801111a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801111e:	2300      	movs	r3, #0
 8011120:	73fb      	strb	r3, [r7, #15]
 8011122:	e016      	b.n	8011152 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8011124:	7bfa      	ldrb	r2, [r7, #15]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	32de      	adds	r2, #222	@ 0xde
 801112a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801112e:	791a      	ldrb	r2, [r3, #4]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8011136:	429a      	cmp	r2, r3
 8011138:	d108      	bne.n	801114c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 801113a:	7bfa      	ldrb	r2, [r7, #15]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	32de      	adds	r2, #222	@ 0xde
 8011140:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 801114a:	e005      	b.n	8011158 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801114c:	7bfb      	ldrb	r3, [r7, #15]
 801114e:	3301      	adds	r3, #1
 8011150:	73fb      	strb	r3, [r7, #15]
 8011152:	7bfb      	ldrb	r3, [r7, #15]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d0e5      	beq.n	8011124 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801115e:	2b00      	cmp	r3, #0
 8011160:	d016      	beq.n	8011190 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	4798      	blx	r3
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d109      	bne.n	8011188 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2206      	movs	r2, #6
 8011178:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011180:	2103      	movs	r1, #3
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8011186:	e073      	b.n	8011270 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	220d      	movs	r2, #13
 801118c:	701a      	strb	r2, [r3, #0]
      break;
 801118e:	e06f      	b.n	8011270 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	220d      	movs	r2, #13
 8011194:	701a      	strb	r2, [r3, #0]
      break;
 8011196:	e06b      	b.n	8011270 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d017      	beq.n	80111d2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	4798      	blx	r3
 80111ae:	4603      	mov	r3, r0
 80111b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d103      	bne.n	80111c2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	220b      	movs	r2, #11
 80111be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80111c0:	e058      	b.n	8011274 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80111c2:	7bbb      	ldrb	r3, [r7, #14]
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	2b02      	cmp	r3, #2
 80111c8:	d154      	bne.n	8011274 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	220d      	movs	r2, #13
 80111ce:	701a      	strb	r2, [r3, #0]
      break;
 80111d0:	e050      	b.n	8011274 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	220d      	movs	r2, #13
 80111d6:	701a      	strb	r2, [r3, #0]
      break;
 80111d8:	e04c      	b.n	8011274 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d049      	beq.n	8011278 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80111ea:	695b      	ldr	r3, [r3, #20]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	4798      	blx	r3
      }
      break;
 80111f0:	e042      	b.n	8011278 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2200      	movs	r2, #0
 80111f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7ff fd4b 	bl	8010c96 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011206:	2b00      	cmp	r3, #0
 8011208:	d009      	beq.n	801121e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011224:	2b00      	cmp	r3, #0
 8011226:	d005      	beq.n	8011234 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801122e:	2105      	movs	r1, #5
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801123a:	b2db      	uxtb	r3, r3
 801123c:	2b01      	cmp	r3, #1
 801123e:	d107      	bne.n	8011250 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2200      	movs	r2, #0
 8011244:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7ff fe23 	bl	8010e94 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801124e:	e014      	b.n	801127a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f004 fbfd 	bl	8015a50 <USBH_LL_Start>
      break;
 8011256:	e010      	b.n	801127a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8011258:	bf00      	nop
 801125a:	e00e      	b.n	801127a <USBH_Process+0x3c6>
      break;
 801125c:	bf00      	nop
 801125e:	e00c      	b.n	801127a <USBH_Process+0x3c6>
      break;
 8011260:	bf00      	nop
 8011262:	e00a      	b.n	801127a <USBH_Process+0x3c6>
    break;
 8011264:	bf00      	nop
 8011266:	e008      	b.n	801127a <USBH_Process+0x3c6>
      break;
 8011268:	bf00      	nop
 801126a:	e006      	b.n	801127a <USBH_Process+0x3c6>
      break;
 801126c:	bf00      	nop
 801126e:	e004      	b.n	801127a <USBH_Process+0x3c6>
      break;
 8011270:	bf00      	nop
 8011272:	e002      	b.n	801127a <USBH_Process+0x3c6>
      break;
 8011274:	bf00      	nop
 8011276:	e000      	b.n	801127a <USBH_Process+0x3c6>
      break;
 8011278:	bf00      	nop
  }
  return USBH_OK;
 801127a:	2300      	movs	r3, #0
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b088      	sub	sp, #32
 8011288:	af04      	add	r7, sp, #16
 801128a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801128c:	2301      	movs	r3, #1
 801128e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8011290:	2301      	movs	r3, #1
 8011292:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	785b      	ldrb	r3, [r3, #1]
 8011298:	2b07      	cmp	r3, #7
 801129a:	f200 81bd 	bhi.w	8011618 <USBH_HandleEnum+0x394>
 801129e:	a201      	add	r2, pc, #4	@ (adr r2, 80112a4 <USBH_HandleEnum+0x20>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	080112c5 	.word	0x080112c5
 80112a8:	0801137f 	.word	0x0801137f
 80112ac:	080113e9 	.word	0x080113e9
 80112b0:	08011473 	.word	0x08011473
 80112b4:	080114dd 	.word	0x080114dd
 80112b8:	0801154d 	.word	0x0801154d
 80112bc:	08011593 	.word	0x08011593
 80112c0:	080115d9 	.word	0x080115d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80112c4:	2108      	movs	r1, #8
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 fa4c 	bl	8011764 <USBH_Get_DevDesc>
 80112cc:	4603      	mov	r3, r0
 80112ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80112d0:	7bbb      	ldrb	r3, [r7, #14]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d12e      	bne.n	8011334 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2201      	movs	r2, #1
 80112e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	7919      	ldrb	r1, [r3, #4]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80112f6:	687a      	ldr	r2, [r7, #4]
 80112f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80112fa:	9202      	str	r2, [sp, #8]
 80112fc:	2200      	movs	r2, #0
 80112fe:	9201      	str	r2, [sp, #4]
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	4603      	mov	r3, r0
 8011304:	2280      	movs	r2, #128	@ 0x80
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f001 f8dc 	bl	80124c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	7959      	ldrb	r1, [r3, #5]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011320:	9202      	str	r2, [sp, #8]
 8011322:	2200      	movs	r2, #0
 8011324:	9201      	str	r2, [sp, #4]
 8011326:	9300      	str	r3, [sp, #0]
 8011328:	4603      	mov	r3, r0
 801132a:	2200      	movs	r2, #0
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f001 f8c9 	bl	80124c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8011332:	e173      	b.n	801161c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011334:	7bbb      	ldrb	r3, [r7, #14]
 8011336:	2b03      	cmp	r3, #3
 8011338:	f040 8170 	bne.w	801161c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011342:	3301      	adds	r3, #1
 8011344:	b2da      	uxtb	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011352:	2b03      	cmp	r3, #3
 8011354:	d903      	bls.n	801135e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	220d      	movs	r2, #13
 801135a:	701a      	strb	r2, [r3, #0]
      break;
 801135c:	e15e      	b.n	801161c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	795b      	ldrb	r3, [r3, #5]
 8011362:	4619      	mov	r1, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f001 f8fd 	bl	8012564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	791b      	ldrb	r3, [r3, #4]
 801136e:	4619      	mov	r1, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f001 f8f7 	bl	8012564 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2200      	movs	r2, #0
 801137a:	701a      	strb	r2, [r3, #0]
      break;
 801137c:	e14e      	b.n	801161c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801137e:	2112      	movs	r1, #18
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f000 f9ef 	bl	8011764 <USBH_Get_DevDesc>
 8011386:	4603      	mov	r3, r0
 8011388:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801138a:	7bbb      	ldrb	r3, [r7, #14]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d103      	bne.n	8011398 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2202      	movs	r2, #2
 8011394:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011396:	e143      	b.n	8011620 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011398:	7bbb      	ldrb	r3, [r7, #14]
 801139a:	2b03      	cmp	r3, #3
 801139c:	f040 8140 	bne.w	8011620 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80113a6:	3301      	adds	r3, #1
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80113b6:	2b03      	cmp	r3, #3
 80113b8:	d903      	bls.n	80113c2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	220d      	movs	r2, #13
 80113be:	701a      	strb	r2, [r3, #0]
      break;
 80113c0:	e12e      	b.n	8011620 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	795b      	ldrb	r3, [r3, #5]
 80113c6:	4619      	mov	r1, r3
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f001 f8cb 	bl	8012564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	791b      	ldrb	r3, [r3, #4]
 80113d2:	4619      	mov	r1, r3
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f001 f8c5 	bl	8012564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2200      	movs	r2, #0
 80113de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	701a      	strb	r2, [r3, #0]
      break;
 80113e6:	e11b      	b.n	8011620 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80113e8:	2101      	movs	r1, #1
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f000 fa79 	bl	80118e2 <USBH_SetAddress>
 80113f0:	4603      	mov	r3, r0
 80113f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80113f4:	7bbb      	ldrb	r3, [r7, #14]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d130      	bne.n	801145c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80113fa:	2002      	movs	r0, #2
 80113fc:	f004 fcc2 	bl	8015d84 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2201      	movs	r2, #1
 8011404:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2203      	movs	r2, #3
 801140c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	7919      	ldrb	r1, [r3, #4]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8011422:	9202      	str	r2, [sp, #8]
 8011424:	2200      	movs	r2, #0
 8011426:	9201      	str	r2, [sp, #4]
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	4603      	mov	r3, r0
 801142c:	2280      	movs	r2, #128	@ 0x80
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f001 f848 	bl	80124c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	7959      	ldrb	r1, [r3, #5]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011448:	9202      	str	r2, [sp, #8]
 801144a:	2200      	movs	r2, #0
 801144c:	9201      	str	r2, [sp, #4]
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	4603      	mov	r3, r0
 8011452:	2200      	movs	r2, #0
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f001 f835 	bl	80124c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801145a:	e0e3      	b.n	8011624 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801145c:	7bbb      	ldrb	r3, [r7, #14]
 801145e:	2b03      	cmp	r3, #3
 8011460:	f040 80e0 	bne.w	8011624 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	220d      	movs	r2, #13
 8011468:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	705a      	strb	r2, [r3, #1]
      break;
 8011470:	e0d8      	b.n	8011624 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8011472:	2109      	movs	r1, #9
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 f9a1 	bl	80117bc <USBH_Get_CfgDesc>
 801147a:	4603      	mov	r3, r0
 801147c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801147e:	7bbb      	ldrb	r3, [r7, #14]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d103      	bne.n	801148c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2204      	movs	r2, #4
 8011488:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801148a:	e0cd      	b.n	8011628 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801148c:	7bbb      	ldrb	r3, [r7, #14]
 801148e:	2b03      	cmp	r3, #3
 8011490:	f040 80ca 	bne.w	8011628 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801149a:	3301      	adds	r3, #1
 801149c:	b2da      	uxtb	r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	d903      	bls.n	80114b6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	220d      	movs	r2, #13
 80114b2:	701a      	strb	r2, [r3, #0]
      break;
 80114b4:	e0b8      	b.n	8011628 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	795b      	ldrb	r3, [r3, #5]
 80114ba:	4619      	mov	r1, r3
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f001 f851 	bl	8012564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	791b      	ldrb	r3, [r3, #4]
 80114c6:	4619      	mov	r1, r3
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f001 f84b 	bl	8012564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2200      	movs	r2, #0
 80114d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	701a      	strb	r2, [r3, #0]
      break;
 80114da:	e0a5      	b.n	8011628 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80114e2:	4619      	mov	r1, r3
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 f969 	bl	80117bc <USBH_Get_CfgDesc>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80114ee:	7bbb      	ldrb	r3, [r7, #14]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2205      	movs	r2, #5
 80114f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80114fa:	e097      	b.n	801162c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80114fc:	7bbb      	ldrb	r3, [r7, #14]
 80114fe:	2b03      	cmp	r3, #3
 8011500:	f040 8094 	bne.w	801162c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801150a:	3301      	adds	r3, #1
 801150c:	b2da      	uxtb	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801151a:	2b03      	cmp	r3, #3
 801151c:	d903      	bls.n	8011526 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	220d      	movs	r2, #13
 8011522:	701a      	strb	r2, [r3, #0]
      break;
 8011524:	e082      	b.n	801162c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	795b      	ldrb	r3, [r3, #5]
 801152a:	4619      	mov	r1, r3
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f001 f819 	bl	8012564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	791b      	ldrb	r3, [r3, #4]
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f001 f813 	bl	8012564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2200      	movs	r2, #0
 8011542:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2200      	movs	r2, #0
 8011548:	701a      	strb	r2, [r3, #0]
      break;
 801154a:	e06f      	b.n	801162c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8011552:	2b00      	cmp	r3, #0
 8011554:	d019      	beq.n	801158a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8011562:	23ff      	movs	r3, #255	@ 0xff
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 f953 	bl	8011810 <USBH_Get_StringDesc>
 801156a:	4603      	mov	r3, r0
 801156c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801156e:	7bbb      	ldrb	r3, [r7, #14]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d103      	bne.n	801157c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	2206      	movs	r2, #6
 8011578:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801157a:	e059      	b.n	8011630 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801157c:	7bbb      	ldrb	r3, [r7, #14]
 801157e:	2b03      	cmp	r3, #3
 8011580:	d156      	bne.n	8011630 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2206      	movs	r2, #6
 8011586:	705a      	strb	r2, [r3, #1]
      break;
 8011588:	e052      	b.n	8011630 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2206      	movs	r2, #6
 801158e:	705a      	strb	r2, [r3, #1]
      break;
 8011590:	e04e      	b.n	8011630 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8011598:	2b00      	cmp	r3, #0
 801159a:	d019      	beq.n	80115d0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80115a8:	23ff      	movs	r3, #255	@ 0xff
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f000 f930 	bl	8011810 <USBH_Get_StringDesc>
 80115b0:	4603      	mov	r3, r0
 80115b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80115b4:	7bbb      	ldrb	r3, [r7, #14]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d103      	bne.n	80115c2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2207      	movs	r2, #7
 80115be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80115c0:	e038      	b.n	8011634 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80115c2:	7bbb      	ldrb	r3, [r7, #14]
 80115c4:	2b03      	cmp	r3, #3
 80115c6:	d135      	bne.n	8011634 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2207      	movs	r2, #7
 80115cc:	705a      	strb	r2, [r3, #1]
      break;
 80115ce:	e031      	b.n	8011634 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2207      	movs	r2, #7
 80115d4:	705a      	strb	r2, [r3, #1]
      break;
 80115d6:	e02d      	b.n	8011634 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d017      	beq.n	8011612 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80115ee:	23ff      	movs	r3, #255	@ 0xff
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 f90d 	bl	8011810 <USBH_Get_StringDesc>
 80115f6:	4603      	mov	r3, r0
 80115f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80115fa:	7bbb      	ldrb	r3, [r7, #14]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d102      	bne.n	8011606 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8011600:	2300      	movs	r3, #0
 8011602:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8011604:	e018      	b.n	8011638 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011606:	7bbb      	ldrb	r3, [r7, #14]
 8011608:	2b03      	cmp	r3, #3
 801160a:	d115      	bne.n	8011638 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	73fb      	strb	r3, [r7, #15]
      break;
 8011610:	e012      	b.n	8011638 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	73fb      	strb	r3, [r7, #15]
      break;
 8011616:	e00f      	b.n	8011638 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8011618:	bf00      	nop
 801161a:	e00e      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 801161c:	bf00      	nop
 801161e:	e00c      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 8011620:	bf00      	nop
 8011622:	e00a      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 8011624:	bf00      	nop
 8011626:	e008      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 8011628:	bf00      	nop
 801162a:	e006      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 801162c:	bf00      	nop
 801162e:	e004      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 8011630:	bf00      	nop
 8011632:	e002      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 8011634:	bf00      	nop
 8011636:	e000      	b.n	801163a <USBH_HandleEnum+0x3b6>
      break;
 8011638:	bf00      	nop
  }
  return Status;
 801163a:	7bfb      	ldrb	r3, [r7, #15]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8011644:	b480      	push	{r7}
 8011646:	b083      	sub	sp, #12
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8011656:	bf00      	nop
 8011658:	370c      	adds	r7, #12
 801165a:	46bd      	mov	sp, r7
 801165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011660:	4770      	bx	lr

08011662 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011662:	b580      	push	{r7, lr}
 8011664:	b082      	sub	sp, #8
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f000 f804 	bl	8011686 <USBH_HandleSof>
}
 801167e:	bf00      	nop
 8011680:	3708      	adds	r7, #8
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011686:	b580      	push	{r7, lr}
 8011688:	b082      	sub	sp, #8
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	b2db      	uxtb	r3, r3
 8011694:	2b0b      	cmp	r3, #11
 8011696:	d10a      	bne.n	80116ae <USBH_HandleSof+0x28>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d005      	beq.n	80116ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	4798      	blx	r3
  }
}
 80116ae:	bf00      	nop
 80116b0:	3708      	adds	r7, #8
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80116b6:	b480      	push	{r7}
 80116b8:	b083      	sub	sp, #12
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80116c6:	bf00      	nop
}
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr

080116d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80116d2:	b480      	push	{r7}
 80116d4:	b083      	sub	sp, #12
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2200      	movs	r2, #0
 80116de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80116e2:	bf00      	nop
}
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80116ee:	b480      	push	{r7}
 80116f0:	b083      	sub	sp, #12
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801170e:	2300      	movs	r3, #0
}
 8011710:	4618      	mov	r0, r3
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr

0801171c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2201      	movs	r2, #1
 8011728:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2200      	movs	r2, #0
 8011730:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f004 f9a2 	bl	8015a86 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	791b      	ldrb	r3, [r3, #4]
 8011746:	4619      	mov	r1, r3
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 ff0b 	bl	8012564 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	795b      	ldrb	r3, [r3, #5]
 8011752:	4619      	mov	r1, r3
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 ff05 	bl	8012564 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b086      	sub	sp, #24
 8011768:	af02      	add	r7, sp, #8
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8011770:	887b      	ldrh	r3, [r7, #2]
 8011772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011776:	d901      	bls.n	801177c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011778:	2303      	movs	r3, #3
 801177a:	e01b      	b.n	80117b4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011782:	887b      	ldrh	r3, [r7, #2]
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	4613      	mov	r3, r2
 8011788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801178c:	2100      	movs	r1, #0
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f000 f872 	bl	8011878 <USBH_GetDescriptor>
 8011794:	4603      	mov	r3, r0
 8011796:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8011798:	7bfb      	ldrb	r3, [r7, #15]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d109      	bne.n	80117b2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80117a4:	887a      	ldrh	r2, [r7, #2]
 80117a6:	4619      	mov	r1, r3
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f000 f929 	bl	8011a00 <USBH_ParseDevDesc>
 80117ae:	4603      	mov	r3, r0
 80117b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80117b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3710      	adds	r7, #16
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b086      	sub	sp, #24
 80117c0:	af02      	add	r7, sp, #8
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	460b      	mov	r3, r1
 80117c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	331c      	adds	r3, #28
 80117cc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80117ce:	887b      	ldrh	r3, [r7, #2]
 80117d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80117d4:	d901      	bls.n	80117da <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80117d6:	2303      	movs	r3, #3
 80117d8:	e016      	b.n	8011808 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80117da:	887b      	ldrh	r3, [r7, #2]
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80117e4:	2100      	movs	r1, #0
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f000 f846 	bl	8011878 <USBH_GetDescriptor>
 80117ec:	4603      	mov	r3, r0
 80117ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80117f0:	7bfb      	ldrb	r3, [r7, #15]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d107      	bne.n	8011806 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80117f6:	887b      	ldrh	r3, [r7, #2]
 80117f8:	461a      	mov	r2, r3
 80117fa:	68b9      	ldr	r1, [r7, #8]
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 f9af 	bl	8011b60 <USBH_ParseCfgDesc>
 8011802:	4603      	mov	r3, r0
 8011804:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011806:	7bfb      	ldrb	r3, [r7, #15]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3710      	adds	r7, #16
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b088      	sub	sp, #32
 8011814:	af02      	add	r7, sp, #8
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	607a      	str	r2, [r7, #4]
 801181a:	461a      	mov	r2, r3
 801181c:	460b      	mov	r3, r1
 801181e:	72fb      	strb	r3, [r7, #11]
 8011820:	4613      	mov	r3, r2
 8011822:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8011824:	893b      	ldrh	r3, [r7, #8]
 8011826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801182a:	d802      	bhi.n	8011832 <USBH_Get_StringDesc+0x22>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d101      	bne.n	8011836 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011832:	2303      	movs	r3, #3
 8011834:	e01c      	b.n	8011870 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8011836:	7afb      	ldrb	r3, [r7, #11]
 8011838:	b29b      	uxth	r3, r3
 801183a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801183e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011846:	893b      	ldrh	r3, [r7, #8]
 8011848:	9300      	str	r3, [sp, #0]
 801184a:	460b      	mov	r3, r1
 801184c:	2100      	movs	r1, #0
 801184e:	68f8      	ldr	r0, [r7, #12]
 8011850:	f000 f812 	bl	8011878 <USBH_GetDescriptor>
 8011854:	4603      	mov	r3, r0
 8011856:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8011858:	7dfb      	ldrb	r3, [r7, #23]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d107      	bne.n	801186e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011864:	893a      	ldrh	r2, [r7, #8]
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	4618      	mov	r0, r3
 801186a:	f000 fb8d 	bl	8011f88 <USBH_ParseStringDesc>
  }

  return status;
 801186e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011870:	4618      	mov	r0, r3
 8011872:	3718      	adds	r7, #24
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	607b      	str	r3, [r7, #4]
 8011882:	460b      	mov	r3, r1
 8011884:	72fb      	strb	r3, [r7, #11]
 8011886:	4613      	mov	r3, r2
 8011888:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	789b      	ldrb	r3, [r3, #2]
 801188e:	2b01      	cmp	r3, #1
 8011890:	d11c      	bne.n	80118cc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011892:	7afb      	ldrb	r3, [r7, #11]
 8011894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011898:	b2da      	uxtb	r2, r3
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2206      	movs	r2, #6
 80118a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	893a      	ldrh	r2, [r7, #8]
 80118a8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80118aa:	893b      	ldrh	r3, [r7, #8]
 80118ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80118b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80118b4:	d104      	bne.n	80118c0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f240 4209 	movw	r2, #1033	@ 0x409
 80118bc:	829a      	strh	r2, [r3, #20]
 80118be:	e002      	b.n	80118c6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2200      	movs	r2, #0
 80118c4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	8b3a      	ldrh	r2, [r7, #24]
 80118ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80118cc:	8b3b      	ldrh	r3, [r7, #24]
 80118ce:	461a      	mov	r2, r3
 80118d0:	6879      	ldr	r1, [r7, #4]
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	f000 fba5 	bl	8012022 <USBH_CtlReq>
 80118d8:	4603      	mov	r3, r0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b082      	sub	sp, #8
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
 80118ea:	460b      	mov	r3, r1
 80118ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	789b      	ldrb	r3, [r3, #2]
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d10f      	bne.n	8011916 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2205      	movs	r2, #5
 8011900:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011902:	78fb      	ldrb	r3, [r7, #3]
 8011904:	b29a      	uxth	r2, r3
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2200      	movs	r2, #0
 8011914:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011916:	2200      	movs	r2, #0
 8011918:	2100      	movs	r1, #0
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fb81 	bl	8012022 <USBH_CtlReq>
 8011920:	4603      	mov	r3, r0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
 8011932:	460b      	mov	r3, r1
 8011934:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	789b      	ldrb	r3, [r3, #2]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d10e      	bne.n	801195c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2209      	movs	r2, #9
 8011948:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	887a      	ldrh	r2, [r7, #2]
 801194e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2200      	movs	r2, #0
 801195a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801195c:	2200      	movs	r2, #0
 801195e:	2100      	movs	r1, #0
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f000 fb5e 	bl	8012022 <USBH_CtlReq>
 8011966:	4603      	mov	r3, r0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	460b      	mov	r3, r1
 801197a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	789b      	ldrb	r3, [r3, #2]
 8011980:	2b01      	cmp	r3, #1
 8011982:	d10f      	bne.n	80119a4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2203      	movs	r2, #3
 801198e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011990:	78fb      	ldrb	r3, [r7, #3]
 8011992:	b29a      	uxth	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2200      	movs	r2, #0
 80119a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80119a4:	2200      	movs	r2, #0
 80119a6:	2100      	movs	r1, #0
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f000 fb3a 	bl	8012022 <USBH_CtlReq>
 80119ae:	4603      	mov	r3, r0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	460b      	mov	r3, r1
 80119c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	789b      	ldrb	r3, [r3, #2]
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d10f      	bne.n	80119ec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2202      	movs	r2, #2
 80119d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2201      	movs	r2, #1
 80119d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80119de:	78fb      	ldrb	r3, [r7, #3]
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80119ec:	2200      	movs	r2, #0
 80119ee:	2100      	movs	r1, #0
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f000 fb16 	bl	8012022 <USBH_CtlReq>
 80119f6:	4603      	mov	r3, r0
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b087      	sub	sp, #28
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	60f8      	str	r0, [r7, #12]
 8011a08:	60b9      	str	r1, [r7, #8]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8011a14:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8011a16:	2300      	movs	r3, #0
 8011a18:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d101      	bne.n	8011a24 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8011a20:	2302      	movs	r3, #2
 8011a22:	e094      	b.n	8011b4e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	781a      	ldrb	r2, [r3, #0]
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	785a      	ldrb	r2, [r3, #1]
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	3302      	adds	r3, #2
 8011a38:	781b      	ldrb	r3, [r3, #0]
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	3303      	adds	r3, #3
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	021b      	lsls	r3, r3, #8
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	4313      	orrs	r3, r2
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	791a      	ldrb	r2, [r3, #4]
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	795a      	ldrb	r2, [r3, #5]
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	799a      	ldrb	r2, [r3, #6]
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	79da      	ldrb	r2, [r3, #7]
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d004      	beq.n	8011a82 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d11b      	bne.n	8011aba <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	79db      	ldrb	r3, [r3, #7]
 8011a86:	2b20      	cmp	r3, #32
 8011a88:	dc0f      	bgt.n	8011aaa <USBH_ParseDevDesc+0xaa>
 8011a8a:	2b08      	cmp	r3, #8
 8011a8c:	db0f      	blt.n	8011aae <USBH_ParseDevDesc+0xae>
 8011a8e:	3b08      	subs	r3, #8
 8011a90:	4a32      	ldr	r2, [pc, #200]	@ (8011b5c <USBH_ParseDevDesc+0x15c>)
 8011a92:	fa22 f303 	lsr.w	r3, r2, r3
 8011a96:	f003 0301 	and.w	r3, r3, #1
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	bf14      	ite	ne
 8011a9e:	2301      	movne	r3, #1
 8011aa0:	2300      	moveq	r3, #0
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d106      	bne.n	8011ab6 <USBH_ParseDevDesc+0xb6>
 8011aa8:	e001      	b.n	8011aae <USBH_ParseDevDesc+0xae>
 8011aaa:	2b40      	cmp	r3, #64	@ 0x40
 8011aac:	d003      	beq.n	8011ab6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	2208      	movs	r2, #8
 8011ab2:	71da      	strb	r2, [r3, #7]
        break;
 8011ab4:	e000      	b.n	8011ab8 <USBH_ParseDevDesc+0xb8>
        break;
 8011ab6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8011ab8:	e00e      	b.n	8011ad8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011ac0:	2b02      	cmp	r3, #2
 8011ac2:	d107      	bne.n	8011ad4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	79db      	ldrb	r3, [r3, #7]
 8011ac8:	2b08      	cmp	r3, #8
 8011aca:	d005      	beq.n	8011ad8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	2208      	movs	r2, #8
 8011ad0:	71da      	strb	r2, [r3, #7]
 8011ad2:	e001      	b.n	8011ad8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011ad4:	2303      	movs	r3, #3
 8011ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8011ad8:	88fb      	ldrh	r3, [r7, #6]
 8011ada:	2b08      	cmp	r3, #8
 8011adc:	d936      	bls.n	8011b4c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	3308      	adds	r3, #8
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	3309      	adds	r3, #9
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	021b      	lsls	r3, r3, #8
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	4313      	orrs	r3, r2
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	330a      	adds	r3, #10
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	461a      	mov	r2, r3
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	330b      	adds	r3, #11
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	021b      	lsls	r3, r3, #8
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	330c      	adds	r3, #12
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	461a      	mov	r2, r3
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	330d      	adds	r3, #13
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	021b      	lsls	r3, r3, #8
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	4313      	orrs	r3, r2
 8011b26:	b29a      	uxth	r2, r3
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	7b9a      	ldrb	r2, [r3, #14]
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	7bda      	ldrb	r2, [r3, #15]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	7c1a      	ldrb	r2, [r3, #16]
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	7c5a      	ldrb	r2, [r3, #17]
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	371c      	adds	r7, #28
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	01000101 	.word	0x01000101

08011b60 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08c      	sub	sp, #48	@ 0x30
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011b74:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8011b82:	2300      	movs	r3, #0
 8011b84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8011b8e:	2302      	movs	r3, #2
 8011b90:	e0da      	b.n	8011d48 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	781a      	ldrb	r2, [r3, #0]
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	785a      	ldrb	r2, [r3, #1]
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	3302      	adds	r3, #2
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	461a      	mov	r2, r3
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	3303      	adds	r3, #3
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	021b      	lsls	r3, r3, #8
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011bc0:	bf28      	it	cs
 8011bc2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	6a3b      	ldr	r3, [r7, #32]
 8011bca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	791a      	ldrb	r2, [r3, #4]
 8011bd0:	6a3b      	ldr	r3, [r7, #32]
 8011bd2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	795a      	ldrb	r2, [r3, #5]
 8011bd8:	6a3b      	ldr	r3, [r7, #32]
 8011bda:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	799a      	ldrb	r2, [r3, #6]
 8011be0:	6a3b      	ldr	r3, [r7, #32]
 8011be2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	79da      	ldrb	r2, [r3, #7]
 8011be8:	6a3b      	ldr	r3, [r7, #32]
 8011bea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	7a1a      	ldrb	r2, [r3, #8]
 8011bf0:	6a3b      	ldr	r3, [r7, #32]
 8011bf2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8011bf4:	6a3b      	ldr	r3, [r7, #32]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b09      	cmp	r3, #9
 8011bfa:	d002      	beq.n	8011c02 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
 8011bfe:	2209      	movs	r2, #9
 8011c00:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011c02:	88fb      	ldrh	r3, [r7, #6]
 8011c04:	2b09      	cmp	r3, #9
 8011c06:	f240 809d 	bls.w	8011d44 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8011c0a:	2309      	movs	r3, #9
 8011c0c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011c12:	e081      	b.n	8011d18 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011c14:	f107 0316 	add.w	r3, r7, #22
 8011c18:	4619      	mov	r1, r3
 8011c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c1c:	f000 f9e7 	bl	8011fee <USBH_GetNextDesc>
 8011c20:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c24:	785b      	ldrb	r3, [r3, #1]
 8011c26:	2b04      	cmp	r3, #4
 8011c28:	d176      	bne.n	8011d18 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	2b09      	cmp	r3, #9
 8011c30:	d002      	beq.n	8011c38 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c34:	2209      	movs	r2, #9
 8011c36:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c3c:	221a      	movs	r2, #26
 8011c3e:	fb02 f303 	mul.w	r3, r2, r3
 8011c42:	3308      	adds	r3, #8
 8011c44:	6a3a      	ldr	r2, [r7, #32]
 8011c46:	4413      	add	r3, r2
 8011c48:	3302      	adds	r3, #2
 8011c4a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011c4e:	69f8      	ldr	r0, [r7, #28]
 8011c50:	f000 f87e 	bl	8011d50 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011c54:	2300      	movs	r3, #0
 8011c56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011c5e:	e043      	b.n	8011ce8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011c60:	f107 0316 	add.w	r3, r7, #22
 8011c64:	4619      	mov	r1, r3
 8011c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c68:	f000 f9c1 	bl	8011fee <USBH_GetNextDesc>
 8011c6c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c70:	785b      	ldrb	r3, [r3, #1]
 8011c72:	2b05      	cmp	r3, #5
 8011c74:	d138      	bne.n	8011ce8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	795b      	ldrb	r3, [r3, #5]
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d113      	bne.n	8011ca6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011c7e:	69fb      	ldr	r3, [r7, #28]
 8011c80:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8011c82:	2b02      	cmp	r3, #2
 8011c84:	d003      	beq.n	8011c8e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	799b      	ldrb	r3, [r3, #6]
 8011c8a:	2b03      	cmp	r3, #3
 8011c8c:	d10b      	bne.n	8011ca6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	79db      	ldrb	r3, [r3, #7]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d10b      	bne.n	8011cae <USBH_ParseCfgDesc+0x14e>
 8011c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	2b09      	cmp	r3, #9
 8011c9c:	d007      	beq.n	8011cae <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8011c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca0:	2209      	movs	r2, #9
 8011ca2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011ca4:	e003      	b.n	8011cae <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca8:	2207      	movs	r2, #7
 8011caa:	701a      	strb	r2, [r3, #0]
 8011cac:	e000      	b.n	8011cb0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011cae:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011cb4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011cb8:	3201      	adds	r2, #1
 8011cba:	00d2      	lsls	r2, r2, #3
 8011cbc:	211a      	movs	r1, #26
 8011cbe:	fb01 f303 	mul.w	r3, r1, r3
 8011cc2:	4413      	add	r3, r2
 8011cc4:	3308      	adds	r3, #8
 8011cc6:	6a3a      	ldr	r2, [r7, #32]
 8011cc8:	4413      	add	r3, r2
 8011cca:	3304      	adds	r3, #4
 8011ccc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011cd0:	69b9      	ldr	r1, [r7, #24]
 8011cd2:	68f8      	ldr	r0, [r7, #12]
 8011cd4:	f000 f870 	bl	8011db8 <USBH_ParseEPDesc>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8011cde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011ce8:	69fb      	ldr	r3, [r7, #28]
 8011cea:	791b      	ldrb	r3, [r3, #4]
 8011cec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d204      	bcs.n	8011cfe <USBH_ParseCfgDesc+0x19e>
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	885a      	ldrh	r2, [r3, #2]
 8011cf8:	8afb      	ldrh	r3, [r7, #22]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d8b0      	bhi.n	8011c60 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	791b      	ldrb	r3, [r3, #4]
 8011d02:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d201      	bcs.n	8011d0e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8011d0a:	2303      	movs	r3, #3
 8011d0c:	e01c      	b.n	8011d48 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8011d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d12:	3301      	adds	r3, #1
 8011d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d805      	bhi.n	8011d2c <USBH_ParseCfgDesc+0x1cc>
 8011d20:	6a3b      	ldr	r3, [r7, #32]
 8011d22:	885a      	ldrh	r2, [r3, #2]
 8011d24:	8afb      	ldrh	r3, [r7, #22]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	f63f af74 	bhi.w	8011c14 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011d2c:	6a3b      	ldr	r3, [r7, #32]
 8011d2e:	791b      	ldrb	r3, [r3, #4]
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	bf28      	it	cs
 8011d34:	2302      	movcs	r3, #2
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d201      	bcs.n	8011d44 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8011d40:	2303      	movs	r3, #3
 8011d42:	e001      	b.n	8011d48 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8011d44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3730      	adds	r7, #48	@ 0x30
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}

08011d50 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	781a      	ldrb	r2, [r3, #0]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	785a      	ldrb	r2, [r3, #1]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	789a      	ldrb	r2, [r3, #2]
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	78da      	ldrb	r2, [r3, #3]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	3304      	adds	r3, #4
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	bf28      	it	cs
 8011d84:	2302      	movcs	r3, #2
 8011d86:	b2da      	uxtb	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	795a      	ldrb	r2, [r3, #5]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	799a      	ldrb	r2, [r3, #6]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	79da      	ldrb	r2, [r3, #7]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	7a1a      	ldrb	r2, [r3, #8]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	721a      	strb	r2, [r3, #8]
}
 8011dac:	bf00      	nop
 8011dae:	370c      	adds	r7, #12
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr

08011db8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b087      	sub	sp, #28
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	781a      	ldrb	r2, [r3, #0]
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	785a      	ldrb	r2, [r3, #1]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	789a      	ldrb	r2, [r3, #2]
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	78da      	ldrb	r2, [r3, #3]
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	3304      	adds	r3, #4
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	3305      	adds	r3, #5
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	021b      	lsls	r3, r3, #8
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	799a      	ldrb	r2, [r3, #6]
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	889b      	ldrh	r3, [r3, #4]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d009      	beq.n	8011e26 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e1a:	d804      	bhi.n	8011e26 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e24:	d901      	bls.n	8011e2a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8011e26:	2303      	movs	r3, #3
 8011e28:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d136      	bne.n	8011ea2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	78db      	ldrb	r3, [r3, #3]
 8011e38:	f003 0303 	and.w	r3, r3, #3
 8011e3c:	2b02      	cmp	r3, #2
 8011e3e:	d108      	bne.n	8011e52 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	889b      	ldrh	r3, [r3, #4]
 8011e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e48:	f240 8097 	bls.w	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e4c:	2303      	movs	r3, #3
 8011e4e:	75fb      	strb	r3, [r7, #23]
 8011e50:	e093      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	78db      	ldrb	r3, [r3, #3]
 8011e56:	f003 0303 	and.w	r3, r3, #3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d107      	bne.n	8011e6e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	889b      	ldrh	r3, [r3, #4]
 8011e62:	2b40      	cmp	r3, #64	@ 0x40
 8011e64:	f240 8089 	bls.w	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e68:	2303      	movs	r3, #3
 8011e6a:	75fb      	strb	r3, [r7, #23]
 8011e6c:	e085      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	78db      	ldrb	r3, [r3, #3]
 8011e72:	f003 0303 	and.w	r3, r3, #3
 8011e76:	2b01      	cmp	r3, #1
 8011e78:	d005      	beq.n	8011e86 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	78db      	ldrb	r3, [r3, #3]
 8011e7e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e82:	2b03      	cmp	r3, #3
 8011e84:	d10a      	bne.n	8011e9c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	799b      	ldrb	r3, [r3, #6]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d003      	beq.n	8011e96 <USBH_ParseEPDesc+0xde>
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	799b      	ldrb	r3, [r3, #6]
 8011e92:	2b10      	cmp	r3, #16
 8011e94:	d970      	bls.n	8011f78 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8011e96:	2303      	movs	r3, #3
 8011e98:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011e9a:	e06d      	b.n	8011f78 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	75fb      	strb	r3, [r7, #23]
 8011ea0:	e06b      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d13c      	bne.n	8011f26 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	78db      	ldrb	r3, [r3, #3]
 8011eb0:	f003 0303 	and.w	r3, r3, #3
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	d005      	beq.n	8011ec4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	78db      	ldrb	r3, [r3, #3]
 8011ebc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d106      	bne.n	8011ed2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	889b      	ldrh	r3, [r3, #4]
 8011ec8:	2b40      	cmp	r3, #64	@ 0x40
 8011eca:	d956      	bls.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011ecc:	2303      	movs	r3, #3
 8011ece:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011ed0:	e053      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	78db      	ldrb	r3, [r3, #3]
 8011ed6:	f003 0303 	and.w	r3, r3, #3
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d10e      	bne.n	8011efc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	799b      	ldrb	r3, [r3, #6]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d007      	beq.n	8011ef6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8011eea:	2b10      	cmp	r3, #16
 8011eec:	d803      	bhi.n	8011ef6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8011ef2:	2b40      	cmp	r3, #64	@ 0x40
 8011ef4:	d941      	bls.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011ef6:	2303      	movs	r3, #3
 8011ef8:	75fb      	strb	r3, [r7, #23]
 8011efa:	e03e      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	78db      	ldrb	r3, [r3, #3]
 8011f00:	f003 0303 	and.w	r3, r3, #3
 8011f04:	2b03      	cmp	r3, #3
 8011f06:	d10b      	bne.n	8011f20 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	799b      	ldrb	r3, [r3, #6]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d004      	beq.n	8011f1a <USBH_ParseEPDesc+0x162>
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	889b      	ldrh	r3, [r3, #4]
 8011f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011f18:	d32f      	bcc.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	75fb      	strb	r3, [r7, #23]
 8011f1e:	e02c      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011f20:	2303      	movs	r3, #3
 8011f22:	75fb      	strb	r3, [r7, #23]
 8011f24:	e029      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011f2c:	2b02      	cmp	r3, #2
 8011f2e:	d120      	bne.n	8011f72 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	78db      	ldrb	r3, [r3, #3]
 8011f34:	f003 0303 	and.w	r3, r3, #3
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d106      	bne.n	8011f4a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	889b      	ldrh	r3, [r3, #4]
 8011f40:	2b08      	cmp	r3, #8
 8011f42:	d01a      	beq.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011f44:	2303      	movs	r3, #3
 8011f46:	75fb      	strb	r3, [r7, #23]
 8011f48:	e017      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	78db      	ldrb	r3, [r3, #3]
 8011f4e:	f003 0303 	and.w	r3, r3, #3
 8011f52:	2b03      	cmp	r3, #3
 8011f54:	d10a      	bne.n	8011f6c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	799b      	ldrb	r3, [r3, #6]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d003      	beq.n	8011f66 <USBH_ParseEPDesc+0x1ae>
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	889b      	ldrh	r3, [r3, #4]
 8011f62:	2b08      	cmp	r3, #8
 8011f64:	d909      	bls.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011f66:	2303      	movs	r3, #3
 8011f68:	75fb      	strb	r3, [r7, #23]
 8011f6a:	e006      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011f6c:	2303      	movs	r3, #3
 8011f6e:	75fb      	strb	r3, [r7, #23]
 8011f70:	e003      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011f72:	2303      	movs	r3, #3
 8011f74:	75fb      	strb	r3, [r7, #23]
 8011f76:	e000      	b.n	8011f7a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011f78:	bf00      	nop
  }

  return status;
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	371c      	adds	r7, #28
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b087      	sub	sp, #28
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	4613      	mov	r3, r2
 8011f94:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	3301      	adds	r3, #1
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b03      	cmp	r3, #3
 8011f9e:	d120      	bne.n	8011fe2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	1e9a      	subs	r2, r3, #2
 8011fa6:	88fb      	ldrh	r3, [r7, #6]
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	bf28      	it	cs
 8011fac:	4613      	movcs	r3, r2
 8011fae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	3302      	adds	r3, #2
 8011fb4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	82fb      	strh	r3, [r7, #22]
 8011fba:	e00b      	b.n	8011fd4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011fbc:	8afb      	ldrh	r3, [r7, #22]
 8011fbe:	68fa      	ldr	r2, [r7, #12]
 8011fc0:	4413      	add	r3, r2
 8011fc2:	781a      	ldrb	r2, [r3, #0]
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011fc8:	68bb      	ldr	r3, [r7, #8]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011fce:	8afb      	ldrh	r3, [r7, #22]
 8011fd0:	3302      	adds	r3, #2
 8011fd2:	82fb      	strh	r3, [r7, #22]
 8011fd4:	8afa      	ldrh	r2, [r7, #22]
 8011fd6:	8abb      	ldrh	r3, [r7, #20]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d3ef      	bcc.n	8011fbc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	701a      	strb	r2, [r3, #0]
  }
}
 8011fe2:	bf00      	nop
 8011fe4:	371c      	adds	r7, #28
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr

08011fee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011fee:	b480      	push	{r7}
 8011ff0:	b085      	sub	sp, #20
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	6078      	str	r0, [r7, #4]
 8011ff6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	7812      	ldrb	r2, [r2, #0]
 8012000:	4413      	add	r3, r2
 8012002:	b29a      	uxth	r2, r3
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	4413      	add	r3, r2
 8012012:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012014:	68fb      	ldr	r3, [r7, #12]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3714      	adds	r7, #20
 801201a:	46bd      	mov	sp, r7
 801201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012020:	4770      	bx	lr

08012022 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8012022:	b580      	push	{r7, lr}
 8012024:	b086      	sub	sp, #24
 8012026:	af00      	add	r7, sp, #0
 8012028:	60f8      	str	r0, [r7, #12]
 801202a:	60b9      	str	r1, [r7, #8]
 801202c:	4613      	mov	r3, r2
 801202e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8012030:	2301      	movs	r3, #1
 8012032:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	789b      	ldrb	r3, [r3, #2]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d002      	beq.n	8012042 <USBH_CtlReq+0x20>
 801203c:	2b02      	cmp	r3, #2
 801203e:	d00f      	beq.n	8012060 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8012040:	e027      	b.n	8012092 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	68ba      	ldr	r2, [r7, #8]
 8012046:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	88fa      	ldrh	r2, [r7, #6]
 801204c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2201      	movs	r2, #1
 8012052:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2202      	movs	r2, #2
 8012058:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801205a:	2301      	movs	r3, #1
 801205c:	75fb      	strb	r3, [r7, #23]
      break;
 801205e:	e018      	b.n	8012092 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f000 f81b 	bl	801209c <USBH_HandleControl>
 8012066:	4603      	mov	r3, r0
 8012068:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801206a:	7dfb      	ldrb	r3, [r7, #23]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d002      	beq.n	8012076 <USBH_CtlReq+0x54>
 8012070:	7dfb      	ldrb	r3, [r7, #23]
 8012072:	2b03      	cmp	r3, #3
 8012074:	d106      	bne.n	8012084 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2201      	movs	r2, #1
 801207a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2200      	movs	r2, #0
 8012080:	761a      	strb	r2, [r3, #24]
      break;
 8012082:	e005      	b.n	8012090 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8012084:	7dfb      	ldrb	r3, [r7, #23]
 8012086:	2b02      	cmp	r3, #2
 8012088:	d102      	bne.n	8012090 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2201      	movs	r2, #1
 801208e:	709a      	strb	r2, [r3, #2]
      break;
 8012090:	bf00      	nop
  }
  return status;
 8012092:	7dfb      	ldrb	r3, [r7, #23]
}
 8012094:	4618      	mov	r0, r3
 8012096:	3718      	adds	r7, #24
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}

0801209c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b086      	sub	sp, #24
 80120a0:	af02      	add	r7, sp, #8
 80120a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80120a4:	2301      	movs	r3, #1
 80120a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	7e1b      	ldrb	r3, [r3, #24]
 80120b0:	3b01      	subs	r3, #1
 80120b2:	2b0a      	cmp	r3, #10
 80120b4:	f200 8156 	bhi.w	8012364 <USBH_HandleControl+0x2c8>
 80120b8:	a201      	add	r2, pc, #4	@ (adr r2, 80120c0 <USBH_HandleControl+0x24>)
 80120ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120be:	bf00      	nop
 80120c0:	080120ed 	.word	0x080120ed
 80120c4:	08012107 	.word	0x08012107
 80120c8:	08012171 	.word	0x08012171
 80120cc:	08012197 	.word	0x08012197
 80120d0:	080121cf 	.word	0x080121cf
 80120d4:	080121f9 	.word	0x080121f9
 80120d8:	0801224b 	.word	0x0801224b
 80120dc:	0801226d 	.word	0x0801226d
 80120e0:	080122a9 	.word	0x080122a9
 80120e4:	080122cf 	.word	0x080122cf
 80120e8:	0801230d 	.word	0x0801230d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f103 0110 	add.w	r1, r3, #16
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	795b      	ldrb	r3, [r3, #5]
 80120f6:	461a      	mov	r2, r3
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f000 f943 	bl	8012384 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	2202      	movs	r2, #2
 8012102:	761a      	strb	r2, [r3, #24]
      break;
 8012104:	e139      	b.n	801237a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	795b      	ldrb	r3, [r3, #5]
 801210a:	4619      	mov	r1, r3
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f003 fda9 	bl	8015c64 <USBH_LL_GetURBState>
 8012112:	4603      	mov	r3, r0
 8012114:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8012116:	7bbb      	ldrb	r3, [r7, #14]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d11e      	bne.n	801215a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	7c1b      	ldrb	r3, [r3, #16]
 8012120:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012124:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	8adb      	ldrh	r3, [r3, #22]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00a      	beq.n	8012144 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801212e:	7b7b      	ldrb	r3, [r7, #13]
 8012130:	2b80      	cmp	r3, #128	@ 0x80
 8012132:	d103      	bne.n	801213c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2203      	movs	r2, #3
 8012138:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801213a:	e115      	b.n	8012368 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2205      	movs	r2, #5
 8012140:	761a      	strb	r2, [r3, #24]
      break;
 8012142:	e111      	b.n	8012368 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8012144:	7b7b      	ldrb	r3, [r7, #13]
 8012146:	2b80      	cmp	r3, #128	@ 0x80
 8012148:	d103      	bne.n	8012152 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2209      	movs	r2, #9
 801214e:	761a      	strb	r2, [r3, #24]
      break;
 8012150:	e10a      	b.n	8012368 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2207      	movs	r2, #7
 8012156:	761a      	strb	r2, [r3, #24]
      break;
 8012158:	e106      	b.n	8012368 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801215a:	7bbb      	ldrb	r3, [r7, #14]
 801215c:	2b04      	cmp	r3, #4
 801215e:	d003      	beq.n	8012168 <USBH_HandleControl+0xcc>
 8012160:	7bbb      	ldrb	r3, [r7, #14]
 8012162:	2b02      	cmp	r3, #2
 8012164:	f040 8100 	bne.w	8012368 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	220b      	movs	r2, #11
 801216c:	761a      	strb	r2, [r3, #24]
      break;
 801216e:	e0fb      	b.n	8012368 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012176:	b29a      	uxth	r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6899      	ldr	r1, [r3, #8]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	899a      	ldrh	r2, [r3, #12]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	791b      	ldrb	r3, [r3, #4]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f000 f93a 	bl	8012402 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2204      	movs	r2, #4
 8012192:	761a      	strb	r2, [r3, #24]
      break;
 8012194:	e0f1      	b.n	801237a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	791b      	ldrb	r3, [r3, #4]
 801219a:	4619      	mov	r1, r3
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f003 fd61 	bl	8015c64 <USBH_LL_GetURBState>
 80121a2:	4603      	mov	r3, r0
 80121a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80121a6:	7bbb      	ldrb	r3, [r7, #14]
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d102      	bne.n	80121b2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2209      	movs	r2, #9
 80121b0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80121b2:	7bbb      	ldrb	r3, [r7, #14]
 80121b4:	2b05      	cmp	r3, #5
 80121b6:	d102      	bne.n	80121be <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80121b8:	2303      	movs	r3, #3
 80121ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80121bc:	e0d6      	b.n	801236c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80121be:	7bbb      	ldrb	r3, [r7, #14]
 80121c0:	2b04      	cmp	r3, #4
 80121c2:	f040 80d3 	bne.w	801236c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	220b      	movs	r2, #11
 80121ca:	761a      	strb	r2, [r3, #24]
      break;
 80121cc:	e0ce      	b.n	801236c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6899      	ldr	r1, [r3, #8]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	899a      	ldrh	r2, [r3, #12]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	795b      	ldrb	r3, [r3, #5]
 80121da:	2001      	movs	r0, #1
 80121dc:	9000      	str	r0, [sp, #0]
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f8ea 	bl	80123b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2206      	movs	r2, #6
 80121f4:	761a      	strb	r2, [r3, #24]
      break;
 80121f6:	e0c0      	b.n	801237a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	795b      	ldrb	r3, [r3, #5]
 80121fc:	4619      	mov	r1, r3
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f003 fd30 	bl	8015c64 <USBH_LL_GetURBState>
 8012204:	4603      	mov	r3, r0
 8012206:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012208:	7bbb      	ldrb	r3, [r7, #14]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d103      	bne.n	8012216 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2207      	movs	r2, #7
 8012212:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8012214:	e0ac      	b.n	8012370 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8012216:	7bbb      	ldrb	r3, [r7, #14]
 8012218:	2b05      	cmp	r3, #5
 801221a:	d105      	bne.n	8012228 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	220c      	movs	r2, #12
 8012220:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8012222:	2303      	movs	r3, #3
 8012224:	73fb      	strb	r3, [r7, #15]
      break;
 8012226:	e0a3      	b.n	8012370 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	2b02      	cmp	r3, #2
 801222c:	d103      	bne.n	8012236 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2205      	movs	r2, #5
 8012232:	761a      	strb	r2, [r3, #24]
      break;
 8012234:	e09c      	b.n	8012370 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8012236:	7bbb      	ldrb	r3, [r7, #14]
 8012238:	2b04      	cmp	r3, #4
 801223a:	f040 8099 	bne.w	8012370 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	220b      	movs	r2, #11
 8012242:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8012244:	2302      	movs	r3, #2
 8012246:	73fb      	strb	r3, [r7, #15]
      break;
 8012248:	e092      	b.n	8012370 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	791b      	ldrb	r3, [r3, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	2100      	movs	r1, #0
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 f8d5 	bl	8012402 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801225e:	b29a      	uxth	r2, r3
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2208      	movs	r2, #8
 8012268:	761a      	strb	r2, [r3, #24]

      break;
 801226a:	e086      	b.n	801237a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	791b      	ldrb	r3, [r3, #4]
 8012270:	4619      	mov	r1, r3
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f003 fcf6 	bl	8015c64 <USBH_LL_GetURBState>
 8012278:	4603      	mov	r3, r0
 801227a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801227c:	7bbb      	ldrb	r3, [r7, #14]
 801227e:	2b01      	cmp	r3, #1
 8012280:	d105      	bne.n	801228e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	220d      	movs	r2, #13
 8012286:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012288:	2300      	movs	r3, #0
 801228a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801228c:	e072      	b.n	8012374 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801228e:	7bbb      	ldrb	r3, [r7, #14]
 8012290:	2b04      	cmp	r3, #4
 8012292:	d103      	bne.n	801229c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	220b      	movs	r2, #11
 8012298:	761a      	strb	r2, [r3, #24]
      break;
 801229a:	e06b      	b.n	8012374 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	2b05      	cmp	r3, #5
 80122a0:	d168      	bne.n	8012374 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80122a2:	2303      	movs	r3, #3
 80122a4:	73fb      	strb	r3, [r7, #15]
      break;
 80122a6:	e065      	b.n	8012374 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	795b      	ldrb	r3, [r3, #5]
 80122ac:	2201      	movs	r2, #1
 80122ae:	9200      	str	r2, [sp, #0]
 80122b0:	2200      	movs	r2, #0
 80122b2:	2100      	movs	r1, #0
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f000 f87f 	bl	80123b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	220a      	movs	r2, #10
 80122ca:	761a      	strb	r2, [r3, #24]
      break;
 80122cc:	e055      	b.n	801237a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	795b      	ldrb	r3, [r3, #5]
 80122d2:	4619      	mov	r1, r3
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f003 fcc5 	bl	8015c64 <USBH_LL_GetURBState>
 80122da:	4603      	mov	r3, r0
 80122dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80122de:	7bbb      	ldrb	r3, [r7, #14]
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d105      	bne.n	80122f0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80122e4:	2300      	movs	r3, #0
 80122e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	220d      	movs	r2, #13
 80122ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80122ee:	e043      	b.n	8012378 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80122f0:	7bbb      	ldrb	r3, [r7, #14]
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d103      	bne.n	80122fe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	2209      	movs	r2, #9
 80122fa:	761a      	strb	r2, [r3, #24]
      break;
 80122fc:	e03c      	b.n	8012378 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80122fe:	7bbb      	ldrb	r3, [r7, #14]
 8012300:	2b04      	cmp	r3, #4
 8012302:	d139      	bne.n	8012378 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	220b      	movs	r2, #11
 8012308:	761a      	strb	r2, [r3, #24]
      break;
 801230a:	e035      	b.n	8012378 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	7e5b      	ldrb	r3, [r3, #25]
 8012310:	3301      	adds	r3, #1
 8012312:	b2da      	uxtb	r2, r3
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	765a      	strb	r2, [r3, #25]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	7e5b      	ldrb	r3, [r3, #25]
 801231c:	2b02      	cmp	r3, #2
 801231e:	d806      	bhi.n	801232e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2201      	movs	r2, #1
 8012324:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2201      	movs	r2, #1
 801232a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801232c:	e025      	b.n	801237a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012334:	2106      	movs	r1, #6
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2200      	movs	r2, #0
 801233e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	795b      	ldrb	r3, [r3, #5]
 8012344:	4619      	mov	r1, r3
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f000 f90c 	bl	8012564 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	791b      	ldrb	r3, [r3, #4]
 8012350:	4619      	mov	r1, r3
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f000 f906 	bl	8012564 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2200      	movs	r2, #0
 801235c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801235e:	2302      	movs	r3, #2
 8012360:	73fb      	strb	r3, [r7, #15]
      break;
 8012362:	e00a      	b.n	801237a <USBH_HandleControl+0x2de>

    default:
      break;
 8012364:	bf00      	nop
 8012366:	e008      	b.n	801237a <USBH_HandleControl+0x2de>
      break;
 8012368:	bf00      	nop
 801236a:	e006      	b.n	801237a <USBH_HandleControl+0x2de>
      break;
 801236c:	bf00      	nop
 801236e:	e004      	b.n	801237a <USBH_HandleControl+0x2de>
      break;
 8012370:	bf00      	nop
 8012372:	e002      	b.n	801237a <USBH_HandleControl+0x2de>
      break;
 8012374:	bf00      	nop
 8012376:	e000      	b.n	801237a <USBH_HandleControl+0x2de>
      break;
 8012378:	bf00      	nop
  }

  return status;
 801237a:	7bfb      	ldrb	r3, [r7, #15]
}
 801237c:	4618      	mov	r0, r3
 801237e:	3710      	adds	r7, #16
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b088      	sub	sp, #32
 8012388:	af04      	add	r7, sp, #16
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	4613      	mov	r3, r2
 8012390:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012392:	79f9      	ldrb	r1, [r7, #7]
 8012394:	2300      	movs	r3, #0
 8012396:	9303      	str	r3, [sp, #12]
 8012398:	2308      	movs	r3, #8
 801239a:	9302      	str	r3, [sp, #8]
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	9301      	str	r3, [sp, #4]
 80123a0:	2300      	movs	r3, #0
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	2300      	movs	r3, #0
 80123a6:	2200      	movs	r2, #0
 80123a8:	68f8      	ldr	r0, [r7, #12]
 80123aa:	f003 fc2a 	bl	8015c02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80123ae:	2300      	movs	r3, #0
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3710      	adds	r7, #16
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b088      	sub	sp, #32
 80123bc:	af04      	add	r7, sp, #16
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	4611      	mov	r1, r2
 80123c4:	461a      	mov	r2, r3
 80123c6:	460b      	mov	r3, r1
 80123c8:	80fb      	strh	r3, [r7, #6]
 80123ca:	4613      	mov	r3, r2
 80123cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d001      	beq.n	80123dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80123d8:	2300      	movs	r3, #0
 80123da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80123dc:	7979      	ldrb	r1, [r7, #5]
 80123de:	7e3b      	ldrb	r3, [r7, #24]
 80123e0:	9303      	str	r3, [sp, #12]
 80123e2:	88fb      	ldrh	r3, [r7, #6]
 80123e4:	9302      	str	r3, [sp, #8]
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	9301      	str	r3, [sp, #4]
 80123ea:	2301      	movs	r3, #1
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	2300      	movs	r3, #0
 80123f0:	2200      	movs	r2, #0
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f003 fc05 	bl	8015c02 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b088      	sub	sp, #32
 8012406:	af04      	add	r7, sp, #16
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	4611      	mov	r1, r2
 801240e:	461a      	mov	r2, r3
 8012410:	460b      	mov	r3, r1
 8012412:	80fb      	strh	r3, [r7, #6]
 8012414:	4613      	mov	r3, r2
 8012416:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012418:	7979      	ldrb	r1, [r7, #5]
 801241a:	2300      	movs	r3, #0
 801241c:	9303      	str	r3, [sp, #12]
 801241e:	88fb      	ldrh	r3, [r7, #6]
 8012420:	9302      	str	r3, [sp, #8]
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	9301      	str	r3, [sp, #4]
 8012426:	2301      	movs	r3, #1
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	2300      	movs	r3, #0
 801242c:	2201      	movs	r2, #1
 801242e:	68f8      	ldr	r0, [r7, #12]
 8012430:	f003 fbe7 	bl	8015c02 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8012434:	2300      	movs	r3, #0

}
 8012436:	4618      	mov	r0, r3
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b088      	sub	sp, #32
 8012442:	af04      	add	r7, sp, #16
 8012444:	60f8      	str	r0, [r7, #12]
 8012446:	60b9      	str	r1, [r7, #8]
 8012448:	4611      	mov	r1, r2
 801244a:	461a      	mov	r2, r3
 801244c:	460b      	mov	r3, r1
 801244e:	80fb      	strh	r3, [r7, #6]
 8012450:	4613      	mov	r3, r2
 8012452:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801245e:	2300      	movs	r3, #0
 8012460:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012462:	7979      	ldrb	r1, [r7, #5]
 8012464:	7e3b      	ldrb	r3, [r7, #24]
 8012466:	9303      	str	r3, [sp, #12]
 8012468:	88fb      	ldrh	r3, [r7, #6]
 801246a:	9302      	str	r3, [sp, #8]
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	9301      	str	r3, [sp, #4]
 8012470:	2301      	movs	r3, #1
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	2302      	movs	r3, #2
 8012476:	2200      	movs	r2, #0
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f003 fbc2 	bl	8015c02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801247e:	2300      	movs	r3, #0
}
 8012480:	4618      	mov	r0, r3
 8012482:	3710      	adds	r7, #16
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b088      	sub	sp, #32
 801248c:	af04      	add	r7, sp, #16
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	4611      	mov	r1, r2
 8012494:	461a      	mov	r2, r3
 8012496:	460b      	mov	r3, r1
 8012498:	80fb      	strh	r3, [r7, #6]
 801249a:	4613      	mov	r3, r2
 801249c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801249e:	7979      	ldrb	r1, [r7, #5]
 80124a0:	2300      	movs	r3, #0
 80124a2:	9303      	str	r3, [sp, #12]
 80124a4:	88fb      	ldrh	r3, [r7, #6]
 80124a6:	9302      	str	r3, [sp, #8]
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	9301      	str	r3, [sp, #4]
 80124ac:	2301      	movs	r3, #1
 80124ae:	9300      	str	r3, [sp, #0]
 80124b0:	2302      	movs	r3, #2
 80124b2:	2201      	movs	r2, #1
 80124b4:	68f8      	ldr	r0, [r7, #12]
 80124b6:	f003 fba4 	bl	8015c02 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80124ba:	2300      	movs	r3, #0
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3710      	adds	r7, #16
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b086      	sub	sp, #24
 80124c8:	af04      	add	r7, sp, #16
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	4608      	mov	r0, r1
 80124ce:	4611      	mov	r1, r2
 80124d0:	461a      	mov	r2, r3
 80124d2:	4603      	mov	r3, r0
 80124d4:	70fb      	strb	r3, [r7, #3]
 80124d6:	460b      	mov	r3, r1
 80124d8:	70bb      	strb	r3, [r7, #2]
 80124da:	4613      	mov	r3, r2
 80124dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80124de:	7878      	ldrb	r0, [r7, #1]
 80124e0:	78ba      	ldrb	r2, [r7, #2]
 80124e2:	78f9      	ldrb	r1, [r7, #3]
 80124e4:	8b3b      	ldrh	r3, [r7, #24]
 80124e6:	9302      	str	r3, [sp, #8]
 80124e8:	7d3b      	ldrb	r3, [r7, #20]
 80124ea:	9301      	str	r3, [sp, #4]
 80124ec:	7c3b      	ldrb	r3, [r7, #16]
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	4603      	mov	r3, r0
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f003 fb37 	bl	8015b66 <USBH_LL_OpenPipe>

  return USBH_OK;
 80124f8:	2300      	movs	r3, #0
}
 80124fa:	4618      	mov	r0, r3
 80124fc:	3708      	adds	r7, #8
 80124fe:	46bd      	mov	sp, r7
 8012500:	bd80      	pop	{r7, pc}

08012502 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8012502:	b580      	push	{r7, lr}
 8012504:	b082      	sub	sp, #8
 8012506:	af00      	add	r7, sp, #0
 8012508:	6078      	str	r0, [r7, #4]
 801250a:	460b      	mov	r3, r1
 801250c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801250e:	78fb      	ldrb	r3, [r7, #3]
 8012510:	4619      	mov	r1, r3
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f003 fb56 	bl	8015bc4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8012518:	2300      	movs	r3, #0
}
 801251a:	4618      	mov	r0, r3
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b084      	sub	sp, #16
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	460b      	mov	r3, r1
 801252c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f836 	bl	80125a0 <USBH_GetFreePipe>
 8012534:	4603      	mov	r3, r0
 8012536:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8012538:	89fb      	ldrh	r3, [r7, #14]
 801253a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801253e:	4293      	cmp	r3, r2
 8012540:	d00a      	beq.n	8012558 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8012542:	78fa      	ldrb	r2, [r7, #3]
 8012544:	89fb      	ldrh	r3, [r7, #14]
 8012546:	f003 030f 	and.w	r3, r3, #15
 801254a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801254e:	6879      	ldr	r1, [r7, #4]
 8012550:	33e0      	adds	r3, #224	@ 0xe0
 8012552:	009b      	lsls	r3, r3, #2
 8012554:	440b      	add	r3, r1
 8012556:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8012558:	89fb      	ldrh	r3, [r7, #14]
 801255a:	b2db      	uxtb	r3, r3
}
 801255c:	4618      	mov	r0, r3
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	460b      	mov	r3, r1
 801256e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	2b0f      	cmp	r3, #15
 8012574:	d80d      	bhi.n	8012592 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8012576:	78fb      	ldrb	r3, [r7, #3]
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	33e0      	adds	r3, #224	@ 0xe0
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	78fb      	ldrb	r3, [r7, #3]
 8012584:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8012588:	6879      	ldr	r1, [r7, #4]
 801258a:	33e0      	adds	r3, #224	@ 0xe0
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	440b      	add	r3, r1
 8012590:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	370c      	adds	r7, #12
 8012598:	46bd      	mov	sp, r7
 801259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259e:	4770      	bx	lr

080125a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80125a8:	2300      	movs	r3, #0
 80125aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80125ac:	2300      	movs	r3, #0
 80125ae:	73fb      	strb	r3, [r7, #15]
 80125b0:	e00f      	b.n	80125d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80125b2:	7bfb      	ldrb	r3, [r7, #15]
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	33e0      	adds	r3, #224	@ 0xe0
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	4413      	add	r3, r2
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d102      	bne.n	80125cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80125c6:	7bfb      	ldrb	r3, [r7, #15]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	e007      	b.n	80125dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80125cc:	7bfb      	ldrb	r3, [r7, #15]
 80125ce:	3301      	adds	r3, #1
 80125d0:	73fb      	strb	r3, [r7, #15]
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
 80125d4:	2b0f      	cmp	r3, #15
 80125d6:	d9ec      	bls.n	80125b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80125d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3714      	adds	r7, #20
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	4603      	mov	r3, r0
 80125f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	4a08      	ldr	r2, [pc, #32]	@ (8012618 <disk_status+0x30>)
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	4413      	add	r3, r2
 80125fa:	685b      	ldr	r3, [r3, #4]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	79fa      	ldrb	r2, [r7, #7]
 8012600:	4905      	ldr	r1, [pc, #20]	@ (8012618 <disk_status+0x30>)
 8012602:	440a      	add	r2, r1
 8012604:	7b12      	ldrb	r2, [r2, #12]
 8012606:	4610      	mov	r0, r2
 8012608:	4798      	blx	r3
 801260a:	4603      	mov	r3, r0
 801260c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3710      	adds	r7, #16
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	20001284 	.word	0x20001284

0801261c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	4603      	mov	r3, r0
 8012624:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012626:	2300      	movs	r3, #0
 8012628:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	4a0e      	ldr	r2, [pc, #56]	@ (8012668 <disk_initialize+0x4c>)
 801262e:	5cd3      	ldrb	r3, [r2, r3]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d114      	bne.n	801265e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012634:	79fb      	ldrb	r3, [r7, #7]
 8012636:	4a0c      	ldr	r2, [pc, #48]	@ (8012668 <disk_initialize+0x4c>)
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	4413      	add	r3, r2
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	79fa      	ldrb	r2, [r7, #7]
 8012642:	4909      	ldr	r1, [pc, #36]	@ (8012668 <disk_initialize+0x4c>)
 8012644:	440a      	add	r2, r1
 8012646:	7b12      	ldrb	r2, [r2, #12]
 8012648:	4610      	mov	r0, r2
 801264a:	4798      	blx	r3
 801264c:	4603      	mov	r3, r0
 801264e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8012650:	7bfb      	ldrb	r3, [r7, #15]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d103      	bne.n	801265e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8012656:	79fb      	ldrb	r3, [r7, #7]
 8012658:	4a03      	ldr	r2, [pc, #12]	@ (8012668 <disk_initialize+0x4c>)
 801265a:	2101      	movs	r1, #1
 801265c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012660:	4618      	mov	r0, r3
 8012662:	3710      	adds	r7, #16
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	20001284 	.word	0x20001284

0801266c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801266c:	b590      	push	{r4, r7, lr}
 801266e:	b087      	sub	sp, #28
 8012670:	af00      	add	r7, sp, #0
 8012672:	60b9      	str	r1, [r7, #8]
 8012674:	607a      	str	r2, [r7, #4]
 8012676:	603b      	str	r3, [r7, #0]
 8012678:	4603      	mov	r3, r0
 801267a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801267c:	7bfb      	ldrb	r3, [r7, #15]
 801267e:	4a0a      	ldr	r2, [pc, #40]	@ (80126a8 <disk_read+0x3c>)
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	4413      	add	r3, r2
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	689c      	ldr	r4, [r3, #8]
 8012688:	7bfb      	ldrb	r3, [r7, #15]
 801268a:	4a07      	ldr	r2, [pc, #28]	@ (80126a8 <disk_read+0x3c>)
 801268c:	4413      	add	r3, r2
 801268e:	7b18      	ldrb	r0, [r3, #12]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	68b9      	ldr	r1, [r7, #8]
 8012696:	47a0      	blx	r4
 8012698:	4603      	mov	r3, r0
 801269a:	75fb      	strb	r3, [r7, #23]
  return res;
 801269c:	7dfb      	ldrb	r3, [r7, #23]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	371c      	adds	r7, #28
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd90      	pop	{r4, r7, pc}
 80126a6:	bf00      	nop
 80126a8:	20001284 	.word	0x20001284

080126ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80126ac:	b590      	push	{r4, r7, lr}
 80126ae:	b087      	sub	sp, #28
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60b9      	str	r1, [r7, #8]
 80126b4:	607a      	str	r2, [r7, #4]
 80126b6:	603b      	str	r3, [r7, #0]
 80126b8:	4603      	mov	r3, r0
 80126ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
 80126be:	4a0a      	ldr	r2, [pc, #40]	@ (80126e8 <disk_write+0x3c>)
 80126c0:	009b      	lsls	r3, r3, #2
 80126c2:	4413      	add	r3, r2
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	68dc      	ldr	r4, [r3, #12]
 80126c8:	7bfb      	ldrb	r3, [r7, #15]
 80126ca:	4a07      	ldr	r2, [pc, #28]	@ (80126e8 <disk_write+0x3c>)
 80126cc:	4413      	add	r3, r2
 80126ce:	7b18      	ldrb	r0, [r3, #12]
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	68b9      	ldr	r1, [r7, #8]
 80126d6:	47a0      	blx	r4
 80126d8:	4603      	mov	r3, r0
 80126da:	75fb      	strb	r3, [r7, #23]
  return res;
 80126dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	371c      	adds	r7, #28
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd90      	pop	{r4, r7, pc}
 80126e6:	bf00      	nop
 80126e8:	20001284 	.word	0x20001284

080126ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	4603      	mov	r3, r0
 80126f4:	603a      	str	r2, [r7, #0]
 80126f6:	71fb      	strb	r3, [r7, #7]
 80126f8:	460b      	mov	r3, r1
 80126fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80126fc:	79fb      	ldrb	r3, [r7, #7]
 80126fe:	4a09      	ldr	r2, [pc, #36]	@ (8012724 <disk_ioctl+0x38>)
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4413      	add	r3, r2
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	691b      	ldr	r3, [r3, #16]
 8012708:	79fa      	ldrb	r2, [r7, #7]
 801270a:	4906      	ldr	r1, [pc, #24]	@ (8012724 <disk_ioctl+0x38>)
 801270c:	440a      	add	r2, r1
 801270e:	7b10      	ldrb	r0, [r2, #12]
 8012710:	79b9      	ldrb	r1, [r7, #6]
 8012712:	683a      	ldr	r2, [r7, #0]
 8012714:	4798      	blx	r3
 8012716:	4603      	mov	r3, r0
 8012718:	73fb      	strb	r3, [r7, #15]
  return res;
 801271a:	7bfb      	ldrb	r3, [r7, #15]
}
 801271c:	4618      	mov	r0, r3
 801271e:	3710      	adds	r7, #16
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	20001284 	.word	0x20001284

08012728 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012728:	b480      	push	{r7}
 801272a:	b085      	sub	sp, #20
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	3301      	adds	r3, #1
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012738:	89fb      	ldrh	r3, [r7, #14]
 801273a:	021b      	lsls	r3, r3, #8
 801273c:	b21a      	sxth	r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	b21b      	sxth	r3, r3
 8012744:	4313      	orrs	r3, r2
 8012746:	b21b      	sxth	r3, r3
 8012748:	81fb      	strh	r3, [r7, #14]
	return rv;
 801274a:	89fb      	ldrh	r3, [r7, #14]
}
 801274c:	4618      	mov	r0, r3
 801274e:	3714      	adds	r7, #20
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr

08012758 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	3303      	adds	r3, #3
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	021b      	lsls	r3, r3, #8
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	3202      	adds	r2, #2
 8012770:	7812      	ldrb	r2, [r2, #0]
 8012772:	4313      	orrs	r3, r2
 8012774:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	021b      	lsls	r3, r3, #8
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	3201      	adds	r2, #1
 801277e:	7812      	ldrb	r2, [r2, #0]
 8012780:	4313      	orrs	r3, r2
 8012782:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	021b      	lsls	r3, r3, #8
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	7812      	ldrb	r2, [r2, #0]
 801278c:	4313      	orrs	r3, r2
 801278e:	60fb      	str	r3, [r7, #12]
	return rv;
 8012790:	68fb      	ldr	r3, [r7, #12]
}
 8012792:	4618      	mov	r0, r3
 8012794:	3714      	adds	r7, #20
 8012796:	46bd      	mov	sp, r7
 8012798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279c:	4770      	bx	lr

0801279e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801279e:	b480      	push	{r7}
 80127a0:	b083      	sub	sp, #12
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]
 80127a6:	460b      	mov	r3, r1
 80127a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	607a      	str	r2, [r7, #4]
 80127b0:	887a      	ldrh	r2, [r7, #2]
 80127b2:	b2d2      	uxtb	r2, r2
 80127b4:	701a      	strb	r2, [r3, #0]
 80127b6:	887b      	ldrh	r3, [r7, #2]
 80127b8:	0a1b      	lsrs	r3, r3, #8
 80127ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	1c5a      	adds	r2, r3, #1
 80127c0:	607a      	str	r2, [r7, #4]
 80127c2:	887a      	ldrh	r2, [r7, #2]
 80127c4:	b2d2      	uxtb	r2, r2
 80127c6:	701a      	strb	r2, [r3, #0]
}
 80127c8:	bf00      	nop
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr

080127d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80127d4:	b480      	push	{r7}
 80127d6:	b083      	sub	sp, #12
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	1c5a      	adds	r2, r3, #1
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	683a      	ldr	r2, [r7, #0]
 80127e6:	b2d2      	uxtb	r2, r2
 80127e8:	701a      	strb	r2, [r3, #0]
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	0a1b      	lsrs	r3, r3, #8
 80127ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	1c5a      	adds	r2, r3, #1
 80127f4:	607a      	str	r2, [r7, #4]
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	b2d2      	uxtb	r2, r2
 80127fa:	701a      	strb	r2, [r3, #0]
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	0a1b      	lsrs	r3, r3, #8
 8012800:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	1c5a      	adds	r2, r3, #1
 8012806:	607a      	str	r2, [r7, #4]
 8012808:	683a      	ldr	r2, [r7, #0]
 801280a:	b2d2      	uxtb	r2, r2
 801280c:	701a      	strb	r2, [r3, #0]
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	0a1b      	lsrs	r3, r3, #8
 8012812:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	1c5a      	adds	r2, r3, #1
 8012818:	607a      	str	r2, [r7, #4]
 801281a:	683a      	ldr	r2, [r7, #0]
 801281c:	b2d2      	uxtb	r2, r2
 801281e:	701a      	strb	r2, [r3, #0]
}
 8012820:	bf00      	nop
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801282c:	b480      	push	{r7}
 801282e:	b087      	sub	sp, #28
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00d      	beq.n	8012862 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012846:	693a      	ldr	r2, [r7, #16]
 8012848:	1c53      	adds	r3, r2, #1
 801284a:	613b      	str	r3, [r7, #16]
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	1c59      	adds	r1, r3, #1
 8012850:	6179      	str	r1, [r7, #20]
 8012852:	7812      	ldrb	r2, [r2, #0]
 8012854:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	3b01      	subs	r3, #1
 801285a:	607b      	str	r3, [r7, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d1f1      	bne.n	8012846 <mem_cpy+0x1a>
	}
}
 8012862:	bf00      	nop
 8012864:	371c      	adds	r7, #28
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801286e:	b480      	push	{r7}
 8012870:	b087      	sub	sp, #28
 8012872:	af00      	add	r7, sp, #0
 8012874:	60f8      	str	r0, [r7, #12]
 8012876:	60b9      	str	r1, [r7, #8]
 8012878:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	1c5a      	adds	r2, r3, #1
 8012882:	617a      	str	r2, [r7, #20]
 8012884:	68ba      	ldr	r2, [r7, #8]
 8012886:	b2d2      	uxtb	r2, r2
 8012888:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	3b01      	subs	r3, #1
 801288e:	607b      	str	r3, [r7, #4]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d1f3      	bne.n	801287e <mem_set+0x10>
}
 8012896:	bf00      	nop
 8012898:	bf00      	nop
 801289a:	371c      	adds	r7, #28
 801289c:	46bd      	mov	sp, r7
 801289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a2:	4770      	bx	lr

080128a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80128a4:	b480      	push	{r7}
 80128a6:	b089      	sub	sp, #36	@ 0x24
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	61fb      	str	r3, [r7, #28]
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80128b8:	2300      	movs	r3, #0
 80128ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	61fa      	str	r2, [r7, #28]
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	4619      	mov	r1, r3
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	61ba      	str	r2, [r7, #24]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	1acb      	subs	r3, r1, r3
 80128d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	3b01      	subs	r3, #1
 80128d6:	607b      	str	r3, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d002      	beq.n	80128e4 <mem_cmp+0x40>
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d0eb      	beq.n	80128bc <mem_cmp+0x18>

	return r;
 80128e4:	697b      	ldr	r3, [r7, #20]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3724      	adds	r7, #36	@ 0x24
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr

080128f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80128f2:	b480      	push	{r7}
 80128f4:	b083      	sub	sp, #12
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	6078      	str	r0, [r7, #4]
 80128fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80128fc:	e002      	b.n	8012904 <chk_chr+0x12>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3301      	adds	r3, #1
 8012902:	607b      	str	r3, [r7, #4]
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d005      	beq.n	8012918 <chk_chr+0x26>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	461a      	mov	r2, r3
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	4293      	cmp	r3, r2
 8012916:	d1f2      	bne.n	80128fe <chk_chr+0xc>
	return *str;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	781b      	ldrb	r3, [r3, #0]
}
 801291c:	4618      	mov	r0, r3
 801291e:	370c      	adds	r7, #12
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012928:	b480      	push	{r7}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012932:	2300      	movs	r3, #0
 8012934:	60bb      	str	r3, [r7, #8]
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	60fb      	str	r3, [r7, #12]
 801293a:	e029      	b.n	8012990 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801293c:	4a27      	ldr	r2, [pc, #156]	@ (80129dc <chk_lock+0xb4>)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	011b      	lsls	r3, r3, #4
 8012942:	4413      	add	r3, r2
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d01d      	beq.n	8012986 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801294a:	4a24      	ldr	r2, [pc, #144]	@ (80129dc <chk_lock+0xb4>)
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	011b      	lsls	r3, r3, #4
 8012950:	4413      	add	r3, r2
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	429a      	cmp	r2, r3
 801295a:	d116      	bne.n	801298a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801295c:	4a1f      	ldr	r2, [pc, #124]	@ (80129dc <chk_lock+0xb4>)
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	011b      	lsls	r3, r3, #4
 8012962:	4413      	add	r3, r2
 8012964:	3304      	adds	r3, #4
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801296c:	429a      	cmp	r2, r3
 801296e:	d10c      	bne.n	801298a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012970:	4a1a      	ldr	r2, [pc, #104]	@ (80129dc <chk_lock+0xb4>)
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	011b      	lsls	r3, r3, #4
 8012976:	4413      	add	r3, r2
 8012978:	3308      	adds	r3, #8
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012980:	429a      	cmp	r2, r3
 8012982:	d102      	bne.n	801298a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012984:	e007      	b.n	8012996 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012986:	2301      	movs	r3, #1
 8012988:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	3301      	adds	r3, #1
 801298e:	60fb      	str	r3, [r7, #12]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d9d2      	bls.n	801293c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2b02      	cmp	r3, #2
 801299a:	d109      	bne.n	80129b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d102      	bne.n	80129a8 <chk_lock+0x80>
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	2b02      	cmp	r3, #2
 80129a6:	d101      	bne.n	80129ac <chk_lock+0x84>
 80129a8:	2300      	movs	r3, #0
 80129aa:	e010      	b.n	80129ce <chk_lock+0xa6>
 80129ac:	2312      	movs	r3, #18
 80129ae:	e00e      	b.n	80129ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d108      	bne.n	80129c8 <chk_lock+0xa0>
 80129b6:	4a09      	ldr	r2, [pc, #36]	@ (80129dc <chk_lock+0xb4>)
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	011b      	lsls	r3, r3, #4
 80129bc:	4413      	add	r3, r2
 80129be:	330c      	adds	r3, #12
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129c6:	d101      	bne.n	80129cc <chk_lock+0xa4>
 80129c8:	2310      	movs	r3, #16
 80129ca:	e000      	b.n	80129ce <chk_lock+0xa6>
 80129cc:	2300      	movs	r3, #0
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3714      	adds	r7, #20
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	20001064 	.word	0x20001064

080129e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80129e6:	2300      	movs	r3, #0
 80129e8:	607b      	str	r3, [r7, #4]
 80129ea:	e002      	b.n	80129f2 <enq_lock+0x12>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3301      	adds	r3, #1
 80129f0:	607b      	str	r3, [r7, #4]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	d806      	bhi.n	8012a06 <enq_lock+0x26>
 80129f8:	4a09      	ldr	r2, [pc, #36]	@ (8012a20 <enq_lock+0x40>)
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	011b      	lsls	r3, r3, #4
 80129fe:	4413      	add	r3, r2
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d1f2      	bne.n	80129ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	bf14      	ite	ne
 8012a0c:	2301      	movne	r3, #1
 8012a0e:	2300      	moveq	r3, #0
 8012a10:	b2db      	uxtb	r3, r3
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr
 8012a1e:	bf00      	nop
 8012a20:	20001064 	.word	0x20001064

08012a24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
 8012a2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012a2e:	2300      	movs	r3, #0
 8012a30:	60fb      	str	r3, [r7, #12]
 8012a32:	e01f      	b.n	8012a74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012a34:	4a41      	ldr	r2, [pc, #260]	@ (8012b3c <inc_lock+0x118>)
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	011b      	lsls	r3, r3, #4
 8012a3a:	4413      	add	r3, r2
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d113      	bne.n	8012a6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012a46:	4a3d      	ldr	r2, [pc, #244]	@ (8012b3c <inc_lock+0x118>)
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	011b      	lsls	r3, r3, #4
 8012a4c:	4413      	add	r3, r2
 8012a4e:	3304      	adds	r3, #4
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d109      	bne.n	8012a6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012a5a:	4a38      	ldr	r2, [pc, #224]	@ (8012b3c <inc_lock+0x118>)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	011b      	lsls	r3, r3, #4
 8012a60:	4413      	add	r3, r2
 8012a62:	3308      	adds	r3, #8
 8012a64:	681a      	ldr	r2, [r3, #0]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d006      	beq.n	8012a7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	3301      	adds	r3, #1
 8012a72:	60fb      	str	r3, [r7, #12]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d9dc      	bls.n	8012a34 <inc_lock+0x10>
 8012a7a:	e000      	b.n	8012a7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012a7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2b02      	cmp	r3, #2
 8012a82:	d132      	bne.n	8012aea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012a84:	2300      	movs	r3, #0
 8012a86:	60fb      	str	r3, [r7, #12]
 8012a88:	e002      	b.n	8012a90 <inc_lock+0x6c>
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	60fb      	str	r3, [r7, #12]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d806      	bhi.n	8012aa4 <inc_lock+0x80>
 8012a96:	4a29      	ldr	r2, [pc, #164]	@ (8012b3c <inc_lock+0x118>)
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	011b      	lsls	r3, r3, #4
 8012a9c:	4413      	add	r3, r2
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d1f2      	bne.n	8012a8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	d101      	bne.n	8012aae <inc_lock+0x8a>
 8012aaa:	2300      	movs	r3, #0
 8012aac:	e040      	b.n	8012b30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	4922      	ldr	r1, [pc, #136]	@ (8012b3c <inc_lock+0x118>)
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	011b      	lsls	r3, r3, #4
 8012ab8:	440b      	add	r3, r1
 8012aba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	689a      	ldr	r2, [r3, #8]
 8012ac0:	491e      	ldr	r1, [pc, #120]	@ (8012b3c <inc_lock+0x118>)
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	011b      	lsls	r3, r3, #4
 8012ac6:	440b      	add	r3, r1
 8012ac8:	3304      	adds	r3, #4
 8012aca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	695a      	ldr	r2, [r3, #20]
 8012ad0:	491a      	ldr	r1, [pc, #104]	@ (8012b3c <inc_lock+0x118>)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	011b      	lsls	r3, r3, #4
 8012ad6:	440b      	add	r3, r1
 8012ad8:	3308      	adds	r3, #8
 8012ada:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012adc:	4a17      	ldr	r2, [pc, #92]	@ (8012b3c <inc_lock+0x118>)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	011b      	lsls	r3, r3, #4
 8012ae2:	4413      	add	r3, r2
 8012ae4:	330c      	adds	r3, #12
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d009      	beq.n	8012b04 <inc_lock+0xe0>
 8012af0:	4a12      	ldr	r2, [pc, #72]	@ (8012b3c <inc_lock+0x118>)
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	011b      	lsls	r3, r3, #4
 8012af6:	4413      	add	r3, r2
 8012af8:	330c      	adds	r3, #12
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <inc_lock+0xe0>
 8012b00:	2300      	movs	r3, #0
 8012b02:	e015      	b.n	8012b30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d108      	bne.n	8012b1c <inc_lock+0xf8>
 8012b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8012b3c <inc_lock+0x118>)
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	011b      	lsls	r3, r3, #4
 8012b10:	4413      	add	r3, r2
 8012b12:	330c      	adds	r3, #12
 8012b14:	881b      	ldrh	r3, [r3, #0]
 8012b16:	3301      	adds	r3, #1
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	e001      	b.n	8012b20 <inc_lock+0xfc>
 8012b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012b20:	4906      	ldr	r1, [pc, #24]	@ (8012b3c <inc_lock+0x118>)
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	011b      	lsls	r3, r3, #4
 8012b26:	440b      	add	r3, r1
 8012b28:	330c      	adds	r3, #12
 8012b2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	3301      	adds	r3, #1
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3714      	adds	r7, #20
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr
 8012b3c:	20001064 	.word	0x20001064

08012b40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	607b      	str	r3, [r7, #4]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2b01      	cmp	r3, #1
 8012b52:	d825      	bhi.n	8012ba0 <dec_lock+0x60>
		n = Files[i].ctr;
 8012b54:	4a17      	ldr	r2, [pc, #92]	@ (8012bb4 <dec_lock+0x74>)
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	011b      	lsls	r3, r3, #4
 8012b5a:	4413      	add	r3, r2
 8012b5c:	330c      	adds	r3, #12
 8012b5e:	881b      	ldrh	r3, [r3, #0]
 8012b60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012b62:	89fb      	ldrh	r3, [r7, #14]
 8012b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b68:	d101      	bne.n	8012b6e <dec_lock+0x2e>
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012b6e:	89fb      	ldrh	r3, [r7, #14]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <dec_lock+0x3a>
 8012b74:	89fb      	ldrh	r3, [r7, #14]
 8012b76:	3b01      	subs	r3, #1
 8012b78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8012bb4 <dec_lock+0x74>)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	011b      	lsls	r3, r3, #4
 8012b80:	4413      	add	r3, r2
 8012b82:	330c      	adds	r3, #12
 8012b84:	89fa      	ldrh	r2, [r7, #14]
 8012b86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012b88:	89fb      	ldrh	r3, [r7, #14]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d105      	bne.n	8012b9a <dec_lock+0x5a>
 8012b8e:	4a09      	ldr	r2, [pc, #36]	@ (8012bb4 <dec_lock+0x74>)
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	011b      	lsls	r3, r3, #4
 8012b94:	4413      	add	r3, r2
 8012b96:	2200      	movs	r2, #0
 8012b98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	737b      	strb	r3, [r7, #13]
 8012b9e:	e001      	b.n	8012ba4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012ba0:	2302      	movs	r3, #2
 8012ba2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012ba4:	7b7b      	ldrb	r3, [r7, #13]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	20001064 	.word	0x20001064

08012bb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	60fb      	str	r3, [r7, #12]
 8012bc4:	e010      	b.n	8012be8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8012bfc <clear_lock+0x44>)
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	011b      	lsls	r3, r3, #4
 8012bcc:	4413      	add	r3, r2
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d105      	bne.n	8012be2 <clear_lock+0x2a>
 8012bd6:	4a09      	ldr	r2, [pc, #36]	@ (8012bfc <clear_lock+0x44>)
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	011b      	lsls	r3, r3, #4
 8012bdc:	4413      	add	r3, r2
 8012bde:	2200      	movs	r2, #0
 8012be0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3301      	adds	r3, #1
 8012be6:	60fb      	str	r3, [r7, #12]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d9eb      	bls.n	8012bc6 <clear_lock+0xe>
	}
}
 8012bee:	bf00      	nop
 8012bf0:	bf00      	nop
 8012bf2:	3714      	adds	r7, #20
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr
 8012bfc:	20001064 	.word	0x20001064

08012c00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b086      	sub	sp, #24
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	78db      	ldrb	r3, [r3, #3]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d034      	beq.n	8012c7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	7858      	ldrb	r0, [r3, #1]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012c24:	2301      	movs	r3, #1
 8012c26:	697a      	ldr	r2, [r7, #20]
 8012c28:	f7ff fd40 	bl	80126ac <disk_write>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d002      	beq.n	8012c38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012c32:	2301      	movs	r3, #1
 8012c34:	73fb      	strb	r3, [r7, #15]
 8012c36:	e022      	b.n	8012c7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c42:	697a      	ldr	r2, [r7, #20]
 8012c44:	1ad2      	subs	r2, r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	69db      	ldr	r3, [r3, #28]
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d217      	bcs.n	8012c7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	789b      	ldrb	r3, [r3, #2]
 8012c52:	613b      	str	r3, [r7, #16]
 8012c54:	e010      	b.n	8012c78 <sync_window+0x78>
					wsect += fs->fsize;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	69db      	ldr	r3, [r3, #28]
 8012c5a:	697a      	ldr	r2, [r7, #20]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7858      	ldrb	r0, [r3, #1]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	697a      	ldr	r2, [r7, #20]
 8012c6e:	f7ff fd1d 	bl	80126ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	3b01      	subs	r3, #1
 8012c76:	613b      	str	r3, [r7, #16]
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	2b01      	cmp	r3, #1
 8012c7c:	d8eb      	bhi.n	8012c56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3718      	adds	r7, #24
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b084      	sub	sp, #16
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012c92:	2300      	movs	r3, #0
 8012c94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c9a:	683a      	ldr	r2, [r7, #0]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d01b      	beq.n	8012cd8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7ff ffad 	bl	8012c00 <sync_window>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012caa:	7bfb      	ldrb	r3, [r7, #15]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d113      	bne.n	8012cd8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	7858      	ldrb	r0, [r3, #1]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012cba:	2301      	movs	r3, #1
 8012cbc:	683a      	ldr	r2, [r7, #0]
 8012cbe:	f7ff fcd5 	bl	801266c <disk_read>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d004      	beq.n	8012cd2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8012ccc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012cce:	2301      	movs	r3, #1
 8012cd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	683a      	ldr	r2, [r7, #0]
 8012cd6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
	...

08012ce4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f7ff ff87 	bl	8012c00 <sync_window>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012cf6:	7bfb      	ldrb	r3, [r7, #15]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d158      	bne.n	8012dae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	2b03      	cmp	r3, #3
 8012d02:	d148      	bne.n	8012d96 <sync_fs+0xb2>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	791b      	ldrb	r3, [r3, #4]
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d144      	bne.n	8012d96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	3334      	adds	r3, #52	@ 0x34
 8012d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d14:	2100      	movs	r1, #0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7ff fda9 	bl	801286e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	3334      	adds	r3, #52	@ 0x34
 8012d20:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012d24:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7ff fd38 	bl	801279e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	3334      	adds	r3, #52	@ 0x34
 8012d32:	4921      	ldr	r1, [pc, #132]	@ (8012db8 <sync_fs+0xd4>)
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7ff fd4d 	bl	80127d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	3334      	adds	r3, #52	@ 0x34
 8012d3e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012d42:	491e      	ldr	r1, [pc, #120]	@ (8012dbc <sync_fs+0xd8>)
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff fd45 	bl	80127d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	3334      	adds	r3, #52	@ 0x34
 8012d4e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	695b      	ldr	r3, [r3, #20]
 8012d56:	4619      	mov	r1, r3
 8012d58:	4610      	mov	r0, r2
 8012d5a:	f7ff fd3b 	bl	80127d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	3334      	adds	r3, #52	@ 0x34
 8012d62:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	691b      	ldr	r3, [r3, #16]
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	4610      	mov	r0, r2
 8012d6e:	f7ff fd31 	bl	80127d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6a1b      	ldr	r3, [r3, #32]
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	7858      	ldrb	r0, [r3, #1]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	f7ff fc8e 	bl	80126ac <disk_write>
			fs->fsi_flag = 0;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	785b      	ldrb	r3, [r3, #1]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7ff fca4 	bl	80126ec <disk_ioctl>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d001      	beq.n	8012dae <sync_fs+0xca>
 8012daa:	2301      	movs	r3, #1
 8012dac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	41615252 	.word	0x41615252
 8012dbc:	61417272 	.word	0x61417272

08012dc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b083      	sub	sp, #12
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	3b02      	subs	r3, #2
 8012dce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	699b      	ldr	r3, [r3, #24]
 8012dd4:	3b02      	subs	r3, #2
 8012dd6:	683a      	ldr	r2, [r7, #0]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d301      	bcc.n	8012de0 <clust2sect+0x20>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	e008      	b.n	8012df2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	895b      	ldrh	r3, [r3, #10]
 8012de4:	461a      	mov	r2, r3
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	fb03 f202 	mul.w	r2, r3, r2
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df0:	4413      	add	r3, r2
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b086      	sub	sp, #24
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
 8012e06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d904      	bls.n	8012e1e <get_fat+0x20>
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	699b      	ldr	r3, [r3, #24]
 8012e18:	683a      	ldr	r2, [r7, #0]
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d302      	bcc.n	8012e24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012e1e:	2301      	movs	r3, #1
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	e08e      	b.n	8012f42 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012e24:	f04f 33ff 	mov.w	r3, #4294967295
 8012e28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	2b03      	cmp	r3, #3
 8012e30:	d061      	beq.n	8012ef6 <get_fat+0xf8>
 8012e32:	2b03      	cmp	r3, #3
 8012e34:	dc7b      	bgt.n	8012f2e <get_fat+0x130>
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d002      	beq.n	8012e40 <get_fat+0x42>
 8012e3a:	2b02      	cmp	r3, #2
 8012e3c:	d041      	beq.n	8012ec2 <get_fat+0xc4>
 8012e3e:	e076      	b.n	8012f2e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	60fb      	str	r3, [r7, #12]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	085b      	lsrs	r3, r3, #1
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	4413      	add	r3, r2
 8012e4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	0a5b      	lsrs	r3, r3, #9
 8012e56:	4413      	add	r3, r2
 8012e58:	4619      	mov	r1, r3
 8012e5a:	6938      	ldr	r0, [r7, #16]
 8012e5c:	f7ff ff14 	bl	8012c88 <move_window>
 8012e60:	4603      	mov	r3, r0
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d166      	bne.n	8012f34 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	1c5a      	adds	r2, r3, #1
 8012e6a:	60fa      	str	r2, [r7, #12]
 8012e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e70:	693a      	ldr	r2, [r7, #16]
 8012e72:	4413      	add	r3, r2
 8012e74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012e78:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	0a5b      	lsrs	r3, r3, #9
 8012e82:	4413      	add	r3, r2
 8012e84:	4619      	mov	r1, r3
 8012e86:	6938      	ldr	r0, [r7, #16]
 8012e88:	f7ff fefe 	bl	8012c88 <move_window>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d152      	bne.n	8012f38 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e98:	693a      	ldr	r2, [r7, #16]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012ea0:	021b      	lsls	r3, r3, #8
 8012ea2:	68ba      	ldr	r2, [r7, #8]
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	f003 0301 	and.w	r3, r3, #1
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d002      	beq.n	8012eb8 <get_fat+0xba>
 8012eb2:	68bb      	ldr	r3, [r7, #8]
 8012eb4:	091b      	lsrs	r3, r3, #4
 8012eb6:	e002      	b.n	8012ebe <get_fat+0xc0>
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ebe:	617b      	str	r3, [r7, #20]
			break;
 8012ec0:	e03f      	b.n	8012f42 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	0a1b      	lsrs	r3, r3, #8
 8012eca:	4413      	add	r3, r2
 8012ecc:	4619      	mov	r1, r3
 8012ece:	6938      	ldr	r0, [r7, #16]
 8012ed0:	f7ff feda 	bl	8012c88 <move_window>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d130      	bne.n	8012f3c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	005b      	lsls	r3, r3, #1
 8012ee4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012ee8:	4413      	add	r3, r2
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff fc1c 	bl	8012728 <ld_word>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	617b      	str	r3, [r7, #20]
			break;
 8012ef4:	e025      	b.n	8012f42 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	09db      	lsrs	r3, r3, #7
 8012efe:	4413      	add	r3, r2
 8012f00:	4619      	mov	r1, r3
 8012f02:	6938      	ldr	r0, [r7, #16]
 8012f04:	f7ff fec0 	bl	8012c88 <move_window>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d118      	bne.n	8012f40 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012f0e:	693b      	ldr	r3, [r7, #16]
 8012f10:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012f1c:	4413      	add	r3, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff fc1a 	bl	8012758 <ld_dword>
 8012f24:	4603      	mov	r3, r0
 8012f26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012f2a:	617b      	str	r3, [r7, #20]
			break;
 8012f2c:	e009      	b.n	8012f42 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012f2e:	2301      	movs	r3, #1
 8012f30:	617b      	str	r3, [r7, #20]
 8012f32:	e006      	b.n	8012f42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f34:	bf00      	nop
 8012f36:	e004      	b.n	8012f42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012f38:	bf00      	nop
 8012f3a:	e002      	b.n	8012f42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012f3c:	bf00      	nop
 8012f3e:	e000      	b.n	8012f42 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012f40:	bf00      	nop
		}
	}

	return val;
 8012f42:	697b      	ldr	r3, [r7, #20]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3718      	adds	r7, #24
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012f4c:	b590      	push	{r4, r7, lr}
 8012f4e:	b089      	sub	sp, #36	@ 0x24
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012f58:	2302      	movs	r3, #2
 8012f5a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	f240 80d9 	bls.w	8013116 <put_fat+0x1ca>
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	699b      	ldr	r3, [r3, #24]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	f080 80d3 	bcs.w	8013116 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	2b03      	cmp	r3, #3
 8012f76:	f000 8096 	beq.w	80130a6 <put_fat+0x15a>
 8012f7a:	2b03      	cmp	r3, #3
 8012f7c:	f300 80cb 	bgt.w	8013116 <put_fat+0x1ca>
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d002      	beq.n	8012f8a <put_fat+0x3e>
 8012f84:	2b02      	cmp	r3, #2
 8012f86:	d06e      	beq.n	8013066 <put_fat+0x11a>
 8012f88:	e0c5      	b.n	8013116 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	61bb      	str	r3, [r7, #24]
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	085b      	lsrs	r3, r3, #1
 8012f92:	69ba      	ldr	r2, [r7, #24]
 8012f94:	4413      	add	r3, r2
 8012f96:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	0a5b      	lsrs	r3, r3, #9
 8012fa0:	4413      	add	r3, r2
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f7ff fe6f 	bl	8012c88 <move_window>
 8012faa:	4603      	mov	r3, r0
 8012fac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012fae:	7ffb      	ldrb	r3, [r7, #31]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	f040 80a9 	bne.w	8013108 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	1c59      	adds	r1, r3, #1
 8012fc0:	61b9      	str	r1, [r7, #24]
 8012fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fc6:	4413      	add	r3, r2
 8012fc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	f003 0301 	and.w	r3, r3, #1
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d00d      	beq.n	8012ff0 <put_fat+0xa4>
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	b25b      	sxtb	r3, r3
 8012fda:	f003 030f 	and.w	r3, r3, #15
 8012fde:	b25a      	sxtb	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	011b      	lsls	r3, r3, #4
 8012fe6:	b25b      	sxtb	r3, r3
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	b25b      	sxtb	r3, r3
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	e001      	b.n	8012ff4 <put_fat+0xa8>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	b2db      	uxtb	r3, r3
 8012ff4:	697a      	ldr	r2, [r7, #20]
 8012ff6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	0a5b      	lsrs	r3, r3, #9
 8013006:	4413      	add	r3, r2
 8013008:	4619      	mov	r1, r3
 801300a:	68f8      	ldr	r0, [r7, #12]
 801300c:	f7ff fe3c 	bl	8012c88 <move_window>
 8013010:	4603      	mov	r3, r0
 8013012:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013014:	7ffb      	ldrb	r3, [r7, #31]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d178      	bne.n	801310c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013026:	4413      	add	r3, r2
 8013028:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	f003 0301 	and.w	r3, r3, #1
 8013030:	2b00      	cmp	r3, #0
 8013032:	d003      	beq.n	801303c <put_fat+0xf0>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	091b      	lsrs	r3, r3, #4
 8013038:	b2db      	uxtb	r3, r3
 801303a:	e00e      	b.n	801305a <put_fat+0x10e>
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	b25b      	sxtb	r3, r3
 8013042:	f023 030f 	bic.w	r3, r3, #15
 8013046:	b25a      	sxtb	r2, r3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	0a1b      	lsrs	r3, r3, #8
 801304c:	b25b      	sxtb	r3, r3
 801304e:	f003 030f 	and.w	r3, r3, #15
 8013052:	b25b      	sxtb	r3, r3
 8013054:	4313      	orrs	r3, r2
 8013056:	b25b      	sxtb	r3, r3
 8013058:	b2db      	uxtb	r3, r3
 801305a:	697a      	ldr	r2, [r7, #20]
 801305c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2201      	movs	r2, #1
 8013062:	70da      	strb	r2, [r3, #3]
			break;
 8013064:	e057      	b.n	8013116 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	0a1b      	lsrs	r3, r3, #8
 801306e:	4413      	add	r3, r2
 8013070:	4619      	mov	r1, r3
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f7ff fe08 	bl	8012c88 <move_window>
 8013078:	4603      	mov	r3, r0
 801307a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801307c:	7ffb      	ldrb	r3, [r7, #31]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d146      	bne.n	8013110 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	005b      	lsls	r3, r3, #1
 801308c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013090:	4413      	add	r3, r2
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	b292      	uxth	r2, r2
 8013096:	4611      	mov	r1, r2
 8013098:	4618      	mov	r0, r3
 801309a:	f7ff fb80 	bl	801279e <st_word>
			fs->wflag = 1;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2201      	movs	r2, #1
 80130a2:	70da      	strb	r2, [r3, #3]
			break;
 80130a4:	e037      	b.n	8013116 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	09db      	lsrs	r3, r3, #7
 80130ae:	4413      	add	r3, r2
 80130b0:	4619      	mov	r1, r3
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f7ff fde8 	bl	8012c88 <move_window>
 80130b8:	4603      	mov	r3, r0
 80130ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80130bc:	7ffb      	ldrb	r3, [r7, #31]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d128      	bne.n	8013114 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80130d6:	4413      	add	r3, r2
 80130d8:	4618      	mov	r0, r3
 80130da:	f7ff fb3d 	bl	8012758 <ld_dword>
 80130de:	4603      	mov	r3, r0
 80130e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80130e4:	4323      	orrs	r3, r4
 80130e6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80130f6:	4413      	add	r3, r2
 80130f8:	6879      	ldr	r1, [r7, #4]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7ff fb6a 	bl	80127d4 <st_dword>
			fs->wflag = 1;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2201      	movs	r2, #1
 8013104:	70da      	strb	r2, [r3, #3]
			break;
 8013106:	e006      	b.n	8013116 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013108:	bf00      	nop
 801310a:	e004      	b.n	8013116 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801310c:	bf00      	nop
 801310e:	e002      	b.n	8013116 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013110:	bf00      	nop
 8013112:	e000      	b.n	8013116 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013114:	bf00      	nop
		}
	}
	return res;
 8013116:	7ffb      	ldrb	r3, [r7, #31]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3724      	adds	r7, #36	@ 0x24
 801311c:	46bd      	mov	sp, r7
 801311e:	bd90      	pop	{r4, r7, pc}

08013120 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b088      	sub	sp, #32
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801312c:	2300      	movs	r3, #0
 801312e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	2b01      	cmp	r3, #1
 801313a:	d904      	bls.n	8013146 <remove_chain+0x26>
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	699b      	ldr	r3, [r3, #24]
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	429a      	cmp	r2, r3
 8013144:	d301      	bcc.n	801314a <remove_chain+0x2a>
 8013146:	2302      	movs	r3, #2
 8013148:	e04b      	b.n	80131e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d00c      	beq.n	801316a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013150:	f04f 32ff 	mov.w	r2, #4294967295
 8013154:	6879      	ldr	r1, [r7, #4]
 8013156:	69b8      	ldr	r0, [r7, #24]
 8013158:	f7ff fef8 	bl	8012f4c <put_fat>
 801315c:	4603      	mov	r3, r0
 801315e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013160:	7ffb      	ldrb	r3, [r7, #31]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d001      	beq.n	801316a <remove_chain+0x4a>
 8013166:	7ffb      	ldrb	r3, [r7, #31]
 8013168:	e03b      	b.n	80131e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801316a:	68b9      	ldr	r1, [r7, #8]
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f7ff fe46 	bl	8012dfe <get_fat>
 8013172:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d031      	beq.n	80131de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d101      	bne.n	8013184 <remove_chain+0x64>
 8013180:	2302      	movs	r3, #2
 8013182:	e02e      	b.n	80131e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318a:	d101      	bne.n	8013190 <remove_chain+0x70>
 801318c:	2301      	movs	r3, #1
 801318e:	e028      	b.n	80131e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013190:	2200      	movs	r2, #0
 8013192:	68b9      	ldr	r1, [r7, #8]
 8013194:	69b8      	ldr	r0, [r7, #24]
 8013196:	f7ff fed9 	bl	8012f4c <put_fat>
 801319a:	4603      	mov	r3, r0
 801319c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801319e:	7ffb      	ldrb	r3, [r7, #31]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d001      	beq.n	80131a8 <remove_chain+0x88>
 80131a4:	7ffb      	ldrb	r3, [r7, #31]
 80131a6:	e01c      	b.n	80131e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80131a8:	69bb      	ldr	r3, [r7, #24]
 80131aa:	695a      	ldr	r2, [r3, #20]
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	3b02      	subs	r3, #2
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d20b      	bcs.n	80131ce <remove_chain+0xae>
			fs->free_clst++;
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	695b      	ldr	r3, [r3, #20]
 80131ba:	1c5a      	adds	r2, r3, #1
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80131c0:	69bb      	ldr	r3, [r7, #24]
 80131c2:	791b      	ldrb	r3, [r3, #4]
 80131c4:	f043 0301 	orr.w	r3, r3, #1
 80131c8:	b2da      	uxtb	r2, r3
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	68ba      	ldr	r2, [r7, #8]
 80131d8:	429a      	cmp	r2, r3
 80131da:	d3c6      	bcc.n	801316a <remove_chain+0x4a>
 80131dc:	e000      	b.n	80131e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80131de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80131e0:	2300      	movs	r3, #0
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3720      	adds	r7, #32
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80131ea:	b580      	push	{r7, lr}
 80131ec:	b088      	sub	sp, #32
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	6078      	str	r0, [r7, #4]
 80131f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10d      	bne.n	801321c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	691b      	ldr	r3, [r3, #16]
 8013204:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d004      	beq.n	8013216 <create_chain+0x2c>
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	699b      	ldr	r3, [r3, #24]
 8013210:	69ba      	ldr	r2, [r7, #24]
 8013212:	429a      	cmp	r2, r3
 8013214:	d31b      	bcc.n	801324e <create_chain+0x64>
 8013216:	2301      	movs	r3, #1
 8013218:	61bb      	str	r3, [r7, #24]
 801321a:	e018      	b.n	801324e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801321c:	6839      	ldr	r1, [r7, #0]
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f7ff fded 	bl	8012dfe <get_fat>
 8013224:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d801      	bhi.n	8013230 <create_chain+0x46>
 801322c:	2301      	movs	r3, #1
 801322e:	e070      	b.n	8013312 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013236:	d101      	bne.n	801323c <create_chain+0x52>
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	e06a      	b.n	8013312 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	699b      	ldr	r3, [r3, #24]
 8013240:	68fa      	ldr	r2, [r7, #12]
 8013242:	429a      	cmp	r2, r3
 8013244:	d201      	bcs.n	801324a <create_chain+0x60>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	e063      	b.n	8013312 <create_chain+0x128>
		scl = clst;
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013252:	69fb      	ldr	r3, [r7, #28]
 8013254:	3301      	adds	r3, #1
 8013256:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	699b      	ldr	r3, [r3, #24]
 801325c:	69fa      	ldr	r2, [r7, #28]
 801325e:	429a      	cmp	r2, r3
 8013260:	d307      	bcc.n	8013272 <create_chain+0x88>
				ncl = 2;
 8013262:	2302      	movs	r3, #2
 8013264:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013266:	69fa      	ldr	r2, [r7, #28]
 8013268:	69bb      	ldr	r3, [r7, #24]
 801326a:	429a      	cmp	r2, r3
 801326c:	d901      	bls.n	8013272 <create_chain+0x88>
 801326e:	2300      	movs	r3, #0
 8013270:	e04f      	b.n	8013312 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013272:	69f9      	ldr	r1, [r7, #28]
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7ff fdc2 	bl	8012dfe <get_fat>
 801327a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d00e      	beq.n	80132a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d003      	beq.n	8013290 <create_chain+0xa6>
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801328e:	d101      	bne.n	8013294 <create_chain+0xaa>
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	e03e      	b.n	8013312 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013294:	69fa      	ldr	r2, [r7, #28]
 8013296:	69bb      	ldr	r3, [r7, #24]
 8013298:	429a      	cmp	r2, r3
 801329a:	d1da      	bne.n	8013252 <create_chain+0x68>
 801329c:	2300      	movs	r3, #0
 801329e:	e038      	b.n	8013312 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80132a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80132a2:	f04f 32ff 	mov.w	r2, #4294967295
 80132a6:	69f9      	ldr	r1, [r7, #28]
 80132a8:	6938      	ldr	r0, [r7, #16]
 80132aa:	f7ff fe4f 	bl	8012f4c <put_fat>
 80132ae:	4603      	mov	r3, r0
 80132b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80132b2:	7dfb      	ldrb	r3, [r7, #23]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d109      	bne.n	80132cc <create_chain+0xe2>
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d006      	beq.n	80132cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80132be:	69fa      	ldr	r2, [r7, #28]
 80132c0:	6839      	ldr	r1, [r7, #0]
 80132c2:	6938      	ldr	r0, [r7, #16]
 80132c4:	f7ff fe42 	bl	8012f4c <put_fat>
 80132c8:	4603      	mov	r3, r0
 80132ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d116      	bne.n	8013300 <create_chain+0x116>
		fs->last_clst = ncl;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	69fa      	ldr	r2, [r7, #28]
 80132d6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	695a      	ldr	r2, [r3, #20]
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	699b      	ldr	r3, [r3, #24]
 80132e0:	3b02      	subs	r3, #2
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d804      	bhi.n	80132f0 <create_chain+0x106>
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	695b      	ldr	r3, [r3, #20]
 80132ea:	1e5a      	subs	r2, r3, #1
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	791b      	ldrb	r3, [r3, #4]
 80132f4:	f043 0301 	orr.w	r3, r3, #1
 80132f8:	b2da      	uxtb	r2, r3
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	711a      	strb	r2, [r3, #4]
 80132fe:	e007      	b.n	8013310 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013300:	7dfb      	ldrb	r3, [r7, #23]
 8013302:	2b01      	cmp	r3, #1
 8013304:	d102      	bne.n	801330c <create_chain+0x122>
 8013306:	f04f 33ff 	mov.w	r3, #4294967295
 801330a:	e000      	b.n	801330e <create_chain+0x124>
 801330c:	2301      	movs	r3, #1
 801330e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013310:	69fb      	ldr	r3, [r7, #28]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3720      	adds	r7, #32
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}

0801331a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801331a:	b480      	push	{r7}
 801331c:	b087      	sub	sp, #28
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801332e:	3304      	adds	r3, #4
 8013330:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	0a5b      	lsrs	r3, r3, #9
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	8952      	ldrh	r2, [r2, #10]
 801333a:	fbb3 f3f2 	udiv	r3, r3, r2
 801333e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	1d1a      	adds	r2, r3, #4
 8013344:	613a      	str	r2, [r7, #16]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <clmt_clust+0x3a>
 8013350:	2300      	movs	r3, #0
 8013352:	e010      	b.n	8013376 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013354:	697a      	ldr	r2, [r7, #20]
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	429a      	cmp	r2, r3
 801335a:	d307      	bcc.n	801336c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801335c:	697a      	ldr	r2, [r7, #20]
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	617b      	str	r3, [r7, #20]
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	3304      	adds	r3, #4
 8013368:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801336a:	e7e9      	b.n	8013340 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801336c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	4413      	add	r3, r2
}
 8013376:	4618      	mov	r0, r3
 8013378:	371c      	adds	r7, #28
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013382:	b580      	push	{r7, lr}
 8013384:	b086      	sub	sp, #24
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
 801338a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013398:	d204      	bcs.n	80133a4 <dir_sdi+0x22>
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	f003 031f 	and.w	r3, r3, #31
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d001      	beq.n	80133a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80133a4:	2302      	movs	r3, #2
 80133a6:	e063      	b.n	8013470 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	689b      	ldr	r3, [r3, #8]
 80133b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d106      	bne.n	80133c8 <dir_sdi+0x46>
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	2b02      	cmp	r3, #2
 80133c0:	d902      	bls.n	80133c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d10c      	bne.n	80133e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	095b      	lsrs	r3, r3, #5
 80133d2:	693a      	ldr	r2, [r7, #16]
 80133d4:	8912      	ldrh	r2, [r2, #8]
 80133d6:	4293      	cmp	r3, r2
 80133d8:	d301      	bcc.n	80133de <dir_sdi+0x5c>
 80133da:	2302      	movs	r3, #2
 80133dc:	e048      	b.n	8013470 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	61da      	str	r2, [r3, #28]
 80133e6:	e029      	b.n	801343c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	895b      	ldrh	r3, [r3, #10]
 80133ec:	025b      	lsls	r3, r3, #9
 80133ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80133f0:	e019      	b.n	8013426 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6979      	ldr	r1, [r7, #20]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7ff fd01 	bl	8012dfe <get_fat>
 80133fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013404:	d101      	bne.n	801340a <dir_sdi+0x88>
 8013406:	2301      	movs	r3, #1
 8013408:	e032      	b.n	8013470 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	2b01      	cmp	r3, #1
 801340e:	d904      	bls.n	801341a <dir_sdi+0x98>
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	699b      	ldr	r3, [r3, #24]
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	429a      	cmp	r2, r3
 8013418:	d301      	bcc.n	801341e <dir_sdi+0x9c>
 801341a:	2302      	movs	r3, #2
 801341c:	e028      	b.n	8013470 <dir_sdi+0xee>
			ofs -= csz;
 801341e:	683a      	ldr	r2, [r7, #0]
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013426:	683a      	ldr	r2, [r7, #0]
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	429a      	cmp	r2, r3
 801342c:	d2e1      	bcs.n	80133f2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801342e:	6979      	ldr	r1, [r7, #20]
 8013430:	6938      	ldr	r0, [r7, #16]
 8013432:	f7ff fcc5 	bl	8012dc0 <clust2sect>
 8013436:	4602      	mov	r2, r0
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	697a      	ldr	r2, [r7, #20]
 8013440:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	69db      	ldr	r3, [r3, #28]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d101      	bne.n	801344e <dir_sdi+0xcc>
 801344a:	2302      	movs	r3, #2
 801344c:	e010      	b.n	8013470 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	69da      	ldr	r2, [r3, #28]
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	0a5b      	lsrs	r3, r3, #9
 8013456:	441a      	add	r2, r3
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013468:	441a      	add	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801346e:	2300      	movs	r3, #0
}
 8013470:	4618      	mov	r0, r3
 8013472:	3718      	adds	r7, #24
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b086      	sub	sp, #24
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	695b      	ldr	r3, [r3, #20]
 801348c:	3320      	adds	r3, #32
 801348e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	69db      	ldr	r3, [r3, #28]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d003      	beq.n	80134a0 <dir_next+0x28>
 8013498:	68bb      	ldr	r3, [r7, #8]
 801349a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801349e:	d301      	bcc.n	80134a4 <dir_next+0x2c>
 80134a0:	2304      	movs	r3, #4
 80134a2:	e0aa      	b.n	80135fa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	f040 8098 	bne.w	80135e0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	69db      	ldr	r3, [r3, #28]
 80134b4:	1c5a      	adds	r2, r3, #1
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	699b      	ldr	r3, [r3, #24]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10b      	bne.n	80134da <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	095b      	lsrs	r3, r3, #5
 80134c6:	68fa      	ldr	r2, [r7, #12]
 80134c8:	8912      	ldrh	r2, [r2, #8]
 80134ca:	4293      	cmp	r3, r2
 80134cc:	f0c0 8088 	bcc.w	80135e0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2200      	movs	r2, #0
 80134d4:	61da      	str	r2, [r3, #28]
 80134d6:	2304      	movs	r3, #4
 80134d8:	e08f      	b.n	80135fa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	0a5b      	lsrs	r3, r3, #9
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	8952      	ldrh	r2, [r2, #10]
 80134e2:	3a01      	subs	r2, #1
 80134e4:	4013      	ands	r3, r2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d17a      	bne.n	80135e0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	699b      	ldr	r3, [r3, #24]
 80134f0:	4619      	mov	r1, r3
 80134f2:	4610      	mov	r0, r2
 80134f4:	f7ff fc83 	bl	8012dfe <get_fat>
 80134f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	2b01      	cmp	r3, #1
 80134fe:	d801      	bhi.n	8013504 <dir_next+0x8c>
 8013500:	2302      	movs	r3, #2
 8013502:	e07a      	b.n	80135fa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	f1b3 3fff 	cmp.w	r3, #4294967295
 801350a:	d101      	bne.n	8013510 <dir_next+0x98>
 801350c:	2301      	movs	r3, #1
 801350e:	e074      	b.n	80135fa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	699b      	ldr	r3, [r3, #24]
 8013514:	697a      	ldr	r2, [r7, #20]
 8013516:	429a      	cmp	r2, r3
 8013518:	d358      	bcc.n	80135cc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d104      	bne.n	801352a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2200      	movs	r2, #0
 8013524:	61da      	str	r2, [r3, #28]
 8013526:	2304      	movs	r3, #4
 8013528:	e067      	b.n	80135fa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	699b      	ldr	r3, [r3, #24]
 8013530:	4619      	mov	r1, r3
 8013532:	4610      	mov	r0, r2
 8013534:	f7ff fe59 	bl	80131ea <create_chain>
 8013538:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d101      	bne.n	8013544 <dir_next+0xcc>
 8013540:	2307      	movs	r3, #7
 8013542:	e05a      	b.n	80135fa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	2b01      	cmp	r3, #1
 8013548:	d101      	bne.n	801354e <dir_next+0xd6>
 801354a:	2302      	movs	r3, #2
 801354c:	e055      	b.n	80135fa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013554:	d101      	bne.n	801355a <dir_next+0xe2>
 8013556:	2301      	movs	r3, #1
 8013558:	e04f      	b.n	80135fa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f7ff fb50 	bl	8012c00 <sync_window>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d001      	beq.n	801356a <dir_next+0xf2>
 8013566:	2301      	movs	r3, #1
 8013568:	e047      	b.n	80135fa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3334      	adds	r3, #52	@ 0x34
 801356e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013572:	2100      	movs	r1, #0
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff f97a 	bl	801286e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801357a:	2300      	movs	r3, #0
 801357c:	613b      	str	r3, [r7, #16]
 801357e:	6979      	ldr	r1, [r7, #20]
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f7ff fc1d 	bl	8012dc0 <clust2sect>
 8013586:	4602      	mov	r2, r0
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	631a      	str	r2, [r3, #48]	@ 0x30
 801358c:	e012      	b.n	80135b4 <dir_next+0x13c>
						fs->wflag = 1;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2201      	movs	r2, #1
 8013592:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013594:	68f8      	ldr	r0, [r7, #12]
 8013596:	f7ff fb33 	bl	8012c00 <sync_window>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <dir_next+0x12c>
 80135a0:	2301      	movs	r3, #1
 80135a2:	e02a      	b.n	80135fa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	3301      	adds	r3, #1
 80135a8:	613b      	str	r3, [r7, #16]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135ae:	1c5a      	adds	r2, r3, #1
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	895b      	ldrh	r3, [r3, #10]
 80135b8:	461a      	mov	r2, r3
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	4293      	cmp	r3, r2
 80135be:	d3e6      	bcc.n	801358e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	1ad2      	subs	r2, r2, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	697a      	ldr	r2, [r7, #20]
 80135d0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80135d2:	6979      	ldr	r1, [r7, #20]
 80135d4:	68f8      	ldr	r0, [r7, #12]
 80135d6:	f7ff fbf3 	bl	8012dc0 <clust2sect>
 80135da:	4602      	mov	r2, r0
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	68ba      	ldr	r2, [r7, #8]
 80135e4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135f2:	441a      	add	r2, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80135f8:	2300      	movs	r3, #0
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3718      	adds	r7, #24
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}

08013602 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013602:	b580      	push	{r7, lr}
 8013604:	b086      	sub	sp, #24
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
 801360a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013612:	2100      	movs	r1, #0
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ff feb4 	bl	8013382 <dir_sdi>
 801361a:	4603      	mov	r3, r0
 801361c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801361e:	7dfb      	ldrb	r3, [r7, #23]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d12b      	bne.n	801367c <dir_alloc+0x7a>
		n = 0;
 8013624:	2300      	movs	r3, #0
 8013626:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	69db      	ldr	r3, [r3, #28]
 801362c:	4619      	mov	r1, r3
 801362e:	68f8      	ldr	r0, [r7, #12]
 8013630:	f7ff fb2a 	bl	8012c88 <move_window>
 8013634:	4603      	mov	r3, r0
 8013636:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013638:	7dfb      	ldrb	r3, [r7, #23]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d11d      	bne.n	801367a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6a1b      	ldr	r3, [r3, #32]
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	2be5      	cmp	r3, #229	@ 0xe5
 8013646:	d004      	beq.n	8013652 <dir_alloc+0x50>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6a1b      	ldr	r3, [r3, #32]
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d107      	bne.n	8013662 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	3301      	adds	r3, #1
 8013656:	613b      	str	r3, [r7, #16]
 8013658:	693a      	ldr	r2, [r7, #16]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	429a      	cmp	r2, r3
 801365e:	d102      	bne.n	8013666 <dir_alloc+0x64>
 8013660:	e00c      	b.n	801367c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013662:	2300      	movs	r3, #0
 8013664:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013666:	2101      	movs	r1, #1
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7ff ff05 	bl	8013478 <dir_next>
 801366e:	4603      	mov	r3, r0
 8013670:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013672:	7dfb      	ldrb	r3, [r7, #23]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d0d7      	beq.n	8013628 <dir_alloc+0x26>
 8013678:	e000      	b.n	801367c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801367a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801367c:	7dfb      	ldrb	r3, [r7, #23]
 801367e:	2b04      	cmp	r3, #4
 8013680:	d101      	bne.n	8013686 <dir_alloc+0x84>
 8013682:	2307      	movs	r3, #7
 8013684:	75fb      	strb	r3, [r7, #23]
	return res;
 8013686:	7dfb      	ldrb	r3, [r7, #23]
}
 8013688:	4618      	mov	r0, r3
 801368a:	3718      	adds	r7, #24
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	331a      	adds	r3, #26
 801369e:	4618      	mov	r0, r3
 80136a0:	f7ff f842 	bl	8012728 <ld_word>
 80136a4:	4603      	mov	r3, r0
 80136a6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	2b03      	cmp	r3, #3
 80136ae:	d109      	bne.n	80136c4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	3314      	adds	r3, #20
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7ff f837 	bl	8012728 <ld_word>
 80136ba:	4603      	mov	r3, r0
 80136bc:	041b      	lsls	r3, r3, #16
 80136be:	68fa      	ldr	r2, [r7, #12]
 80136c0:	4313      	orrs	r3, r2
 80136c2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80136c4:	68fb      	ldr	r3, [r7, #12]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}

080136ce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80136ce:	b580      	push	{r7, lr}
 80136d0:	b084      	sub	sp, #16
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	60f8      	str	r0, [r7, #12]
 80136d6:	60b9      	str	r1, [r7, #8]
 80136d8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	331a      	adds	r3, #26
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	b292      	uxth	r2, r2
 80136e2:	4611      	mov	r1, r2
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ff f85a 	bl	801279e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	781b      	ldrb	r3, [r3, #0]
 80136ee:	2b03      	cmp	r3, #3
 80136f0:	d109      	bne.n	8013706 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	f103 0214 	add.w	r2, r3, #20
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	0c1b      	lsrs	r3, r3, #16
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	4619      	mov	r1, r3
 8013700:	4610      	mov	r0, r2
 8013702:	f7ff f84c 	bl	801279e <st_word>
	}
}
 8013706:	bf00      	nop
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
	...

08013710 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013710:	b590      	push	{r4, r7, lr}
 8013712:	b087      	sub	sp, #28
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	331a      	adds	r3, #26
 801371e:	4618      	mov	r0, r3
 8013720:	f7ff f802 	bl	8012728 <ld_word>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d001      	beq.n	801372e <cmp_lfn+0x1e>
 801372a:	2300      	movs	r3, #0
 801372c:	e059      	b.n	80137e2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013736:	1e5a      	subs	r2, r3, #1
 8013738:	4613      	mov	r3, r2
 801373a:	005b      	lsls	r3, r3, #1
 801373c:	4413      	add	r3, r2
 801373e:	009b      	lsls	r3, r3, #2
 8013740:	4413      	add	r3, r2
 8013742:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013744:	2301      	movs	r3, #1
 8013746:	81fb      	strh	r3, [r7, #14]
 8013748:	2300      	movs	r3, #0
 801374a:	613b      	str	r3, [r7, #16]
 801374c:	e033      	b.n	80137b6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801374e:	4a27      	ldr	r2, [pc, #156]	@ (80137ec <cmp_lfn+0xdc>)
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	4413      	add	r3, r2
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	461a      	mov	r2, r3
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	4413      	add	r3, r2
 801375c:	4618      	mov	r0, r3
 801375e:	f7fe ffe3 	bl	8012728 <ld_word>
 8013762:	4603      	mov	r3, r0
 8013764:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8013766:	89fb      	ldrh	r3, [r7, #14]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d01a      	beq.n	80137a2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	2bfe      	cmp	r3, #254	@ 0xfe
 8013770:	d812      	bhi.n	8013798 <cmp_lfn+0x88>
 8013772:	89bb      	ldrh	r3, [r7, #12]
 8013774:	4618      	mov	r0, r3
 8013776:	f001 ff9f 	bl	80156b8 <ff_wtoupper>
 801377a:	4603      	mov	r3, r0
 801377c:	461c      	mov	r4, r3
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	1c5a      	adds	r2, r3, #1
 8013782:	617a      	str	r2, [r7, #20]
 8013784:	005b      	lsls	r3, r3, #1
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	4413      	add	r3, r2
 801378a:	881b      	ldrh	r3, [r3, #0]
 801378c:	4618      	mov	r0, r3
 801378e:	f001 ff93 	bl	80156b8 <ff_wtoupper>
 8013792:	4603      	mov	r3, r0
 8013794:	429c      	cmp	r4, r3
 8013796:	d001      	beq.n	801379c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013798:	2300      	movs	r3, #0
 801379a:	e022      	b.n	80137e2 <cmp_lfn+0xd2>
			}
			wc = uc;
 801379c:	89bb      	ldrh	r3, [r7, #12]
 801379e:	81fb      	strh	r3, [r7, #14]
 80137a0:	e006      	b.n	80137b0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80137a2:	89bb      	ldrh	r3, [r7, #12]
 80137a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80137a8:	4293      	cmp	r3, r2
 80137aa:	d001      	beq.n	80137b0 <cmp_lfn+0xa0>
 80137ac:	2300      	movs	r3, #0
 80137ae:	e018      	b.n	80137e2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	3301      	adds	r3, #1
 80137b4:	613b      	str	r3, [r7, #16]
 80137b6:	693b      	ldr	r3, [r7, #16]
 80137b8:	2b0c      	cmp	r3, #12
 80137ba:	d9c8      	bls.n	801374e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00b      	beq.n	80137e0 <cmp_lfn+0xd0>
 80137c8:	89fb      	ldrh	r3, [r7, #14]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d008      	beq.n	80137e0 <cmp_lfn+0xd0>
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	005b      	lsls	r3, r3, #1
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	4413      	add	r3, r2
 80137d6:	881b      	ldrh	r3, [r3, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d001      	beq.n	80137e0 <cmp_lfn+0xd0>
 80137dc:	2300      	movs	r3, #0
 80137de:	e000      	b.n	80137e2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80137e0:	2301      	movs	r3, #1
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	371c      	adds	r7, #28
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd90      	pop	{r4, r7, pc}
 80137ea:	bf00      	nop
 80137ec:	080189fc 	.word	0x080189fc

080137f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b088      	sub	sp, #32
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	4611      	mov	r1, r2
 80137fc:	461a      	mov	r2, r3
 80137fe:	460b      	mov	r3, r1
 8013800:	71fb      	strb	r3, [r7, #7]
 8013802:	4613      	mov	r3, r2
 8013804:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	330d      	adds	r3, #13
 801380a:	79ba      	ldrb	r2, [r7, #6]
 801380c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	330b      	adds	r3, #11
 8013812:	220f      	movs	r2, #15
 8013814:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	330c      	adds	r3, #12
 801381a:	2200      	movs	r2, #0
 801381c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	331a      	adds	r3, #26
 8013822:	2100      	movs	r1, #0
 8013824:	4618      	mov	r0, r3
 8013826:	f7fe ffba 	bl	801279e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801382a:	79fb      	ldrb	r3, [r7, #7]
 801382c:	1e5a      	subs	r2, r3, #1
 801382e:	4613      	mov	r3, r2
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	4413      	add	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801383a:	2300      	movs	r3, #0
 801383c:	82fb      	strh	r3, [r7, #22]
 801383e:	2300      	movs	r3, #0
 8013840:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013842:	8afb      	ldrh	r3, [r7, #22]
 8013844:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013848:	4293      	cmp	r3, r2
 801384a:	d007      	beq.n	801385c <put_lfn+0x6c>
 801384c:	69fb      	ldr	r3, [r7, #28]
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	61fa      	str	r2, [r7, #28]
 8013852:	005b      	lsls	r3, r3, #1
 8013854:	68fa      	ldr	r2, [r7, #12]
 8013856:	4413      	add	r3, r2
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801385c:	4a17      	ldr	r2, [pc, #92]	@ (80138bc <put_lfn+0xcc>)
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	4413      	add	r3, r2
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	461a      	mov	r2, r3
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	4413      	add	r3, r2
 801386a:	8afa      	ldrh	r2, [r7, #22]
 801386c:	4611      	mov	r1, r2
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe ff95 	bl	801279e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013874:	8afb      	ldrh	r3, [r7, #22]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d102      	bne.n	8013880 <put_lfn+0x90>
 801387a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801387e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	3301      	adds	r3, #1
 8013884:	61bb      	str	r3, [r7, #24]
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	2b0c      	cmp	r3, #12
 801388a:	d9da      	bls.n	8013842 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801388c:	8afb      	ldrh	r3, [r7, #22]
 801388e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013892:	4293      	cmp	r3, r2
 8013894:	d006      	beq.n	80138a4 <put_lfn+0xb4>
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	005b      	lsls	r3, r3, #1
 801389a:	68fa      	ldr	r2, [r7, #12]
 801389c:	4413      	add	r3, r2
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d103      	bne.n	80138ac <put_lfn+0xbc>
 80138a4:	79fb      	ldrb	r3, [r7, #7]
 80138a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	79fa      	ldrb	r2, [r7, #7]
 80138b0:	701a      	strb	r2, [r3, #0]
}
 80138b2:	bf00      	nop
 80138b4:	3720      	adds	r7, #32
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	080189fc 	.word	0x080189fc

080138c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b08c      	sub	sp, #48	@ 0x30
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80138ce:	220b      	movs	r2, #11
 80138d0:	68b9      	ldr	r1, [r7, #8]
 80138d2:	68f8      	ldr	r0, [r7, #12]
 80138d4:	f7fe ffaa 	bl	801282c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	2b05      	cmp	r3, #5
 80138dc:	d92b      	bls.n	8013936 <gen_numname+0x76>
		sr = seq;
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80138e2:	e022      	b.n	801392a <gen_numname+0x6a>
			wc = *lfn++;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	1c9a      	adds	r2, r3, #2
 80138e8:	607a      	str	r2, [r7, #4]
 80138ea:	881b      	ldrh	r3, [r3, #0]
 80138ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80138ee:	2300      	movs	r3, #0
 80138f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80138f2:	e017      	b.n	8013924 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	005a      	lsls	r2, r3, #1
 80138f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80138fa:	f003 0301 	and.w	r3, r3, #1
 80138fe:	4413      	add	r3, r2
 8013900:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013902:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013904:	085b      	lsrs	r3, r3, #1
 8013906:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801390e:	2b00      	cmp	r3, #0
 8013910:	d005      	beq.n	801391e <gen_numname+0x5e>
 8013912:	69fb      	ldr	r3, [r7, #28]
 8013914:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8013918:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 801391c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013920:	3301      	adds	r3, #1
 8013922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013926:	2b0f      	cmp	r3, #15
 8013928:	d9e4      	bls.n	80138f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	881b      	ldrh	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1d8      	bne.n	80138e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013936:	2307      	movs	r3, #7
 8013938:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	b2db      	uxtb	r3, r3
 801393e:	f003 030f 	and.w	r3, r3, #15
 8013942:	b2db      	uxtb	r3, r3
 8013944:	3330      	adds	r3, #48	@ 0x30
 8013946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801394a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801394e:	2b39      	cmp	r3, #57	@ 0x39
 8013950:	d904      	bls.n	801395c <gen_numname+0x9c>
 8013952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013956:	3307      	adds	r3, #7
 8013958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801395e:	1e5a      	subs	r2, r3, #1
 8013960:	62ba      	str	r2, [r7, #40]	@ 0x28
 8013962:	3330      	adds	r3, #48	@ 0x30
 8013964:	443b      	add	r3, r7
 8013966:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801396a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	091b      	lsrs	r3, r3, #4
 8013972:	603b      	str	r3, [r7, #0]
	} while (seq);
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d1df      	bne.n	801393a <gen_numname+0x7a>
	ns[i] = '~';
 801397a:	f107 0214 	add.w	r2, r7, #20
 801397e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013980:	4413      	add	r3, r2
 8013982:	227e      	movs	r2, #126	@ 0x7e
 8013984:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013986:	2300      	movs	r3, #0
 8013988:	627b      	str	r3, [r7, #36]	@ 0x24
 801398a:	e002      	b.n	8013992 <gen_numname+0xd2>
 801398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398e:	3301      	adds	r3, #1
 8013990:	627b      	str	r3, [r7, #36]	@ 0x24
 8013992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013996:	429a      	cmp	r2, r3
 8013998:	d205      	bcs.n	80139a6 <gen_numname+0xe6>
 801399a:	68fa      	ldr	r2, [r7, #12]
 801399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801399e:	4413      	add	r3, r2
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	2b20      	cmp	r3, #32
 80139a4:	d1f2      	bne.n	801398c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80139a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a8:	2b07      	cmp	r3, #7
 80139aa:	d807      	bhi.n	80139bc <gen_numname+0xfc>
 80139ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80139b2:	3330      	adds	r3, #48	@ 0x30
 80139b4:	443b      	add	r3, r7
 80139b6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80139ba:	e000      	b.n	80139be <gen_numname+0xfe>
 80139bc:	2120      	movs	r1, #32
 80139be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c0:	1c5a      	adds	r2, r3, #1
 80139c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80139c4:	68fa      	ldr	r2, [r7, #12]
 80139c6:	4413      	add	r3, r2
 80139c8:	460a      	mov	r2, r1
 80139ca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80139cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ce:	2b07      	cmp	r3, #7
 80139d0:	d9e9      	bls.n	80139a6 <gen_numname+0xe6>
}
 80139d2:	bf00      	nop
 80139d4:	bf00      	nop
 80139d6:	3730      	adds	r7, #48	@ 0x30
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80139e4:	2300      	movs	r3, #0
 80139e6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80139e8:	230b      	movs	r3, #11
 80139ea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80139ec:	7bfb      	ldrb	r3, [r7, #15]
 80139ee:	b2da      	uxtb	r2, r3
 80139f0:	0852      	lsrs	r2, r2, #1
 80139f2:	01db      	lsls	r3, r3, #7
 80139f4:	4313      	orrs	r3, r2
 80139f6:	b2da      	uxtb	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	1c59      	adds	r1, r3, #1
 80139fc:	6079      	str	r1, [r7, #4]
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	4413      	add	r3, r2
 8013a02:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	3b01      	subs	r3, #1
 8013a08:	60bb      	str	r3, [r7, #8]
 8013a0a:	68bb      	ldr	r3, [r7, #8]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d1ed      	bne.n	80139ec <sum_sfn+0x10>
	return sum;
 8013a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3714      	adds	r7, #20
 8013a16:	46bd      	mov	sp, r7
 8013a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1c:	4770      	bx	lr

08013a1e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013a1e:	b580      	push	{r7, lr}
 8013a20:	b086      	sub	sp, #24
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013a2c:	2100      	movs	r1, #0
 8013a2e:	6878      	ldr	r0, [r7, #4]
 8013a30:	f7ff fca7 	bl	8013382 <dir_sdi>
 8013a34:	4603      	mov	r3, r0
 8013a36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013a38:	7dfb      	ldrb	r3, [r7, #23]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d001      	beq.n	8013a42 <dir_find+0x24>
 8013a3e:	7dfb      	ldrb	r3, [r7, #23]
 8013a40:	e0a9      	b.n	8013b96 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013a42:	23ff      	movs	r3, #255	@ 0xff
 8013a44:	753b      	strb	r3, [r7, #20]
 8013a46:	7d3b      	ldrb	r3, [r7, #20]
 8013a48:	757b      	strb	r3, [r7, #21]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8013a50:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	69db      	ldr	r3, [r3, #28]
 8013a56:	4619      	mov	r1, r3
 8013a58:	6938      	ldr	r0, [r7, #16]
 8013a5a:	f7ff f915 	bl	8012c88 <move_window>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013a62:	7dfb      	ldrb	r3, [r7, #23]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f040 8090 	bne.w	8013b8a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6a1b      	ldr	r3, [r3, #32]
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013a72:	7dbb      	ldrb	r3, [r7, #22]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d102      	bne.n	8013a7e <dir_find+0x60>
 8013a78:	2304      	movs	r3, #4
 8013a7a:	75fb      	strb	r3, [r7, #23]
 8013a7c:	e08a      	b.n	8013b94 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6a1b      	ldr	r3, [r3, #32]
 8013a82:	330b      	adds	r3, #11
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a8a:	73fb      	strb	r3, [r7, #15]
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	7bfa      	ldrb	r2, [r7, #15]
 8013a90:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8013a92:	7dbb      	ldrb	r3, [r7, #22]
 8013a94:	2be5      	cmp	r3, #229	@ 0xe5
 8013a96:	d007      	beq.n	8013aa8 <dir_find+0x8a>
 8013a98:	7bfb      	ldrb	r3, [r7, #15]
 8013a9a:	f003 0308 	and.w	r3, r3, #8
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d009      	beq.n	8013ab6 <dir_find+0x98>
 8013aa2:	7bfb      	ldrb	r3, [r7, #15]
 8013aa4:	2b0f      	cmp	r3, #15
 8013aa6:	d006      	beq.n	8013ab6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013aa8:	23ff      	movs	r3, #255	@ 0xff
 8013aaa:	757b      	strb	r3, [r7, #21]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f04f 32ff 	mov.w	r2, #4294967295
 8013ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8013ab4:	e05e      	b.n	8013b74 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013ab6:	7bfb      	ldrb	r3, [r7, #15]
 8013ab8:	2b0f      	cmp	r3, #15
 8013aba:	d136      	bne.n	8013b2a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d154      	bne.n	8013b74 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013aca:	7dbb      	ldrb	r3, [r7, #22]
 8013acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d00d      	beq.n	8013af0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6a1b      	ldr	r3, [r3, #32]
 8013ad8:	7b5b      	ldrb	r3, [r3, #13]
 8013ada:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013adc:	7dbb      	ldrb	r3, [r7, #22]
 8013ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013ae2:	75bb      	strb	r3, [r7, #22]
 8013ae4:	7dbb      	ldrb	r3, [r7, #22]
 8013ae6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	695a      	ldr	r2, [r3, #20]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013af0:	7dba      	ldrb	r2, [r7, #22]
 8013af2:	7d7b      	ldrb	r3, [r7, #21]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d115      	bne.n	8013b24 <dir_find+0x106>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a1b      	ldr	r3, [r3, #32]
 8013afc:	330d      	adds	r3, #13
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	7d3a      	ldrb	r2, [r7, #20]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d10e      	bne.n	8013b24 <dir_find+0x106>
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	68da      	ldr	r2, [r3, #12]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6a1b      	ldr	r3, [r3, #32]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	4610      	mov	r0, r2
 8013b12:	f7ff fdfd 	bl	8013710 <cmp_lfn>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d003      	beq.n	8013b24 <dir_find+0x106>
 8013b1c:	7d7b      	ldrb	r3, [r7, #21]
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	b2db      	uxtb	r3, r3
 8013b22:	e000      	b.n	8013b26 <dir_find+0x108>
 8013b24:	23ff      	movs	r3, #255	@ 0xff
 8013b26:	757b      	strb	r3, [r7, #21]
 8013b28:	e024      	b.n	8013b74 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013b2a:	7d7b      	ldrb	r3, [r7, #21]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d109      	bne.n	8013b44 <dir_find+0x126>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6a1b      	ldr	r3, [r3, #32]
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7ff ff51 	bl	80139dc <sum_sfn>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	7d3b      	ldrb	r3, [r7, #20]
 8013b40:	4293      	cmp	r3, r2
 8013b42:	d024      	beq.n	8013b8e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013b4a:	f003 0301 	and.w	r3, r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d10a      	bne.n	8013b68 <dir_find+0x14a>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6a18      	ldr	r0, [r3, #32]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	3324      	adds	r3, #36	@ 0x24
 8013b5a:	220b      	movs	r2, #11
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	f7fe fea1 	bl	80128a4 <mem_cmp>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d014      	beq.n	8013b92 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013b68:	23ff      	movs	r3, #255	@ 0xff
 8013b6a:	757b      	strb	r3, [r7, #21]
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b72:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013b74:	2100      	movs	r1, #0
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7ff fc7e 	bl	8013478 <dir_next>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013b80:	7dfb      	ldrb	r3, [r7, #23]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f43f af65 	beq.w	8013a52 <dir_find+0x34>
 8013b88:	e004      	b.n	8013b94 <dir_find+0x176>
		if (res != FR_OK) break;
 8013b8a:	bf00      	nop
 8013b8c:	e002      	b.n	8013b94 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013b8e:	bf00      	nop
 8013b90:	e000      	b.n	8013b94 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013b92:	bf00      	nop

	return res;
 8013b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3718      	adds	r7, #24
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
	...

08013ba0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b08c      	sub	sp, #48	@ 0x30
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013bb4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d001      	beq.n	8013bc0 <dir_register+0x20>
 8013bbc:	2306      	movs	r3, #6
 8013bbe:	e0e0      	b.n	8013d82 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013bc4:	e002      	b.n	8013bcc <dir_register+0x2c>
 8013bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc8:	3301      	adds	r3, #1
 8013bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	68da      	ldr	r2, [r3, #12]
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd2:	005b      	lsls	r3, r3, #1
 8013bd4:	4413      	add	r3, r2
 8013bd6:	881b      	ldrh	r3, [r3, #0]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1f4      	bne.n	8013bc6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8013be2:	f107 030c 	add.w	r3, r7, #12
 8013be6:	220c      	movs	r2, #12
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fe fe1f 	bl	801282c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013bee:	7dfb      	ldrb	r3, [r7, #23]
 8013bf0:	f003 0301 	and.w	r3, r3, #1
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d032      	beq.n	8013c5e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2240      	movs	r2, #64	@ 0x40
 8013bfc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8013c00:	2301      	movs	r3, #1
 8013c02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013c04:	e016      	b.n	8013c34 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8013c0c:	69fb      	ldr	r3, [r7, #28]
 8013c0e:	68da      	ldr	r2, [r3, #12]
 8013c10:	f107 010c 	add.w	r1, r7, #12
 8013c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c16:	f7ff fe53 	bl	80138c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f7ff feff 	bl	8013a1e <dir_find>
 8013c20:	4603      	mov	r3, r0
 8013c22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8013c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d106      	bne.n	8013c3c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c30:	3301      	adds	r3, #1
 8013c32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c36:	2b63      	cmp	r3, #99	@ 0x63
 8013c38:	d9e5      	bls.n	8013c06 <dir_register+0x66>
 8013c3a:	e000      	b.n	8013c3e <dir_register+0x9e>
			if (res != FR_OK) break;
 8013c3c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c40:	2b64      	cmp	r3, #100	@ 0x64
 8013c42:	d101      	bne.n	8013c48 <dir_register+0xa8>
 8013c44:	2307      	movs	r3, #7
 8013c46:	e09c      	b.n	8013d82 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013c48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c4c:	2b04      	cmp	r3, #4
 8013c4e:	d002      	beq.n	8013c56 <dir_register+0xb6>
 8013c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c54:	e095      	b.n	8013d82 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013c56:	7dfa      	ldrb	r2, [r7, #23]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013c5e:	7dfb      	ldrb	r3, [r7, #23]
 8013c60:	f003 0302 	and.w	r3, r3, #2
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d007      	beq.n	8013c78 <dir_register+0xd8>
 8013c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c6a:	330c      	adds	r3, #12
 8013c6c:	4a47      	ldr	r2, [pc, #284]	@ (8013d8c <dir_register+0x1ec>)
 8013c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c72:	089b      	lsrs	r3, r3, #2
 8013c74:	3301      	adds	r3, #1
 8013c76:	e000      	b.n	8013c7a <dir_register+0xda>
 8013c78:	2301      	movs	r3, #1
 8013c7a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013c7c:	6a39      	ldr	r1, [r7, #32]
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7ff fcbf 	bl	8013602 <dir_alloc>
 8013c84:	4603      	mov	r3, r0
 8013c86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d148      	bne.n	8013d24 <dir_register+0x184>
 8013c92:	6a3b      	ldr	r3, [r7, #32]
 8013c94:	3b01      	subs	r3, #1
 8013c96:	623b      	str	r3, [r7, #32]
 8013c98:	6a3b      	ldr	r3, [r7, #32]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d042      	beq.n	8013d24 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	695a      	ldr	r2, [r3, #20]
 8013ca2:	6a3b      	ldr	r3, [r7, #32]
 8013ca4:	015b      	lsls	r3, r3, #5
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	4619      	mov	r1, r3
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7ff fb69 	bl	8013382 <dir_sdi>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d132      	bne.n	8013d24 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	3324      	adds	r3, #36	@ 0x24
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7ff fe8a 	bl	80139dc <sum_sfn>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	69db      	ldr	r3, [r3, #28]
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	69f8      	ldr	r0, [r7, #28]
 8013cd4:	f7fe ffd8 	bl	8012c88 <move_window>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8013cde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d11d      	bne.n	8013d22 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	68d8      	ldr	r0, [r3, #12]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6a19      	ldr	r1, [r3, #32]
 8013cee:	6a3b      	ldr	r3, [r7, #32]
 8013cf0:	b2da      	uxtb	r2, r3
 8013cf2:	7efb      	ldrb	r3, [r7, #27]
 8013cf4:	f7ff fd7c 	bl	80137f0 <put_lfn>
				fs->wflag = 1;
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013cfe:	2100      	movs	r1, #0
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f7ff fbb9 	bl	8013478 <dir_next>
 8013d06:	4603      	mov	r3, r0
 8013d08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8013d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d107      	bne.n	8013d24 <dir_register+0x184>
 8013d14:	6a3b      	ldr	r3, [r7, #32]
 8013d16:	3b01      	subs	r3, #1
 8013d18:	623b      	str	r3, [r7, #32]
 8013d1a:	6a3b      	ldr	r3, [r7, #32]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d1d5      	bne.n	8013ccc <dir_register+0x12c>
 8013d20:	e000      	b.n	8013d24 <dir_register+0x184>
				if (res != FR_OK) break;
 8013d22:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013d24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d128      	bne.n	8013d7e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	69db      	ldr	r3, [r3, #28]
 8013d30:	4619      	mov	r1, r3
 8013d32:	69f8      	ldr	r0, [r7, #28]
 8013d34:	f7fe ffa8 	bl	8012c88 <move_window>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d11b      	bne.n	8013d7e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6a1b      	ldr	r3, [r3, #32]
 8013d4a:	2220      	movs	r2, #32
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fe fd8d 	bl	801286e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6a18      	ldr	r0, [r3, #32]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	3324      	adds	r3, #36	@ 0x24
 8013d5c:	220b      	movs	r2, #11
 8013d5e:	4619      	mov	r1, r3
 8013d60:	f7fe fd64 	bl	801282c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6a1b      	ldr	r3, [r3, #32]
 8013d6e:	330c      	adds	r3, #12
 8013d70:	f002 0218 	and.w	r2, r2, #24
 8013d74:	b2d2      	uxtb	r2, r2
 8013d76:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3730      	adds	r7, #48	@ 0x30
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	4ec4ec4f 	.word	0x4ec4ec4f

08013d90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b08a      	sub	sp, #40	@ 0x28
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	613b      	str	r3, [r7, #16]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	68db      	ldr	r3, [r3, #12]
 8013da6:	60fb      	str	r3, [r7, #12]
 8013da8:	2300      	movs	r3, #0
 8013daa:	617b      	str	r3, [r7, #20]
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	1c5a      	adds	r2, r3, #1
 8013db4:	61ba      	str	r2, [r7, #24]
 8013db6:	693a      	ldr	r2, [r7, #16]
 8013db8:	4413      	add	r3, r2
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dc0:	2b1f      	cmp	r3, #31
 8013dc2:	d940      	bls.n	8013e46 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013dc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8013dc8:	d006      	beq.n	8013dd8 <create_name+0x48>
 8013dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dcc:	2b5c      	cmp	r3, #92	@ 0x5c
 8013dce:	d110      	bne.n	8013df2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013dd0:	e002      	b.n	8013dd8 <create_name+0x48>
 8013dd2:	69bb      	ldr	r3, [r7, #24]
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	61bb      	str	r3, [r7, #24]
 8013dd8:	693a      	ldr	r2, [r7, #16]
 8013dda:	69bb      	ldr	r3, [r7, #24]
 8013ddc:	4413      	add	r3, r2
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	2b2f      	cmp	r3, #47	@ 0x2f
 8013de2:	d0f6      	beq.n	8013dd2 <create_name+0x42>
 8013de4:	693a      	ldr	r2, [r7, #16]
 8013de6:	69bb      	ldr	r3, [r7, #24]
 8013de8:	4413      	add	r3, r2
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	2b5c      	cmp	r3, #92	@ 0x5c
 8013dee:	d0f0      	beq.n	8013dd2 <create_name+0x42>
			break;
 8013df0:	e02a      	b.n	8013e48 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	2bfe      	cmp	r3, #254	@ 0xfe
 8013df6:	d901      	bls.n	8013dfc <create_name+0x6c>
 8013df8:	2306      	movs	r3, #6
 8013dfa:	e17d      	b.n	80140f8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013dfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e04:	2101      	movs	r1, #1
 8013e06:	4618      	mov	r0, r3
 8013e08:	f001 fc1a 	bl	8015640 <ff_convert>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013e10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d101      	bne.n	8013e1a <create_name+0x8a>
 8013e16:	2306      	movs	r3, #6
 8013e18:	e16e      	b.n	80140f8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8013e1e:	d809      	bhi.n	8013e34 <create_name+0xa4>
 8013e20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e22:	4619      	mov	r1, r3
 8013e24:	488d      	ldr	r0, [pc, #564]	@ (801405c <create_name+0x2cc>)
 8013e26:	f7fe fd64 	bl	80128f2 <chk_chr>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d001      	beq.n	8013e34 <create_name+0xa4>
 8013e30:	2306      	movs	r3, #6
 8013e32:	e161      	b.n	80140f8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	1c5a      	adds	r2, r3, #1
 8013e38:	617a      	str	r2, [r7, #20]
 8013e3a:	005b      	lsls	r3, r3, #1
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	4413      	add	r3, r2
 8013e40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013e42:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013e44:	e7b4      	b.n	8013db0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013e46:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013e48:	693a      	ldr	r2, [r7, #16]
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	441a      	add	r2, r3
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013e52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e54:	2b1f      	cmp	r3, #31
 8013e56:	d801      	bhi.n	8013e5c <create_name+0xcc>
 8013e58:	2304      	movs	r3, #4
 8013e5a:	e000      	b.n	8013e5e <create_name+0xce>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013e62:	e011      	b.n	8013e88 <create_name+0xf8>
		w = lfn[di - 1];
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013e6a:	3b01      	subs	r3, #1
 8013e6c:	005b      	lsls	r3, r3, #1
 8013e6e:	68fa      	ldr	r2, [r7, #12]
 8013e70:	4413      	add	r3, r2
 8013e72:	881b      	ldrh	r3, [r3, #0]
 8013e74:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e78:	2b20      	cmp	r3, #32
 8013e7a:	d002      	beq.n	8013e82 <create_name+0xf2>
 8013e7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e80:	d106      	bne.n	8013e90 <create_name+0x100>
		di--;
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	3b01      	subs	r3, #1
 8013e86:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1ea      	bne.n	8013e64 <create_name+0xd4>
 8013e8e:	e000      	b.n	8013e92 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013e90:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	005b      	lsls	r3, r3, #1
 8013e96:	68fa      	ldr	r2, [r7, #12]
 8013e98:	4413      	add	r3, r2
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <create_name+0x118>
 8013ea4:	2306      	movs	r3, #6
 8013ea6:	e127      	b.n	80140f8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	3324      	adds	r3, #36	@ 0x24
 8013eac:	220b      	movs	r2, #11
 8013eae:	2120      	movs	r1, #32
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	f7fe fcdc 	bl	801286e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	61bb      	str	r3, [r7, #24]
 8013eba:	e002      	b.n	8013ec2 <create_name+0x132>
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	61bb      	str	r3, [r7, #24]
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	005b      	lsls	r3, r3, #1
 8013ec6:	68fa      	ldr	r2, [r7, #12]
 8013ec8:	4413      	add	r3, r2
 8013eca:	881b      	ldrh	r3, [r3, #0]
 8013ecc:	2b20      	cmp	r3, #32
 8013ece:	d0f5      	beq.n	8013ebc <create_name+0x12c>
 8013ed0:	69bb      	ldr	r3, [r7, #24]
 8013ed2:	005b      	lsls	r3, r3, #1
 8013ed4:	68fa      	ldr	r2, [r7, #12]
 8013ed6:	4413      	add	r3, r2
 8013ed8:	881b      	ldrh	r3, [r3, #0]
 8013eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8013edc:	d0ee      	beq.n	8013ebc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013ede:	69bb      	ldr	r3, [r7, #24]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d009      	beq.n	8013ef8 <create_name+0x168>
 8013ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013ee8:	f043 0303 	orr.w	r3, r3, #3
 8013eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013ef0:	e002      	b.n	8013ef8 <create_name+0x168>
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	3b01      	subs	r3, #1
 8013ef6:	617b      	str	r3, [r7, #20]
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d009      	beq.n	8013f12 <create_name+0x182>
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013f04:	3b01      	subs	r3, #1
 8013f06:	005b      	lsls	r3, r3, #1
 8013f08:	68fa      	ldr	r2, [r7, #12]
 8013f0a:	4413      	add	r3, r2
 8013f0c:	881b      	ldrh	r3, [r3, #0]
 8013f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f10:	d1ef      	bne.n	8013ef2 <create_name+0x162>

	i = b = 0; ni = 8;
 8013f12:	2300      	movs	r3, #0
 8013f14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013f18:	2300      	movs	r3, #0
 8013f1a:	623b      	str	r3, [r7, #32]
 8013f1c:	2308      	movs	r3, #8
 8013f1e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013f20:	69bb      	ldr	r3, [r7, #24]
 8013f22:	1c5a      	adds	r2, r3, #1
 8013f24:	61ba      	str	r2, [r7, #24]
 8013f26:	005b      	lsls	r3, r3, #1
 8013f28:	68fa      	ldr	r2, [r7, #12]
 8013f2a:	4413      	add	r3, r2
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013f30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f000 8090 	beq.w	8014058 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f3a:	2b20      	cmp	r3, #32
 8013f3c:	d006      	beq.n	8013f4c <create_name+0x1bc>
 8013f3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013f40:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f42:	d10a      	bne.n	8013f5a <create_name+0x1ca>
 8013f44:	69ba      	ldr	r2, [r7, #24]
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d006      	beq.n	8013f5a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f50:	f043 0303 	orr.w	r3, r3, #3
 8013f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f58:	e07d      	b.n	8014056 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013f5a:	6a3a      	ldr	r2, [r7, #32]
 8013f5c:	69fb      	ldr	r3, [r7, #28]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d203      	bcs.n	8013f6a <create_name+0x1da>
 8013f62:	69ba      	ldr	r2, [r7, #24]
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d123      	bne.n	8013fb2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013f6a:	69fb      	ldr	r3, [r7, #28]
 8013f6c:	2b0b      	cmp	r3, #11
 8013f6e:	d106      	bne.n	8013f7e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f74:	f043 0303 	orr.w	r3, r3, #3
 8013f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f7c:	e075      	b.n	801406a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013f7e:	69ba      	ldr	r2, [r7, #24]
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d005      	beq.n	8013f92 <create_name+0x202>
 8013f86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f8a:	f043 0303 	orr.w	r3, r3, #3
 8013f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013f92:	69ba      	ldr	r2, [r7, #24]
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d866      	bhi.n	8014068 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	61bb      	str	r3, [r7, #24]
 8013f9e:	2308      	movs	r3, #8
 8013fa0:	623b      	str	r3, [r7, #32]
 8013fa2:	230b      	movs	r3, #11
 8013fa4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013faa:	009b      	lsls	r3, r3, #2
 8013fac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013fb0:	e051      	b.n	8014056 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013fb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8013fb6:	d914      	bls.n	8013fe2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013fb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f001 fb3f 	bl	8015640 <ff_convert>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013fc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d004      	beq.n	8013fd6 <create_name+0x246>
 8013fcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fce:	3b80      	subs	r3, #128	@ 0x80
 8013fd0:	4a23      	ldr	r2, [pc, #140]	@ (8014060 <create_name+0x2d0>)
 8013fd2:	5cd3      	ldrb	r3, [r2, r3]
 8013fd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013fda:	f043 0302 	orr.w	r3, r3, #2
 8013fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013fe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d007      	beq.n	8013ff8 <create_name+0x268>
 8013fe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013fea:	4619      	mov	r1, r3
 8013fec:	481d      	ldr	r0, [pc, #116]	@ (8014064 <create_name+0x2d4>)
 8013fee:	f7fe fc80 	bl	80128f2 <chk_chr>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d008      	beq.n	801400a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013ff8:	235f      	movs	r3, #95	@ 0x5f
 8013ffa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014000:	f043 0303 	orr.w	r3, r3, #3
 8014004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014008:	e01b      	b.n	8014042 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801400a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801400c:	2b40      	cmp	r3, #64	@ 0x40
 801400e:	d909      	bls.n	8014024 <create_name+0x294>
 8014010:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014012:	2b5a      	cmp	r3, #90	@ 0x5a
 8014014:	d806      	bhi.n	8014024 <create_name+0x294>
					b |= 2;
 8014016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801401a:	f043 0302 	orr.w	r3, r3, #2
 801401e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014022:	e00e      	b.n	8014042 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014026:	2b60      	cmp	r3, #96	@ 0x60
 8014028:	d90b      	bls.n	8014042 <create_name+0x2b2>
 801402a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801402c:	2b7a      	cmp	r3, #122	@ 0x7a
 801402e:	d808      	bhi.n	8014042 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8014030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014034:	f043 0301 	orr.w	r3, r3, #1
 8014038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801403c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801403e:	3b20      	subs	r3, #32
 8014040:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014042:	6a3b      	ldr	r3, [r7, #32]
 8014044:	1c5a      	adds	r2, r3, #1
 8014046:	623a      	str	r2, [r7, #32]
 8014048:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801404a:	b2d1      	uxtb	r1, r2
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	4413      	add	r3, r2
 8014050:	460a      	mov	r2, r1
 8014052:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8014056:	e763      	b.n	8013f20 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8014058:	bf00      	nop
 801405a:	e006      	b.n	801406a <create_name+0x2da>
 801405c:	080188ec 	.word	0x080188ec
 8014060:	0801897c 	.word	0x0801897c
 8014064:	080188f8 	.word	0x080188f8
			if (si > di) break;			/* No extension */
 8014068:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014070:	2be5      	cmp	r3, #229	@ 0xe5
 8014072:	d103      	bne.n	801407c <create_name+0x2ec>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2205      	movs	r2, #5
 8014078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801407c:	69fb      	ldr	r3, [r7, #28]
 801407e:	2b08      	cmp	r3, #8
 8014080:	d104      	bne.n	801408c <create_name+0x2fc>
 8014082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014086:	009b      	lsls	r3, r3, #2
 8014088:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801408c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014090:	f003 030c 	and.w	r3, r3, #12
 8014094:	2b0c      	cmp	r3, #12
 8014096:	d005      	beq.n	80140a4 <create_name+0x314>
 8014098:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801409c:	f003 0303 	and.w	r3, r3, #3
 80140a0:	2b03      	cmp	r3, #3
 80140a2:	d105      	bne.n	80140b0 <create_name+0x320>
 80140a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140a8:	f043 0302 	orr.w	r3, r3, #2
 80140ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80140b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140b4:	f003 0302 	and.w	r3, r3, #2
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d117      	bne.n	80140ec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80140bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80140c0:	f003 0303 	and.w	r3, r3, #3
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d105      	bne.n	80140d4 <create_name+0x344>
 80140c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140cc:	f043 0310 	orr.w	r3, r3, #16
 80140d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80140d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80140d8:	f003 030c 	and.w	r3, r3, #12
 80140dc:	2b04      	cmp	r3, #4
 80140de:	d105      	bne.n	80140ec <create_name+0x35c>
 80140e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140e4:	f043 0308 	orr.w	r3, r3, #8
 80140e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80140f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80140f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3728      	adds	r7, #40	@ 0x28
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}

08014100 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801410e:	693b      	ldr	r3, [r7, #16]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014114:	e002      	b.n	801411c <follow_path+0x1c>
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	3301      	adds	r3, #1
 801411a:	603b      	str	r3, [r7, #0]
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	781b      	ldrb	r3, [r3, #0]
 8014120:	2b2f      	cmp	r3, #47	@ 0x2f
 8014122:	d0f8      	beq.n	8014116 <follow_path+0x16>
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	2b5c      	cmp	r3, #92	@ 0x5c
 801412a:	d0f4      	beq.n	8014116 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	2200      	movs	r2, #0
 8014130:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b1f      	cmp	r3, #31
 8014138:	d80a      	bhi.n	8014150 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2280      	movs	r2, #128	@ 0x80
 801413e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8014142:	2100      	movs	r1, #0
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7ff f91c 	bl	8013382 <dir_sdi>
 801414a:	4603      	mov	r3, r0
 801414c:	75fb      	strb	r3, [r7, #23]
 801414e:	e043      	b.n	80141d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014150:	463b      	mov	r3, r7
 8014152:	4619      	mov	r1, r3
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7ff fe1b 	bl	8013d90 <create_name>
 801415a:	4603      	mov	r3, r0
 801415c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d134      	bne.n	80141ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7ff fc5a 	bl	8013a1e <dir_find>
 801416a:	4603      	mov	r3, r0
 801416c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014174:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014176:	7dfb      	ldrb	r3, [r7, #23]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d00a      	beq.n	8014192 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801417c:	7dfb      	ldrb	r3, [r7, #23]
 801417e:	2b04      	cmp	r3, #4
 8014180:	d127      	bne.n	80141d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014182:	7afb      	ldrb	r3, [r7, #11]
 8014184:	f003 0304 	and.w	r3, r3, #4
 8014188:	2b00      	cmp	r3, #0
 801418a:	d122      	bne.n	80141d2 <follow_path+0xd2>
 801418c:	2305      	movs	r3, #5
 801418e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014190:	e01f      	b.n	80141d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014192:	7afb      	ldrb	r3, [r7, #11]
 8014194:	f003 0304 	and.w	r3, r3, #4
 8014198:	2b00      	cmp	r3, #0
 801419a:	d11c      	bne.n	80141d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	799b      	ldrb	r3, [r3, #6]
 80141a0:	f003 0310 	and.w	r3, r3, #16
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d102      	bne.n	80141ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 80141a8:	2305      	movs	r3, #5
 80141aa:	75fb      	strb	r3, [r7, #23]
 80141ac:	e014      	b.n	80141d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	695b      	ldr	r3, [r3, #20]
 80141b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141bc:	4413      	add	r3, r2
 80141be:	4619      	mov	r1, r3
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	f7ff fa65 	bl	8013690 <ld_clust>
 80141c6:	4602      	mov	r2, r0
 80141c8:	693b      	ldr	r3, [r7, #16]
 80141ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80141cc:	e7c0      	b.n	8014150 <follow_path+0x50>
			if (res != FR_OK) break;
 80141ce:	bf00      	nop
 80141d0:	e002      	b.n	80141d8 <follow_path+0xd8>
				break;
 80141d2:	bf00      	nop
 80141d4:	e000      	b.n	80141d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80141d6:	bf00      	nop
			}
		}
	}

	return res;
 80141d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}

080141e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80141e2:	b480      	push	{r7}
 80141e4:	b087      	sub	sp, #28
 80141e6:	af00      	add	r7, sp, #0
 80141e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80141ea:	f04f 33ff 	mov.w	r3, #4294967295
 80141ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d031      	beq.n	801425c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	617b      	str	r3, [r7, #20]
 80141fe:	e002      	b.n	8014206 <get_ldnumber+0x24>
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	3301      	adds	r3, #1
 8014204:	617b      	str	r3, [r7, #20]
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b1f      	cmp	r3, #31
 801420c:	d903      	bls.n	8014216 <get_ldnumber+0x34>
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	2b3a      	cmp	r3, #58	@ 0x3a
 8014214:	d1f4      	bne.n	8014200 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	781b      	ldrb	r3, [r3, #0]
 801421a:	2b3a      	cmp	r3, #58	@ 0x3a
 801421c:	d11c      	bne.n	8014258 <get_ldnumber+0x76>
			tp = *path;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	1c5a      	adds	r2, r3, #1
 8014228:	60fa      	str	r2, [r7, #12]
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	3b30      	subs	r3, #48	@ 0x30
 801422e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	2b09      	cmp	r3, #9
 8014234:	d80e      	bhi.n	8014254 <get_ldnumber+0x72>
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	429a      	cmp	r2, r3
 801423c:	d10a      	bne.n	8014254 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	2b01      	cmp	r3, #1
 8014242:	d807      	bhi.n	8014254 <get_ldnumber+0x72>
					vol = (int)i;
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	3301      	adds	r3, #1
 801424c:	617b      	str	r3, [r7, #20]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	697a      	ldr	r2, [r7, #20]
 8014252:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	e002      	b.n	801425e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014258:	2300      	movs	r3, #0
 801425a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801425c:	693b      	ldr	r3, [r7, #16]
}
 801425e:	4618      	mov	r0, r3
 8014260:	371c      	adds	r7, #28
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr
	...

0801426c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	2200      	movs	r2, #0
 801427a:	70da      	strb	r2, [r3, #3]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f04f 32ff 	mov.w	r2, #4294967295
 8014282:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014284:	6839      	ldr	r1, [r7, #0]
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7fe fcfe 	bl	8012c88 <move_window>
 801428c:	4603      	mov	r3, r0
 801428e:	2b00      	cmp	r3, #0
 8014290:	d001      	beq.n	8014296 <check_fs+0x2a>
 8014292:	2304      	movs	r3, #4
 8014294:	e038      	b.n	8014308 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	3334      	adds	r3, #52	@ 0x34
 801429a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fe fa42 	bl	8012728 <ld_word>
 80142a4:	4603      	mov	r3, r0
 80142a6:	461a      	mov	r2, r3
 80142a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d001      	beq.n	80142b4 <check_fs+0x48>
 80142b0:	2303      	movs	r3, #3
 80142b2:	e029      	b.n	8014308 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80142ba:	2be9      	cmp	r3, #233	@ 0xe9
 80142bc:	d009      	beq.n	80142d2 <check_fs+0x66>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80142c4:	2beb      	cmp	r3, #235	@ 0xeb
 80142c6:	d11e      	bne.n	8014306 <check_fs+0x9a>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80142ce:	2b90      	cmp	r3, #144	@ 0x90
 80142d0:	d119      	bne.n	8014306 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	3334      	adds	r3, #52	@ 0x34
 80142d6:	3336      	adds	r3, #54	@ 0x36
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fe fa3d 	bl	8012758 <ld_dword>
 80142de:	4603      	mov	r3, r0
 80142e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80142e4:	4a0a      	ldr	r2, [pc, #40]	@ (8014310 <check_fs+0xa4>)
 80142e6:	4293      	cmp	r3, r2
 80142e8:	d101      	bne.n	80142ee <check_fs+0x82>
 80142ea:	2300      	movs	r3, #0
 80142ec:	e00c      	b.n	8014308 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	3334      	adds	r3, #52	@ 0x34
 80142f2:	3352      	adds	r3, #82	@ 0x52
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fe fa2f 	bl	8012758 <ld_dword>
 80142fa:	4603      	mov	r3, r0
 80142fc:	4a05      	ldr	r2, [pc, #20]	@ (8014314 <check_fs+0xa8>)
 80142fe:	4293      	cmp	r3, r2
 8014300:	d101      	bne.n	8014306 <check_fs+0x9a>
 8014302:	2300      	movs	r3, #0
 8014304:	e000      	b.n	8014308 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014306:	2302      	movs	r3, #2
}
 8014308:	4618      	mov	r0, r3
 801430a:	3708      	adds	r7, #8
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	00544146 	.word	0x00544146
 8014314:	33544146 	.word	0x33544146

08014318 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b096      	sub	sp, #88	@ 0x58
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	4613      	mov	r3, r2
 8014324:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	2200      	movs	r2, #0
 801432a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	f7ff ff58 	bl	80141e2 <get_ldnumber>
 8014332:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014336:	2b00      	cmp	r3, #0
 8014338:	da01      	bge.n	801433e <find_volume+0x26>
 801433a:	230b      	movs	r3, #11
 801433c:	e230      	b.n	80147a0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801433e:	4aa1      	ldr	r2, [pc, #644]	@ (80145c4 <find_volume+0x2ac>)
 8014340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014346:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801434a:	2b00      	cmp	r3, #0
 801434c:	d101      	bne.n	8014352 <find_volume+0x3a>
 801434e:	230c      	movs	r3, #12
 8014350:	e226      	b.n	80147a0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014356:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014358:	79fb      	ldrb	r3, [r7, #7]
 801435a:	f023 0301 	bic.w	r3, r3, #1
 801435e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d01a      	beq.n	801439e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801436a:	785b      	ldrb	r3, [r3, #1]
 801436c:	4618      	mov	r0, r3
 801436e:	f7fe f93b 	bl	80125e8 <disk_status>
 8014372:	4603      	mov	r3, r0
 8014374:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014378:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801437c:	f003 0301 	and.w	r3, r3, #1
 8014380:	2b00      	cmp	r3, #0
 8014382:	d10c      	bne.n	801439e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014384:	79fb      	ldrb	r3, [r7, #7]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d007      	beq.n	801439a <find_volume+0x82>
 801438a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801438e:	f003 0304 	and.w	r3, r3, #4
 8014392:	2b00      	cmp	r3, #0
 8014394:	d001      	beq.n	801439a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014396:	230a      	movs	r3, #10
 8014398:	e202      	b.n	80147a0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801439a:	2300      	movs	r3, #0
 801439c:	e200      	b.n	80147a0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143a0:	2200      	movs	r2, #0
 80143a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80143a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80143ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ae:	785b      	ldrb	r3, [r3, #1]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7fe f933 	bl	801261c <disk_initialize>
 80143b6:	4603      	mov	r3, r0
 80143b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80143bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80143c0:	f003 0301 	and.w	r3, r3, #1
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d001      	beq.n	80143cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80143c8:	2303      	movs	r3, #3
 80143ca:	e1e9      	b.n	80147a0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80143cc:	79fb      	ldrb	r3, [r7, #7]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d007      	beq.n	80143e2 <find_volume+0xca>
 80143d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80143d6:	f003 0304 	and.w	r3, r3, #4
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d001      	beq.n	80143e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80143de:	230a      	movs	r3, #10
 80143e0:	e1de      	b.n	80147a0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80143e2:	2300      	movs	r3, #0
 80143e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80143e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80143e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80143ea:	f7ff ff3f 	bl	801426c <check_fs>
 80143ee:	4603      	mov	r3, r0
 80143f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80143f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80143f8:	2b02      	cmp	r3, #2
 80143fa:	d149      	bne.n	8014490 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80143fc:	2300      	movs	r3, #0
 80143fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8014400:	e01e      	b.n	8014440 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014404:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801440a:	011b      	lsls	r3, r3, #4
 801440c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014410:	4413      	add	r3, r2
 8014412:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014416:	3304      	adds	r3, #4
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d006      	beq.n	801442c <find_volume+0x114>
 801441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014420:	3308      	adds	r3, #8
 8014422:	4618      	mov	r0, r3
 8014424:	f7fe f998 	bl	8012758 <ld_dword>
 8014428:	4602      	mov	r2, r0
 801442a:	e000      	b.n	801442e <find_volume+0x116>
 801442c:	2200      	movs	r2, #0
 801442e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014430:	009b      	lsls	r3, r3, #2
 8014432:	3358      	adds	r3, #88	@ 0x58
 8014434:	443b      	add	r3, r7
 8014436:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801443a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801443c:	3301      	adds	r3, #1
 801443e:	643b      	str	r3, [r7, #64]	@ 0x40
 8014440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014442:	2b03      	cmp	r3, #3
 8014444:	d9dd      	bls.n	8014402 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014446:	2300      	movs	r3, #0
 8014448:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801444a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <find_volume+0x13e>
 8014450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014452:	3b01      	subs	r3, #1
 8014454:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	3358      	adds	r3, #88	@ 0x58
 801445c:	443b      	add	r3, r7
 801445e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014462:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014466:	2b00      	cmp	r3, #0
 8014468:	d005      	beq.n	8014476 <find_volume+0x15e>
 801446a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801446c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801446e:	f7ff fefd 	bl	801426c <check_fs>
 8014472:	4603      	mov	r3, r0
 8014474:	e000      	b.n	8014478 <find_volume+0x160>
 8014476:	2303      	movs	r3, #3
 8014478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801447c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014480:	2b01      	cmp	r3, #1
 8014482:	d905      	bls.n	8014490 <find_volume+0x178>
 8014484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014486:	3301      	adds	r3, #1
 8014488:	643b      	str	r3, [r7, #64]	@ 0x40
 801448a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801448c:	2b03      	cmp	r3, #3
 801448e:	d9e2      	bls.n	8014456 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014494:	2b04      	cmp	r3, #4
 8014496:	d101      	bne.n	801449c <find_volume+0x184>
 8014498:	2301      	movs	r3, #1
 801449a:	e181      	b.n	80147a0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801449c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	d901      	bls.n	80144a8 <find_volume+0x190>
 80144a4:	230d      	movs	r3, #13
 80144a6:	e17b      	b.n	80147a0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80144a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144aa:	3334      	adds	r3, #52	@ 0x34
 80144ac:	330b      	adds	r3, #11
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fe f93a 	bl	8012728 <ld_word>
 80144b4:	4603      	mov	r3, r0
 80144b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144ba:	d001      	beq.n	80144c0 <find_volume+0x1a8>
 80144bc:	230d      	movs	r3, #13
 80144be:	e16f      	b.n	80147a0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80144c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144c2:	3334      	adds	r3, #52	@ 0x34
 80144c4:	3316      	adds	r3, #22
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fe f92e 	bl	8012728 <ld_word>
 80144cc:	4603      	mov	r3, r0
 80144ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80144d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <find_volume+0x1cc>
 80144d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144d8:	3334      	adds	r3, #52	@ 0x34
 80144da:	3324      	adds	r3, #36	@ 0x24
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fe f93b 	bl	8012758 <ld_dword>
 80144e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80144e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80144e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80144ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ec:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80144f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80144f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144f6:	789b      	ldrb	r3, [r3, #2]
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d005      	beq.n	8014508 <find_volume+0x1f0>
 80144fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144fe:	789b      	ldrb	r3, [r3, #2]
 8014500:	2b02      	cmp	r3, #2
 8014502:	d001      	beq.n	8014508 <find_volume+0x1f0>
 8014504:	230d      	movs	r3, #13
 8014506:	e14b      	b.n	80147a0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801450a:	789b      	ldrb	r3, [r3, #2]
 801450c:	461a      	mov	r2, r3
 801450e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014510:	fb02 f303 	mul.w	r3, r2, r3
 8014514:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801451c:	461a      	mov	r2, r3
 801451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014520:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014524:	895b      	ldrh	r3, [r3, #10]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d008      	beq.n	801453c <find_volume+0x224>
 801452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801452c:	895b      	ldrh	r3, [r3, #10]
 801452e:	461a      	mov	r2, r3
 8014530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014532:	895b      	ldrh	r3, [r3, #10]
 8014534:	3b01      	subs	r3, #1
 8014536:	4013      	ands	r3, r2
 8014538:	2b00      	cmp	r3, #0
 801453a:	d001      	beq.n	8014540 <find_volume+0x228>
 801453c:	230d      	movs	r3, #13
 801453e:	e12f      	b.n	80147a0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014542:	3334      	adds	r3, #52	@ 0x34
 8014544:	3311      	adds	r3, #17
 8014546:	4618      	mov	r0, r3
 8014548:	f7fe f8ee 	bl	8012728 <ld_word>
 801454c:	4603      	mov	r3, r0
 801454e:	461a      	mov	r2, r3
 8014550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014552:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014556:	891b      	ldrh	r3, [r3, #8]
 8014558:	f003 030f 	and.w	r3, r3, #15
 801455c:	b29b      	uxth	r3, r3
 801455e:	2b00      	cmp	r3, #0
 8014560:	d001      	beq.n	8014566 <find_volume+0x24e>
 8014562:	230d      	movs	r3, #13
 8014564:	e11c      	b.n	80147a0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014568:	3334      	adds	r3, #52	@ 0x34
 801456a:	3313      	adds	r3, #19
 801456c:	4618      	mov	r0, r3
 801456e:	f7fe f8db 	bl	8012728 <ld_word>
 8014572:	4603      	mov	r3, r0
 8014574:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014578:	2b00      	cmp	r3, #0
 801457a:	d106      	bne.n	801458a <find_volume+0x272>
 801457c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801457e:	3334      	adds	r3, #52	@ 0x34
 8014580:	3320      	adds	r3, #32
 8014582:	4618      	mov	r0, r3
 8014584:	f7fe f8e8 	bl	8012758 <ld_dword>
 8014588:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801458a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801458c:	3334      	adds	r3, #52	@ 0x34
 801458e:	330e      	adds	r3, #14
 8014590:	4618      	mov	r0, r3
 8014592:	f7fe f8c9 	bl	8012728 <ld_word>
 8014596:	4603      	mov	r3, r0
 8014598:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801459a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801459c:	2b00      	cmp	r3, #0
 801459e:	d101      	bne.n	80145a4 <find_volume+0x28c>
 80145a0:	230d      	movs	r3, #13
 80145a2:	e0fd      	b.n	80147a0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80145a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80145a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145a8:	4413      	add	r3, r2
 80145aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145ac:	8912      	ldrh	r2, [r2, #8]
 80145ae:	0912      	lsrs	r2, r2, #4
 80145b0:	b292      	uxth	r2, r2
 80145b2:	4413      	add	r3, r2
 80145b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80145b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80145b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d204      	bcs.n	80145c8 <find_volume+0x2b0>
 80145be:	230d      	movs	r3, #13
 80145c0:	e0ee      	b.n	80147a0 <find_volume+0x488>
 80145c2:	bf00      	nop
 80145c4:	20001058 	.word	0x20001058
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80145c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80145ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145cc:	1ad3      	subs	r3, r2, r3
 80145ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145d0:	8952      	ldrh	r2, [r2, #10]
 80145d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80145d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80145d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d101      	bne.n	80145e2 <find_volume+0x2ca>
 80145de:	230d      	movs	r3, #13
 80145e0:	e0de      	b.n	80147a0 <find_volume+0x488>
		fmt = FS_FAT32;
 80145e2:	2303      	movs	r3, #3
 80145e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80145e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d802      	bhi.n	80145f8 <find_volume+0x2e0>
 80145f2:	2302      	movs	r3, #2
 80145f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80145f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80145fe:	4293      	cmp	r3, r2
 8014600:	d802      	bhi.n	8014608 <find_volume+0x2f0>
 8014602:	2301      	movs	r3, #1
 8014604:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801460a:	1c9a      	adds	r2, r3, #2
 801460c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801460e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014612:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014614:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014616:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801461a:	441a      	add	r2, r3
 801461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801461e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014620:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014624:	441a      	add	r2, r3
 8014626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014628:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 801462a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801462e:	2b03      	cmp	r3, #3
 8014630:	d11e      	bne.n	8014670 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014634:	3334      	adds	r3, #52	@ 0x34
 8014636:	332a      	adds	r3, #42	@ 0x2a
 8014638:	4618      	mov	r0, r3
 801463a:	f7fe f875 	bl	8012728 <ld_word>
 801463e:	4603      	mov	r3, r0
 8014640:	2b00      	cmp	r3, #0
 8014642:	d001      	beq.n	8014648 <find_volume+0x330>
 8014644:	230d      	movs	r3, #13
 8014646:	e0ab      	b.n	80147a0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801464a:	891b      	ldrh	r3, [r3, #8]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d001      	beq.n	8014654 <find_volume+0x33c>
 8014650:	230d      	movs	r3, #13
 8014652:	e0a5      	b.n	80147a0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014656:	3334      	adds	r3, #52	@ 0x34
 8014658:	332c      	adds	r3, #44	@ 0x2c
 801465a:	4618      	mov	r0, r3
 801465c:	f7fe f87c 	bl	8012758 <ld_dword>
 8014660:	4602      	mov	r2, r0
 8014662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014664:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014668:	699b      	ldr	r3, [r3, #24]
 801466a:	009b      	lsls	r3, r3, #2
 801466c:	647b      	str	r3, [r7, #68]	@ 0x44
 801466e:	e01f      	b.n	80146b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014672:	891b      	ldrh	r3, [r3, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d101      	bne.n	801467c <find_volume+0x364>
 8014678:	230d      	movs	r3, #13
 801467a:	e091      	b.n	80147a0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801467e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014682:	441a      	add	r2, r3
 8014684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014686:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014688:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801468c:	2b02      	cmp	r3, #2
 801468e:	d103      	bne.n	8014698 <find_volume+0x380>
 8014690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014692:	699b      	ldr	r3, [r3, #24]
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	e00a      	b.n	80146ae <find_volume+0x396>
 8014698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801469a:	699a      	ldr	r2, [r3, #24]
 801469c:	4613      	mov	r3, r2
 801469e:	005b      	lsls	r3, r3, #1
 80146a0:	4413      	add	r3, r2
 80146a2:	085a      	lsrs	r2, r3, #1
 80146a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146a6:	699b      	ldr	r3, [r3, #24]
 80146a8:	f003 0301 	and.w	r3, r3, #1
 80146ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80146ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80146b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146b2:	69da      	ldr	r2, [r3, #28]
 80146b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80146ba:	0a5b      	lsrs	r3, r3, #9
 80146bc:	429a      	cmp	r2, r3
 80146be:	d201      	bcs.n	80146c4 <find_volume+0x3ac>
 80146c0:	230d      	movs	r3, #13
 80146c2:	e06d      	b.n	80147a0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80146c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146c6:	f04f 32ff 	mov.w	r2, #4294967295
 80146ca:	615a      	str	r2, [r3, #20]
 80146cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146ce:	695a      	ldr	r2, [r3, #20]
 80146d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80146d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146d6:	2280      	movs	r2, #128	@ 0x80
 80146d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80146da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80146de:	2b03      	cmp	r3, #3
 80146e0:	d149      	bne.n	8014776 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80146e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146e4:	3334      	adds	r3, #52	@ 0x34
 80146e6:	3330      	adds	r3, #48	@ 0x30
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fe f81d 	bl	8012728 <ld_word>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b01      	cmp	r3, #1
 80146f2:	d140      	bne.n	8014776 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80146f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146f6:	3301      	adds	r3, #1
 80146f8:	4619      	mov	r1, r3
 80146fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80146fc:	f7fe fac4 	bl	8012c88 <move_window>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d137      	bne.n	8014776 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014708:	2200      	movs	r2, #0
 801470a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801470c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801470e:	3334      	adds	r3, #52	@ 0x34
 8014710:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014714:	4618      	mov	r0, r3
 8014716:	f7fe f807 	bl	8012728 <ld_word>
 801471a:	4603      	mov	r3, r0
 801471c:	461a      	mov	r2, r3
 801471e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014722:	429a      	cmp	r2, r3
 8014724:	d127      	bne.n	8014776 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014728:	3334      	adds	r3, #52	@ 0x34
 801472a:	4618      	mov	r0, r3
 801472c:	f7fe f814 	bl	8012758 <ld_dword>
 8014730:	4603      	mov	r3, r0
 8014732:	4a1d      	ldr	r2, [pc, #116]	@ (80147a8 <find_volume+0x490>)
 8014734:	4293      	cmp	r3, r2
 8014736:	d11e      	bne.n	8014776 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801473a:	3334      	adds	r3, #52	@ 0x34
 801473c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014740:	4618      	mov	r0, r3
 8014742:	f7fe f809 	bl	8012758 <ld_dword>
 8014746:	4603      	mov	r3, r0
 8014748:	4a18      	ldr	r2, [pc, #96]	@ (80147ac <find_volume+0x494>)
 801474a:	4293      	cmp	r3, r2
 801474c:	d113      	bne.n	8014776 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014750:	3334      	adds	r3, #52	@ 0x34
 8014752:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8014756:	4618      	mov	r0, r3
 8014758:	f7fd fffe 	bl	8012758 <ld_dword>
 801475c:	4602      	mov	r2, r0
 801475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014760:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014764:	3334      	adds	r3, #52	@ 0x34
 8014766:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801476a:	4618      	mov	r0, r3
 801476c:	f7fd fff4 	bl	8012758 <ld_dword>
 8014770:	4602      	mov	r2, r0
 8014772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014774:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014778:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801477c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801477e:	4b0c      	ldr	r3, [pc, #48]	@ (80147b0 <find_volume+0x498>)
 8014780:	881b      	ldrh	r3, [r3, #0]
 8014782:	3301      	adds	r3, #1
 8014784:	b29a      	uxth	r2, r3
 8014786:	4b0a      	ldr	r3, [pc, #40]	@ (80147b0 <find_volume+0x498>)
 8014788:	801a      	strh	r2, [r3, #0]
 801478a:	4b09      	ldr	r3, [pc, #36]	@ (80147b0 <find_volume+0x498>)
 801478c:	881a      	ldrh	r2, [r3, #0]
 801478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014790:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8014792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014794:	4a07      	ldr	r2, [pc, #28]	@ (80147b4 <find_volume+0x49c>)
 8014796:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014798:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801479a:	f7fe fa0d 	bl	8012bb8 <clear_lock>
#endif
	return FR_OK;
 801479e:	2300      	movs	r3, #0
}
 80147a0:	4618      	mov	r0, r3
 80147a2:	3758      	adds	r7, #88	@ 0x58
 80147a4:	46bd      	mov	sp, r7
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	41615252 	.word	0x41615252
 80147ac:	61417272 	.word	0x61417272
 80147b0:	20001060 	.word	0x20001060
 80147b4:	20001084 	.word	0x20001084

080147b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b084      	sub	sp, #16
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80147c2:	2309      	movs	r3, #9
 80147c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d01c      	beq.n	8014806 <validate+0x4e>
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d018      	beq.n	8014806 <validate+0x4e>
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d013      	beq.n	8014806 <validate+0x4e>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	889a      	ldrh	r2, [r3, #4]
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	88db      	ldrh	r3, [r3, #6]
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d10c      	bne.n	8014806 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	785b      	ldrb	r3, [r3, #1]
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7fd fef8 	bl	80125e8 <disk_status>
 80147f8:	4603      	mov	r3, r0
 80147fa:	f003 0301 	and.w	r3, r3, #1
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d101      	bne.n	8014806 <validate+0x4e>
			res = FR_OK;
 8014802:	2300      	movs	r3, #0
 8014804:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014806:	7bfb      	ldrb	r3, [r7, #15]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d102      	bne.n	8014812 <validate+0x5a>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	e000      	b.n	8014814 <validate+0x5c>
 8014812:	2300      	movs	r3, #0
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	6013      	str	r3, [r2, #0]
	return res;
 8014818:	7bfb      	ldrb	r3, [r7, #15]
}
 801481a:	4618      	mov	r0, r3
 801481c:	3710      	adds	r7, #16
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
	...

08014824 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b088      	sub	sp, #32
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	4613      	mov	r3, r2
 8014830:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014836:	f107 0310 	add.w	r3, r7, #16
 801483a:	4618      	mov	r0, r3
 801483c:	f7ff fcd1 	bl	80141e2 <get_ldnumber>
 8014840:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014842:	69fb      	ldr	r3, [r7, #28]
 8014844:	2b00      	cmp	r3, #0
 8014846:	da01      	bge.n	801484c <f_mount+0x28>
 8014848:	230b      	movs	r3, #11
 801484a:	e02b      	b.n	80148a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801484c:	4a17      	ldr	r2, [pc, #92]	@ (80148ac <f_mount+0x88>)
 801484e:	69fb      	ldr	r3, [r7, #28]
 8014850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014854:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d005      	beq.n	8014868 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801485c:	69b8      	ldr	r0, [r7, #24]
 801485e:	f7fe f9ab 	bl	8012bb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	2200      	movs	r2, #0
 8014866:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d002      	beq.n	8014874 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2200      	movs	r2, #0
 8014872:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014874:	68fa      	ldr	r2, [r7, #12]
 8014876:	490d      	ldr	r1, [pc, #52]	@ (80148ac <f_mount+0x88>)
 8014878:	69fb      	ldr	r3, [r7, #28]
 801487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d002      	beq.n	801488a <f_mount+0x66>
 8014884:	79fb      	ldrb	r3, [r7, #7]
 8014886:	2b01      	cmp	r3, #1
 8014888:	d001      	beq.n	801488e <f_mount+0x6a>
 801488a:	2300      	movs	r3, #0
 801488c:	e00a      	b.n	80148a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801488e:	f107 010c 	add.w	r1, r7, #12
 8014892:	f107 0308 	add.w	r3, r7, #8
 8014896:	2200      	movs	r2, #0
 8014898:	4618      	mov	r0, r3
 801489a:	f7ff fd3d 	bl	8014318 <find_volume>
 801489e:	4603      	mov	r3, r0
 80148a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80148a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3720      	adds	r7, #32
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20001058 	.word	0x20001058

080148b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b09a      	sub	sp, #104	@ 0x68
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	4613      	mov	r3, r2
 80148bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d101      	bne.n	80148c8 <f_open+0x18>
 80148c4:	2309      	movs	r3, #9
 80148c6:	e1a9      	b.n	8014c1c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80148c8:	79fb      	ldrb	r3, [r7, #7]
 80148ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80148ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80148d0:	79fa      	ldrb	r2, [r7, #7]
 80148d2:	f107 0114 	add.w	r1, r7, #20
 80148d6:	f107 0308 	add.w	r3, r7, #8
 80148da:	4618      	mov	r0, r3
 80148dc:	f7ff fd1c 	bl	8014318 <find_volume>
 80148e0:	4603      	mov	r3, r0
 80148e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80148e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f040 818d 	bne.w	8014c0a <f_open+0x35a>
		dj.obj.fs = fs;
 80148f0:	697b      	ldr	r3, [r7, #20]
 80148f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80148f4:	68ba      	ldr	r2, [r7, #8]
 80148f6:	f107 0318 	add.w	r3, r7, #24
 80148fa:	4611      	mov	r1, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7ff fbff 	bl	8014100 <follow_path>
 8014902:	4603      	mov	r3, r0
 8014904:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014908:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801490c:	2b00      	cmp	r3, #0
 801490e:	d118      	bne.n	8014942 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014910:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014914:	b25b      	sxtb	r3, r3
 8014916:	2b00      	cmp	r3, #0
 8014918:	da03      	bge.n	8014922 <f_open+0x72>
				res = FR_INVALID_NAME;
 801491a:	2306      	movs	r3, #6
 801491c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014920:	e00f      	b.n	8014942 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014922:	79fb      	ldrb	r3, [r7, #7]
 8014924:	2b01      	cmp	r3, #1
 8014926:	bf8c      	ite	hi
 8014928:	2301      	movhi	r3, #1
 801492a:	2300      	movls	r3, #0
 801492c:	b2db      	uxtb	r3, r3
 801492e:	461a      	mov	r2, r3
 8014930:	f107 0318 	add.w	r3, r7, #24
 8014934:	4611      	mov	r1, r2
 8014936:	4618      	mov	r0, r3
 8014938:	f7fd fff6 	bl	8012928 <chk_lock>
 801493c:	4603      	mov	r3, r0
 801493e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014942:	79fb      	ldrb	r3, [r7, #7]
 8014944:	f003 031c 	and.w	r3, r3, #28
 8014948:	2b00      	cmp	r3, #0
 801494a:	d07f      	beq.n	8014a4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801494c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014950:	2b00      	cmp	r3, #0
 8014952:	d017      	beq.n	8014984 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014954:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014958:	2b04      	cmp	r3, #4
 801495a:	d10e      	bne.n	801497a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801495c:	f7fe f840 	bl	80129e0 <enq_lock>
 8014960:	4603      	mov	r3, r0
 8014962:	2b00      	cmp	r3, #0
 8014964:	d006      	beq.n	8014974 <f_open+0xc4>
 8014966:	f107 0318 	add.w	r3, r7, #24
 801496a:	4618      	mov	r0, r3
 801496c:	f7ff f918 	bl	8013ba0 <dir_register>
 8014970:	4603      	mov	r3, r0
 8014972:	e000      	b.n	8014976 <f_open+0xc6>
 8014974:	2312      	movs	r3, #18
 8014976:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801497a:	79fb      	ldrb	r3, [r7, #7]
 801497c:	f043 0308 	orr.w	r3, r3, #8
 8014980:	71fb      	strb	r3, [r7, #7]
 8014982:	e010      	b.n	80149a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014984:	7fbb      	ldrb	r3, [r7, #30]
 8014986:	f003 0311 	and.w	r3, r3, #17
 801498a:	2b00      	cmp	r3, #0
 801498c:	d003      	beq.n	8014996 <f_open+0xe6>
					res = FR_DENIED;
 801498e:	2307      	movs	r3, #7
 8014990:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014994:	e007      	b.n	80149a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014996:	79fb      	ldrb	r3, [r7, #7]
 8014998:	f003 0304 	and.w	r3, r3, #4
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <f_open+0xf6>
 80149a0:	2308      	movs	r3, #8
 80149a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80149a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d168      	bne.n	8014a80 <f_open+0x1d0>
 80149ae:	79fb      	ldrb	r3, [r7, #7]
 80149b0:	f003 0308 	and.w	r3, r3, #8
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d063      	beq.n	8014a80 <f_open+0x1d0>
				dw = GET_FATTIME();
 80149b8:	f7fa faee 	bl	800ef98 <get_fattime>
 80149bc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80149be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c0:	330e      	adds	r3, #14
 80149c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7fd ff05 	bl	80127d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80149ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149cc:	3316      	adds	r3, #22
 80149ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fd feff 	bl	80127d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80149d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149d8:	330b      	adds	r3, #11
 80149da:	2220      	movs	r2, #32
 80149dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80149e2:	4611      	mov	r1, r2
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7fe fe53 	bl	8013690 <ld_clust>
 80149ea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80149f0:	2200      	movs	r2, #0
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7fe fe6b 	bl	80136ce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80149f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149fa:	331c      	adds	r3, #28
 80149fc:	2100      	movs	r1, #0
 80149fe:	4618      	mov	r0, r3
 8014a00:	f7fd fee8 	bl	80127d4 <st_dword>
					fs->wflag = 1;
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	2201      	movs	r2, #1
 8014a08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d037      	beq.n	8014a80 <f_open+0x1d0>
						dw = fs->winsect;
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a14:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014a16:	f107 0318 	add.w	r3, r7, #24
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fe fb7e 	bl	8013120 <remove_chain>
 8014a24:	4603      	mov	r3, r0
 8014a26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8014a2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d126      	bne.n	8014a80 <f_open+0x1d0>
							res = move_window(fs, dw);
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fe f926 	bl	8012c88 <move_window>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a46:	3a01      	subs	r2, #1
 8014a48:	611a      	str	r2, [r3, #16]
 8014a4a:	e019      	b.n	8014a80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d115      	bne.n	8014a80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014a54:	7fbb      	ldrb	r3, [r7, #30]
 8014a56:	f003 0310 	and.w	r3, r3, #16
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d003      	beq.n	8014a66 <f_open+0x1b6>
					res = FR_NO_FILE;
 8014a5e:	2304      	movs	r3, #4
 8014a60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014a64:	e00c      	b.n	8014a80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014a66:	79fb      	ldrb	r3, [r7, #7]
 8014a68:	f003 0302 	and.w	r3, r3, #2
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d007      	beq.n	8014a80 <f_open+0x1d0>
 8014a70:	7fbb      	ldrb	r3, [r7, #30]
 8014a72:	f003 0301 	and.w	r3, r3, #1
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d002      	beq.n	8014a80 <f_open+0x1d0>
						res = FR_DENIED;
 8014a7a:	2307      	movs	r3, #7
 8014a7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014a80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d126      	bne.n	8014ad6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014a88:	79fb      	ldrb	r3, [r7, #7]
 8014a8a:	f003 0308 	and.w	r3, r3, #8
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d003      	beq.n	8014a9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8014a92:	79fb      	ldrb	r3, [r7, #7]
 8014a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8014aa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014aa8:	79fb      	ldrb	r3, [r7, #7]
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	bf8c      	ite	hi
 8014aae:	2301      	movhi	r3, #1
 8014ab0:	2300      	movls	r3, #0
 8014ab2:	b2db      	uxtb	r3, r3
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	f107 0318 	add.w	r3, r7, #24
 8014aba:	4611      	mov	r1, r2
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fd ffb1 	bl	8012a24 <inc_lock>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	691b      	ldr	r3, [r3, #16]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d102      	bne.n	8014ad6 <f_open+0x226>
 8014ad0:	2302      	movs	r3, #2
 8014ad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f040 8095 	bne.w	8014c0a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014ae4:	4611      	mov	r1, r2
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fe fdd2 	bl	8013690 <ld_clust>
 8014aec:	4602      	mov	r2, r0
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014af4:	331c      	adds	r3, #28
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fd fe2e 	bl	8012758 <ld_dword>
 8014afc:	4602      	mov	r2, r0
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	2200      	movs	r2, #0
 8014b06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014b08:	697a      	ldr	r2, [r7, #20]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	88da      	ldrh	r2, [r3, #6]
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	79fa      	ldrb	r2, [r7, #7]
 8014b1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2200      	movs	r2, #0
 8014b26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	3330      	adds	r3, #48	@ 0x30
 8014b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b36:	2100      	movs	r1, #0
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fd fe98 	bl	801286e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014b3e:	79fb      	ldrb	r3, [r7, #7]
 8014b40:	f003 0320 	and.w	r3, r3, #32
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d060      	beq.n	8014c0a <f_open+0x35a>
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d05c      	beq.n	8014c0a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	68da      	ldr	r2, [r3, #12]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	895b      	ldrh	r3, [r3, #10]
 8014b5c:	025b      	lsls	r3, r3, #9
 8014b5e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b6c:	e016      	b.n	8014b9c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fe f943 	bl	8012dfe <get_fat>
 8014b78:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d802      	bhi.n	8014b86 <f_open+0x2d6>
 8014b80:	2302      	movs	r3, #2
 8014b82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b8c:	d102      	bne.n	8014b94 <f_open+0x2e4>
 8014b8e:	2301      	movs	r3, #1
 8014b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014b94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b98:	1ad3      	subs	r3, r2, r3
 8014b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d103      	bne.n	8014bac <f_open+0x2fc>
 8014ba4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d8e0      	bhi.n	8014b6e <f_open+0x2be>
				}
				fp->clust = clst;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014bb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014bb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d127      	bne.n	8014c0a <f_open+0x35a>
 8014bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d022      	beq.n	8014c0a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7fe f8f9 	bl	8012dc0 <clust2sect>
 8014bce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d103      	bne.n	8014bde <f_open+0x32e>
						res = FR_INT_ERR;
 8014bd6:	2302      	movs	r3, #2
 8014bd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014bdc:	e015      	b.n	8014c0a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014be0:	0a5a      	lsrs	r2, r3, #9
 8014be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014be4:	441a      	add	r2, r3
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	7858      	ldrb	r0, [r3, #1]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	6a1a      	ldr	r2, [r3, #32]
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	f7fd fd37 	bl	801266c <disk_read>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d002      	beq.n	8014c0a <f_open+0x35a>
 8014c04:	2301      	movs	r3, #1
 8014c06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d002      	beq.n	8014c18 <f_open+0x368>
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	2200      	movs	r2, #0
 8014c16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014c18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3768      	adds	r7, #104	@ 0x68
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b08c      	sub	sp, #48	@ 0x30
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
 8014c30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	f107 0210 	add.w	r2, r7, #16
 8014c42:	4611      	mov	r1, r2
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7ff fdb7 	bl	80147b8 <validate>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d107      	bne.n	8014c68 <f_write+0x44>
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	7d5b      	ldrb	r3, [r3, #21]
 8014c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014c60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d002      	beq.n	8014c6e <f_write+0x4a>
 8014c68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014c6c:	e14b      	b.n	8014f06 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	7d1b      	ldrb	r3, [r3, #20]
 8014c72:	f003 0302 	and.w	r3, r3, #2
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d101      	bne.n	8014c7e <f_write+0x5a>
 8014c7a:	2307      	movs	r3, #7
 8014c7c:	e143      	b.n	8014f06 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	699a      	ldr	r2, [r3, #24]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	441a      	add	r2, r3
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	699b      	ldr	r3, [r3, #24]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	f080 812d 	bcs.w	8014eea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	699b      	ldr	r3, [r3, #24]
 8014c94:	43db      	mvns	r3, r3
 8014c96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014c98:	e127      	b.n	8014eea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	699b      	ldr	r3, [r3, #24]
 8014c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	f040 80e3 	bne.w	8014e6e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	699b      	ldr	r3, [r3, #24]
 8014cac:	0a5b      	lsrs	r3, r3, #9
 8014cae:	693a      	ldr	r2, [r7, #16]
 8014cb0:	8952      	ldrh	r2, [r2, #10]
 8014cb2:	3a01      	subs	r2, #1
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d143      	bne.n	8014d46 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	699b      	ldr	r3, [r3, #24]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d10c      	bne.n	8014ce0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	689b      	ldr	r3, [r3, #8]
 8014cca:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d11a      	bne.n	8014d08 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7fe fa87 	bl	80131ea <create_chain>
 8014cdc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014cde:	e013      	b.n	8014d08 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d007      	beq.n	8014cf8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	699b      	ldr	r3, [r3, #24]
 8014cec:	4619      	mov	r1, r3
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f7fe fb13 	bl	801331a <clmt_clust>
 8014cf4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014cf6:	e007      	b.n	8014d08 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014cf8:	68fa      	ldr	r2, [r7, #12]
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	69db      	ldr	r3, [r3, #28]
 8014cfe:	4619      	mov	r1, r3
 8014d00:	4610      	mov	r0, r2
 8014d02:	f7fe fa72 	bl	80131ea <create_chain>
 8014d06:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	f000 80f2 	beq.w	8014ef4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d12:	2b01      	cmp	r3, #1
 8014d14:	d104      	bne.n	8014d20 <f_write+0xfc>
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2202      	movs	r2, #2
 8014d1a:	755a      	strb	r2, [r3, #21]
 8014d1c:	2302      	movs	r3, #2
 8014d1e:	e0f2      	b.n	8014f06 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d26:	d104      	bne.n	8014d32 <f_write+0x10e>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2201      	movs	r2, #1
 8014d2c:	755a      	strb	r2, [r3, #21]
 8014d2e:	2301      	movs	r3, #1
 8014d30:	e0e9      	b.n	8014f06 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d36:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	689b      	ldr	r3, [r3, #8]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d102      	bne.n	8014d46 <f_write+0x122>
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d44:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	7d1b      	ldrb	r3, [r3, #20]
 8014d4a:	b25b      	sxtb	r3, r3
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	da18      	bge.n	8014d82 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	7858      	ldrb	r0, [r3, #1]
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	6a1a      	ldr	r2, [r3, #32]
 8014d5e:	2301      	movs	r3, #1
 8014d60:	f7fd fca4 	bl	80126ac <disk_write>
 8014d64:	4603      	mov	r3, r0
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d004      	beq.n	8014d74 <f_write+0x150>
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	2201      	movs	r2, #1
 8014d6e:	755a      	strb	r2, [r3, #21]
 8014d70:	2301      	movs	r3, #1
 8014d72:	e0c8      	b.n	8014f06 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	7d1b      	ldrb	r3, [r3, #20]
 8014d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014d7c:	b2da      	uxtb	r2, r3
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014d82:	693a      	ldr	r2, [r7, #16]
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	69db      	ldr	r3, [r3, #28]
 8014d88:	4619      	mov	r1, r3
 8014d8a:	4610      	mov	r0, r2
 8014d8c:	f7fe f818 	bl	8012dc0 <clust2sect>
 8014d90:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014d92:	697b      	ldr	r3, [r7, #20]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d104      	bne.n	8014da2 <f_write+0x17e>
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2202      	movs	r2, #2
 8014d9c:	755a      	strb	r2, [r3, #21]
 8014d9e:	2302      	movs	r3, #2
 8014da0:	e0b1      	b.n	8014f06 <f_write+0x2e2>
			sect += csect;
 8014da2:	697a      	ldr	r2, [r7, #20]
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	4413      	add	r3, r2
 8014da8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	0a5b      	lsrs	r3, r3, #9
 8014dae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014db0:	6a3b      	ldr	r3, [r7, #32]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d03c      	beq.n	8014e30 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014db6:	69ba      	ldr	r2, [r7, #24]
 8014db8:	6a3b      	ldr	r3, [r7, #32]
 8014dba:	4413      	add	r3, r2
 8014dbc:	693a      	ldr	r2, [r7, #16]
 8014dbe:	8952      	ldrh	r2, [r2, #10]
 8014dc0:	4293      	cmp	r3, r2
 8014dc2:	d905      	bls.n	8014dd0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	895b      	ldrh	r3, [r3, #10]
 8014dc8:	461a      	mov	r2, r3
 8014dca:	69bb      	ldr	r3, [r7, #24]
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014dd0:	693b      	ldr	r3, [r7, #16]
 8014dd2:	7858      	ldrb	r0, [r3, #1]
 8014dd4:	6a3b      	ldr	r3, [r7, #32]
 8014dd6:	697a      	ldr	r2, [r7, #20]
 8014dd8:	69f9      	ldr	r1, [r7, #28]
 8014dda:	f7fd fc67 	bl	80126ac <disk_write>
 8014dde:	4603      	mov	r3, r0
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d004      	beq.n	8014dee <f_write+0x1ca>
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	2201      	movs	r2, #1
 8014de8:	755a      	strb	r2, [r3, #21]
 8014dea:	2301      	movs	r3, #1
 8014dec:	e08b      	b.n	8014f06 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	6a1a      	ldr	r2, [r3, #32]
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	1ad3      	subs	r3, r2, r3
 8014df6:	6a3a      	ldr	r2, [r7, #32]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d915      	bls.n	8014e28 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	6a1a      	ldr	r2, [r3, #32]
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	1ad3      	subs	r3, r2, r3
 8014e0a:	025b      	lsls	r3, r3, #9
 8014e0c:	69fa      	ldr	r2, [r7, #28]
 8014e0e:	4413      	add	r3, r2
 8014e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014e14:	4619      	mov	r1, r3
 8014e16:	f7fd fd09 	bl	801282c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	7d1b      	ldrb	r3, [r3, #20]
 8014e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014e22:	b2da      	uxtb	r2, r3
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014e28:	6a3b      	ldr	r3, [r7, #32]
 8014e2a:	025b      	lsls	r3, r3, #9
 8014e2c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014e2e:	e03f      	b.n	8014eb0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	6a1b      	ldr	r3, [r3, #32]
 8014e34:	697a      	ldr	r2, [r7, #20]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d016      	beq.n	8014e68 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	699a      	ldr	r2, [r3, #24]
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d210      	bcs.n	8014e68 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	7858      	ldrb	r0, [r3, #1]
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014e50:	2301      	movs	r3, #1
 8014e52:	697a      	ldr	r2, [r7, #20]
 8014e54:	f7fd fc0a 	bl	801266c <disk_read>
 8014e58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d004      	beq.n	8014e68 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2201      	movs	r2, #1
 8014e62:	755a      	strb	r2, [r3, #21]
 8014e64:	2301      	movs	r3, #1
 8014e66:	e04e      	b.n	8014f06 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	699b      	ldr	r3, [r3, #24]
 8014e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e76:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014e7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d901      	bls.n	8014e88 <f_write+0x264>
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	699b      	ldr	r3, [r3, #24]
 8014e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e96:	4413      	add	r3, r2
 8014e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e9a:	69f9      	ldr	r1, [r7, #28]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7fd fcc5 	bl	801282c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	7d1b      	ldrb	r3, [r3, #20]
 8014ea6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014eaa:	b2da      	uxtb	r2, r3
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014eb0:	69fa      	ldr	r2, [r7, #28]
 8014eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eb4:	4413      	add	r3, r2
 8014eb6:	61fb      	str	r3, [r7, #28]
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	699a      	ldr	r2, [r3, #24]
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ebe:	441a      	add	r2, r3
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	619a      	str	r2, [r3, #24]
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	68da      	ldr	r2, [r3, #12]
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	699b      	ldr	r3, [r3, #24]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	bf38      	it	cc
 8014ed0:	461a      	movcc	r2, r3
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	60da      	str	r2, [r3, #12]
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014edc:	441a      	add	r2, r3
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	601a      	str	r2, [r3, #0]
 8014ee2:	687a      	ldr	r2, [r7, #4]
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f47f aed4 	bne.w	8014c9a <f_write+0x76>
 8014ef2:	e000      	b.n	8014ef6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014ef4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	7d1b      	ldrb	r3, [r3, #20]
 8014efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014efe:	b2da      	uxtb	r2, r3
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014f04:	2300      	movs	r3, #0
}
 8014f06:	4618      	mov	r0, r3
 8014f08:	3730      	adds	r7, #48	@ 0x30
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}

08014f0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014f0e:	b580      	push	{r7, lr}
 8014f10:	b086      	sub	sp, #24
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f107 0208 	add.w	r2, r7, #8
 8014f1c:	4611      	mov	r1, r2
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7ff fc4a 	bl	80147b8 <validate>
 8014f24:	4603      	mov	r3, r0
 8014f26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014f28:	7dfb      	ldrb	r3, [r7, #23]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d168      	bne.n	8015000 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	7d1b      	ldrb	r3, [r3, #20]
 8014f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d062      	beq.n	8015000 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	7d1b      	ldrb	r3, [r3, #20]
 8014f3e:	b25b      	sxtb	r3, r3
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	da15      	bge.n	8014f70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	7858      	ldrb	r0, [r3, #1]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6a1a      	ldr	r2, [r3, #32]
 8014f52:	2301      	movs	r3, #1
 8014f54:	f7fd fbaa 	bl	80126ac <disk_write>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d001      	beq.n	8014f62 <f_sync+0x54>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	e04f      	b.n	8015002 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	7d1b      	ldrb	r3, [r3, #20]
 8014f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014f6a:	b2da      	uxtb	r2, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014f70:	f7fa f812 	bl	800ef98 <get_fattime>
 8014f74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014f76:	68ba      	ldr	r2, [r7, #8]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	4610      	mov	r0, r2
 8014f80:	f7fd fe82 	bl	8012c88 <move_window>
 8014f84:	4603      	mov	r3, r0
 8014f86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014f88:	7dfb      	ldrb	r3, [r7, #23]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d138      	bne.n	8015000 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	330b      	adds	r3, #11
 8014f98:	781a      	ldrb	r2, [r3, #0]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	330b      	adds	r3, #11
 8014f9e:	f042 0220 	orr.w	r2, r2, #32
 8014fa2:	b2d2      	uxtb	r2, r2
 8014fa4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6818      	ldr	r0, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	689b      	ldr	r3, [r3, #8]
 8014fae:	461a      	mov	r2, r3
 8014fb0:	68f9      	ldr	r1, [r7, #12]
 8014fb2:	f7fe fb8c 	bl	80136ce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	f103 021c 	add.w	r2, r3, #28
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	68db      	ldr	r3, [r3, #12]
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	4610      	mov	r0, r2
 8014fc4:	f7fd fc06 	bl	80127d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3316      	adds	r3, #22
 8014fcc:	6939      	ldr	r1, [r7, #16]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fd fc00 	bl	80127d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	3312      	adds	r3, #18
 8014fd8:	2100      	movs	r1, #0
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fd fbdf 	bl	801279e <st_word>
					fs->wflag = 1;
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7fd fe7b 	bl	8012ce4 <sync_fs>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	7d1b      	ldrb	r3, [r3, #20]
 8014ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014ffa:	b2da      	uxtb	r2, r3
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015000:	7dfb      	ldrb	r3, [r7, #23]
}
 8015002:	4618      	mov	r0, r3
 8015004:	3718      	adds	r7, #24
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b084      	sub	sp, #16
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7ff ff7b 	bl	8014f0e <f_sync>
 8015018:	4603      	mov	r3, r0
 801501a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801501c:	7bfb      	ldrb	r3, [r7, #15]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d118      	bne.n	8015054 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f107 0208 	add.w	r2, r7, #8
 8015028:	4611      	mov	r1, r2
 801502a:	4618      	mov	r0, r3
 801502c:	f7ff fbc4 	bl	80147b8 <validate>
 8015030:	4603      	mov	r3, r0
 8015032:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015034:	7bfb      	ldrb	r3, [r7, #15]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d10c      	bne.n	8015054 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	691b      	ldr	r3, [r3, #16]
 801503e:	4618      	mov	r0, r3
 8015040:	f7fd fd7e 	bl	8012b40 <dec_lock>
 8015044:	4603      	mov	r3, r0
 8015046:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8015048:	7bfb      	ldrb	r3, [r7, #15]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d102      	bne.n	8015054 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2200      	movs	r2, #0
 8015052:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015054:	7bfb      	ldrb	r3, [r7, #15]
}
 8015056:	4618      	mov	r0, r3
 8015058:	3710      	adds	r7, #16
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}

0801505e <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801505e:	b580      	push	{r7, lr}
 8015060:	b084      	sub	sp, #16
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
 8015066:	460b      	mov	r3, r1
 8015068:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801506a:	78fb      	ldrb	r3, [r7, #3]
 801506c:	2b0a      	cmp	r3, #10
 801506e:	d103      	bne.n	8015078 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8015070:	210d      	movs	r1, #13
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f7ff fff3 	bl	801505e <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2b00      	cmp	r3, #0
 8015082:	db25      	blt.n	80150d0 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	1c5a      	adds	r2, r3, #1
 8015088:	60fa      	str	r2, [r7, #12]
 801508a:	687a      	ldr	r2, [r7, #4]
 801508c:	4413      	add	r3, r2
 801508e:	78fa      	ldrb	r2, [r7, #3]
 8015090:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2b3c      	cmp	r3, #60	@ 0x3c
 8015096:	dd12      	ble.n	80150be <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6818      	ldr	r0, [r3, #0]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f103 010c 	add.w	r1, r3, #12
 80150a2:	68fa      	ldr	r2, [r7, #12]
 80150a4:	f107 0308 	add.w	r3, r7, #8
 80150a8:	f7ff fdbc 	bl	8014c24 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d101      	bne.n	80150b8 <putc_bfd+0x5a>
 80150b4:	2300      	movs	r3, #0
 80150b6:	e001      	b.n	80150bc <putc_bfd+0x5e>
 80150b8:	f04f 33ff 	mov.w	r3, #4294967295
 80150bc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	689b      	ldr	r3, [r3, #8]
 80150c8:	1c5a      	adds	r2, r3, #1
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	609a      	str	r2, [r3, #8]
 80150ce:	e000      	b.n	80150d2 <putc_bfd+0x74>
	if (i < 0) return;
 80150d0:	bf00      	nop
}
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	685b      	ldr	r3, [r3, #4]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	db16      	blt.n	8015116 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6818      	ldr	r0, [r3, #0]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f103 010c 	add.w	r1, r3, #12
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	461a      	mov	r2, r3
 80150f8:	f107 030c 	add.w	r3, r7, #12
 80150fc:	f7ff fd92 	bl	8014c24 <f_write>
 8015100:	4603      	mov	r3, r0
 8015102:	2b00      	cmp	r3, #0
 8015104:	d107      	bne.n	8015116 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	68fa      	ldr	r2, [r7, #12]
 801510c:	4293      	cmp	r3, r2
 801510e:	d102      	bne.n	8015116 <putc_flush+0x3e>
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	689b      	ldr	r3, [r3, #8]
 8015114:	e001      	b.n	801511a <putc_flush+0x42>
	return EOF;
 8015116:	f04f 33ff 	mov.w	r3, #4294967295
}
 801511a:	4618      	mov	r0, r3
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}

08015122 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015122:	b480      	push	{r7}
 8015124:	b083      	sub	sp, #12
 8015126:	af00      	add	r7, sp, #0
 8015128:	6078      	str	r0, [r7, #4]
 801512a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	683a      	ldr	r2, [r7, #0]
 8015130:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2200      	movs	r2, #0
 8015136:	605a      	str	r2, [r3, #4]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	685a      	ldr	r2, [r3, #4]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	609a      	str	r2, [r3, #8]
}
 8015140:	bf00      	nop
 8015142:	370c      	adds	r7, #12
 8015144:	46bd      	mov	sp, r7
 8015146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514a:	4770      	bx	lr

0801514c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801514c:	b40e      	push	{r1, r2, r3}
 801514e:	b580      	push	{r7, lr}
 8015150:	b0a7      	sub	sp, #156	@ 0x9c
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8015156:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801515a:	6879      	ldr	r1, [r7, #4]
 801515c:	4618      	mov	r0, r3
 801515e:	f7ff ffe0 	bl	8015122 <putc_init>

	va_start(arp, fmt);
 8015162:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8015166:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 8015168:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801516c:	1c5a      	adds	r2, r3, #1
 801516e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015172:	781b      	ldrb	r3, [r3, #0]
 8015174:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 8015178:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801517c:	2b00      	cmp	r3, #0
 801517e:	f000 81f2 	beq.w	8015566 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8015182:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015186:	2b25      	cmp	r3, #37	@ 0x25
 8015188:	d008      	beq.n	801519c <f_printf+0x50>
			putc_bfd(&pb, c);
 801518a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 801518e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015192:	4611      	mov	r1, r2
 8015194:	4618      	mov	r0, r3
 8015196:	f7ff ff62 	bl	801505e <putc_bfd>
			continue;
 801519a:	e1e3      	b.n	8015564 <f_printf+0x418>
		}
		w = f = 0;
 801519c:	2300      	movs	r3, #0
 801519e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80151a2:	2300      	movs	r3, #0
 80151a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 80151a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80151ac:	1c5a      	adds	r2, r3, #1
 80151ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80151b8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80151bc:	2b30      	cmp	r3, #48	@ 0x30
 80151be:	d10b      	bne.n	80151d8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80151c0:	2301      	movs	r3, #1
 80151c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80151c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80151ca:	1c5a      	adds	r2, r3, #1
 80151cc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80151d0:	781b      	ldrb	r3, [r3, #0]
 80151d2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80151d6:	e024      	b.n	8015222 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80151d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80151dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80151de:	d120      	bne.n	8015222 <f_printf+0xd6>
				f = 2; c = *fmt++;
 80151e0:	2302      	movs	r3, #2
 80151e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80151e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80151ea:	1c5a      	adds	r2, r3, #1
 80151ec:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80151f6:	e014      	b.n	8015222 <f_printf+0xd6>
			w = w * 10 + c - '0';
 80151f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80151fc:	4613      	mov	r3, r2
 80151fe:	009b      	lsls	r3, r3, #2
 8015200:	4413      	add	r3, r2
 8015202:	005b      	lsls	r3, r3, #1
 8015204:	461a      	mov	r2, r3
 8015206:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801520a:	4413      	add	r3, r2
 801520c:	3b30      	subs	r3, #48	@ 0x30
 801520e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 8015212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015216:	1c5a      	adds	r2, r3, #1
 8015218:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 8015222:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015226:	2b2f      	cmp	r3, #47	@ 0x2f
 8015228:	d903      	bls.n	8015232 <f_printf+0xe6>
 801522a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801522e:	2b39      	cmp	r3, #57	@ 0x39
 8015230:	d9e2      	bls.n	80151f8 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8015232:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015236:	2b6c      	cmp	r3, #108	@ 0x6c
 8015238:	d003      	beq.n	8015242 <f_printf+0xf6>
 801523a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801523e:	2b4c      	cmp	r3, #76	@ 0x4c
 8015240:	d10d      	bne.n	801525e <f_printf+0x112>
			f |= 4; c = *fmt++;
 8015242:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015246:	f043 0304 	orr.w	r3, r3, #4
 801524a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801524e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015252:	1c5a      	adds	r2, r3, #1
 8015254:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 801525e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8015262:	2b00      	cmp	r3, #0
 8015264:	f000 8181 	beq.w	801556a <f_printf+0x41e>
		d = c;
 8015268:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801526c:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 8015270:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015274:	2b60      	cmp	r3, #96	@ 0x60
 8015276:	d908      	bls.n	801528a <f_printf+0x13e>
 8015278:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801527c:	2b7a      	cmp	r3, #122	@ 0x7a
 801527e:	d804      	bhi.n	801528a <f_printf+0x13e>
 8015280:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015284:	3b20      	subs	r3, #32
 8015286:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 801528a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 801528e:	3b42      	subs	r3, #66	@ 0x42
 8015290:	2b16      	cmp	r3, #22
 8015292:	f200 8098 	bhi.w	80153c6 <f_printf+0x27a>
 8015296:	a201      	add	r2, pc, #4	@ (adr r2, 801529c <f_printf+0x150>)
 8015298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801529c:	080153a7 	.word	0x080153a7
 80152a0:	0801538f 	.word	0x0801538f
 80152a4:	080153b7 	.word	0x080153b7
 80152a8:	080153c7 	.word	0x080153c7
 80152ac:	080153c7 	.word	0x080153c7
 80152b0:	080153c7 	.word	0x080153c7
 80152b4:	080153c7 	.word	0x080153c7
 80152b8:	080153c7 	.word	0x080153c7
 80152bc:	080153c7 	.word	0x080153c7
 80152c0:	080153c7 	.word	0x080153c7
 80152c4:	080153c7 	.word	0x080153c7
 80152c8:	080153c7 	.word	0x080153c7
 80152cc:	080153c7 	.word	0x080153c7
 80152d0:	080153af 	.word	0x080153af
 80152d4:	080153c7 	.word	0x080153c7
 80152d8:	080153c7 	.word	0x080153c7
 80152dc:	080153c7 	.word	0x080153c7
 80152e0:	080152f9 	.word	0x080152f9
 80152e4:	080153c7 	.word	0x080153c7
 80152e8:	080153b7 	.word	0x080153b7
 80152ec:	080153c7 	.word	0x080153c7
 80152f0:	080153c7 	.word	0x080153c7
 80152f4:	080153bf 	.word	0x080153bf
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80152f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80152fa:	1d1a      	adds	r2, r3, #4
 80152fc:	67ba      	str	r2, [r7, #120]	@ 0x78
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 8015302:	2300      	movs	r3, #0
 8015304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015308:	e004      	b.n	8015314 <f_printf+0x1c8>
 801530a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801530e:	3301      	adds	r3, #1
 8015310:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015314:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801531a:	4413      	add	r3, r2
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d1f3      	bne.n	801530a <f_printf+0x1be>
			if (!(f & 2)) {
 8015322:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015326:	f003 0302 	and.w	r3, r3, #2
 801532a:	2b00      	cmp	r3, #0
 801532c:	d11a      	bne.n	8015364 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801532e:	e005      	b.n	801533c <f_printf+0x1f0>
 8015330:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015334:	2120      	movs	r1, #32
 8015336:	4618      	mov	r0, r3
 8015338:	f7ff fe91 	bl	801505e <putc_bfd>
 801533c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015340:	1c5a      	adds	r2, r3, #1
 8015342:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015346:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801534a:	429a      	cmp	r2, r3
 801534c:	d8f0      	bhi.n	8015330 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801534e:	e009      	b.n	8015364 <f_printf+0x218>
 8015350:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015352:	1c5a      	adds	r2, r3, #1
 8015354:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8015356:	781a      	ldrb	r2, [r3, #0]
 8015358:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801535c:	4611      	mov	r1, r2
 801535e:	4618      	mov	r0, r3
 8015360:	f7ff fe7d 	bl	801505e <putc_bfd>
 8015364:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d1f1      	bne.n	8015350 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801536c:	e005      	b.n	801537a <f_printf+0x22e>
 801536e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015372:	2120      	movs	r1, #32
 8015374:	4618      	mov	r0, r3
 8015376:	f7ff fe72 	bl	801505e <putc_bfd>
 801537a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801537e:	1c5a      	adds	r2, r3, #1
 8015380:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8015384:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015388:	429a      	cmp	r2, r3
 801538a:	d8f0      	bhi.n	801536e <f_printf+0x222>
			continue;
 801538c:	e0ea      	b.n	8015564 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801538e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015390:	1d1a      	adds	r2, r3, #4
 8015392:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	b2da      	uxtb	r2, r3
 8015398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801539c:	4611      	mov	r1, r2
 801539e:	4618      	mov	r0, r3
 80153a0:	f7ff fe5d 	bl	801505e <putc_bfd>
 80153a4:	e0de      	b.n	8015564 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 80153a6:	2302      	movs	r3, #2
 80153a8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80153ac:	e014      	b.n	80153d8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 80153ae:	2308      	movs	r3, #8
 80153b0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80153b4:	e010      	b.n	80153d8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80153b6:	230a      	movs	r3, #10
 80153b8:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80153bc:	e00c      	b.n	80153d8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80153be:	2310      	movs	r3, #16
 80153c0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80153c4:	e008      	b.n	80153d8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80153c6:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 80153ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80153ce:	4611      	mov	r1, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff fe44 	bl	801505e <putc_bfd>
 80153d6:	e0c5      	b.n	8015564 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80153d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80153dc:	f003 0304 	and.w	r3, r3, #4
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d004      	beq.n	80153ee <f_printf+0x2a2>
 80153e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153e6:	1d1a      	adds	r2, r3, #4
 80153e8:	67ba      	str	r2, [r7, #120]	@ 0x78
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	e00c      	b.n	8015408 <f_printf+0x2bc>
 80153ee:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80153f2:	2b44      	cmp	r3, #68	@ 0x44
 80153f4:	d104      	bne.n	8015400 <f_printf+0x2b4>
 80153f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153f8:	1d1a      	adds	r2, r3, #4
 80153fa:	67ba      	str	r2, [r7, #120]	@ 0x78
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	e003      	b.n	8015408 <f_printf+0x2bc>
 8015400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015402:	1d1a      	adds	r2, r3, #4
 8015404:	67ba      	str	r2, [r7, #120]	@ 0x78
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 801540c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015410:	2b44      	cmp	r3, #68	@ 0x44
 8015412:	d10e      	bne.n	8015432 <f_printf+0x2e6>
 8015414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015418:	2b00      	cmp	r3, #0
 801541a:	da0a      	bge.n	8015432 <f_printf+0x2e6>
			v = 0 - v;
 801541c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015420:	425b      	negs	r3, r3
 8015422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 8015426:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801542a:	f043 0308 	orr.w	r3, r3, #8
 801542e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 8015432:	2300      	movs	r3, #0
 8015434:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8015438:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 801543c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015440:	fbb3 f1f2 	udiv	r1, r3, r2
 8015444:	fb01 f202 	mul.w	r2, r1, r2
 8015448:	1a9b      	subs	r3, r3, r2
 801544a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 801544e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8015452:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8015456:	fbb2 f3f3 	udiv	r3, r2, r3
 801545a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801545e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015462:	2b09      	cmp	r3, #9
 8015464:	d90b      	bls.n	801547e <f_printf+0x332>
 8015466:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 801546a:	2b78      	cmp	r3, #120	@ 0x78
 801546c:	d101      	bne.n	8015472 <f_printf+0x326>
 801546e:	2227      	movs	r2, #39	@ 0x27
 8015470:	e000      	b.n	8015474 <f_printf+0x328>
 8015472:	2207      	movs	r2, #7
 8015474:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8015478:	4413      	add	r3, r2
 801547a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 801547e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015482:	1c5a      	adds	r2, r3, #1
 8015484:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8015488:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 801548c:	3230      	adds	r2, #48	@ 0x30
 801548e:	b2d2      	uxtb	r2, r2
 8015490:	3398      	adds	r3, #152	@ 0x98
 8015492:	443b      	add	r3, r7
 8015494:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8015498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801549c:	2b00      	cmp	r3, #0
 801549e:	d003      	beq.n	80154a8 <f_printf+0x35c>
 80154a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154a4:	2b1f      	cmp	r3, #31
 80154a6:	d9c7      	bls.n	8015438 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80154a8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80154ac:	f003 0308 	and.w	r3, r3, #8
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d009      	beq.n	80154c8 <f_printf+0x37c>
 80154b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154b8:	1c5a      	adds	r2, r3, #1
 80154ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80154be:	3398      	adds	r3, #152	@ 0x98
 80154c0:	443b      	add	r3, r7
 80154c2:	222d      	movs	r2, #45	@ 0x2d
 80154c4:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80154c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80154d0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80154d4:	f003 0301 	and.w	r3, r3, #1
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <f_printf+0x394>
 80154dc:	2330      	movs	r3, #48	@ 0x30
 80154de:	e000      	b.n	80154e2 <f_printf+0x396>
 80154e0:	2320      	movs	r3, #32
 80154e2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80154e6:	e007      	b.n	80154f8 <f_printf+0x3ac>
 80154e8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80154ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80154f0:	4611      	mov	r1, r2
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ff fdb3 	bl	801505e <putc_bfd>
 80154f8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80154fc:	f003 0302 	and.w	r3, r3, #2
 8015500:	2b00      	cmp	r3, #0
 8015502:	d108      	bne.n	8015516 <f_printf+0x3ca>
 8015504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015508:	1c5a      	adds	r2, r3, #1
 801550a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801550e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015512:	429a      	cmp	r2, r3
 8015514:	d8e8      	bhi.n	80154e8 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8015516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801551a:	3b01      	subs	r3, #1
 801551c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8015520:	f107 020c 	add.w	r2, r7, #12
 8015524:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015528:	4413      	add	r3, r2
 801552a:	781a      	ldrb	r2, [r3, #0]
 801552c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015530:	4611      	mov	r1, r2
 8015532:	4618      	mov	r0, r3
 8015534:	f7ff fd93 	bl	801505e <putc_bfd>
		} while (i);
 8015538:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801553c:	2b00      	cmp	r3, #0
 801553e:	d1ea      	bne.n	8015516 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8015540:	e007      	b.n	8015552 <f_printf+0x406>
 8015542:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8015546:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801554a:	4611      	mov	r1, r2
 801554c:	4618      	mov	r0, r3
 801554e:	f7ff fd86 	bl	801505e <putc_bfd>
 8015552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015556:	1c5a      	adds	r2, r3, #1
 8015558:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801555c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8015560:	429a      	cmp	r2, r3
 8015562:	d8ee      	bhi.n	8015542 <f_printf+0x3f6>
		c = *fmt++;
 8015564:	e600      	b.n	8015168 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8015566:	bf00      	nop
 8015568:	e000      	b.n	801556c <f_printf+0x420>
		if (!c) break;
 801556a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 801556c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff fdb1 	bl	80150d8 <putc_flush>
 8015576:	4603      	mov	r3, r0
}
 8015578:	4618      	mov	r0, r3
 801557a:	379c      	adds	r7, #156	@ 0x9c
 801557c:	46bd      	mov	sp, r7
 801557e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015582:	b003      	add	sp, #12
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop

08015588 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015588:	b480      	push	{r7}
 801558a:	b087      	sub	sp, #28
 801558c:	af00      	add	r7, sp, #0
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	60b9      	str	r1, [r7, #8]
 8015592:	4613      	mov	r3, r2
 8015594:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015596:	2301      	movs	r3, #1
 8015598:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801559a:	2300      	movs	r3, #0
 801559c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801559e:	4b1f      	ldr	r3, [pc, #124]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155a0:	7b9b      	ldrb	r3, [r3, #14]
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d831      	bhi.n	801560c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80155a8:	4b1c      	ldr	r3, [pc, #112]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155aa:	7b9b      	ldrb	r3, [r3, #14]
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	461a      	mov	r2, r3
 80155b0:	4b1a      	ldr	r3, [pc, #104]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155b2:	2100      	movs	r1, #0
 80155b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80155b6:	4b19      	ldr	r3, [pc, #100]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155b8:	7b9b      	ldrb	r3, [r3, #14]
 80155ba:	b2db      	uxtb	r3, r3
 80155bc:	4a17      	ldr	r2, [pc, #92]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4413      	add	r3, r2
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80155c6:	4b15      	ldr	r3, [pc, #84]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155c8:	7b9b      	ldrb	r3, [r3, #14]
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	461a      	mov	r2, r3
 80155ce:	4b13      	ldr	r3, [pc, #76]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155d0:	4413      	add	r3, r2
 80155d2:	79fa      	ldrb	r2, [r7, #7]
 80155d4:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80155d6:	4b11      	ldr	r3, [pc, #68]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155d8:	7b9b      	ldrb	r3, [r3, #14]
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	1c5a      	adds	r2, r3, #1
 80155de:	b2d1      	uxtb	r1, r2
 80155e0:	4a0e      	ldr	r2, [pc, #56]	@ (801561c <FATFS_LinkDriverEx+0x94>)
 80155e2:	7391      	strb	r1, [r2, #14]
 80155e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80155e6:	7dbb      	ldrb	r3, [r7, #22]
 80155e8:	3330      	adds	r3, #48	@ 0x30
 80155ea:	b2da      	uxtb	r2, r3
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	3301      	adds	r3, #1
 80155f4:	223a      	movs	r2, #58	@ 0x3a
 80155f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80155f8:	68bb      	ldr	r3, [r7, #8]
 80155fa:	3302      	adds	r3, #2
 80155fc:	222f      	movs	r2, #47	@ 0x2f
 80155fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	3303      	adds	r3, #3
 8015604:	2200      	movs	r2, #0
 8015606:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015608:	2300      	movs	r3, #0
 801560a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801560c:	7dfb      	ldrb	r3, [r7, #23]
}
 801560e:	4618      	mov	r0, r3
 8015610:	371c      	adds	r7, #28
 8015612:	46bd      	mov	sp, r7
 8015614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015618:	4770      	bx	lr
 801561a:	bf00      	nop
 801561c:	20001284 	.word	0x20001284

08015620 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b082      	sub	sp, #8
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801562a:	2200      	movs	r2, #0
 801562c:	6839      	ldr	r1, [r7, #0]
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f7ff ffaa 	bl	8015588 <FATFS_LinkDriverEx>
 8015634:	4603      	mov	r3, r0
}
 8015636:	4618      	mov	r0, r3
 8015638:	3708      	adds	r7, #8
 801563a:	46bd      	mov	sp, r7
 801563c:	bd80      	pop	{r7, pc}
	...

08015640 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015640:	b480      	push	{r7}
 8015642:	b085      	sub	sp, #20
 8015644:	af00      	add	r7, sp, #0
 8015646:	4603      	mov	r3, r0
 8015648:	6039      	str	r1, [r7, #0]
 801564a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801564c:	88fb      	ldrh	r3, [r7, #6]
 801564e:	2b7f      	cmp	r3, #127	@ 0x7f
 8015650:	d802      	bhi.n	8015658 <ff_convert+0x18>
		c = chr;
 8015652:	88fb      	ldrh	r3, [r7, #6]
 8015654:	81fb      	strh	r3, [r7, #14]
 8015656:	e025      	b.n	80156a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00b      	beq.n	8015676 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801565e:	88fb      	ldrh	r3, [r7, #6]
 8015660:	2bff      	cmp	r3, #255	@ 0xff
 8015662:	d805      	bhi.n	8015670 <ff_convert+0x30>
 8015664:	88fb      	ldrh	r3, [r7, #6]
 8015666:	3b80      	subs	r3, #128	@ 0x80
 8015668:	4a12      	ldr	r2, [pc, #72]	@ (80156b4 <ff_convert+0x74>)
 801566a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801566e:	e000      	b.n	8015672 <ff_convert+0x32>
 8015670:	2300      	movs	r3, #0
 8015672:	81fb      	strh	r3, [r7, #14]
 8015674:	e016      	b.n	80156a4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8015676:	2300      	movs	r3, #0
 8015678:	81fb      	strh	r3, [r7, #14]
 801567a:	e009      	b.n	8015690 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801567c:	89fb      	ldrh	r3, [r7, #14]
 801567e:	4a0d      	ldr	r2, [pc, #52]	@ (80156b4 <ff_convert+0x74>)
 8015680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015684:	88fa      	ldrh	r2, [r7, #6]
 8015686:	429a      	cmp	r2, r3
 8015688:	d006      	beq.n	8015698 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801568a:	89fb      	ldrh	r3, [r7, #14]
 801568c:	3301      	adds	r3, #1
 801568e:	81fb      	strh	r3, [r7, #14]
 8015690:	89fb      	ldrh	r3, [r7, #14]
 8015692:	2b7f      	cmp	r3, #127	@ 0x7f
 8015694:	d9f2      	bls.n	801567c <ff_convert+0x3c>
 8015696:	e000      	b.n	801569a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015698:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801569a:	89fb      	ldrh	r3, [r7, #14]
 801569c:	3380      	adds	r3, #128	@ 0x80
 801569e:	b29b      	uxth	r3, r3
 80156a0:	b2db      	uxtb	r3, r3
 80156a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80156a4:	89fb      	ldrh	r3, [r7, #14]
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3714      	adds	r7, #20
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr
 80156b2:	bf00      	nop
 80156b4:	08018a0c 	.word	0x08018a0c

080156b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b087      	sub	sp, #28
 80156bc:	af00      	add	r7, sp, #0
 80156be:	4603      	mov	r3, r0
 80156c0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80156c2:	88fb      	ldrh	r3, [r7, #6]
 80156c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80156c8:	d201      	bcs.n	80156ce <ff_wtoupper+0x16>
 80156ca:	4b3e      	ldr	r3, [pc, #248]	@ (80157c4 <ff_wtoupper+0x10c>)
 80156cc:	e000      	b.n	80156d0 <ff_wtoupper+0x18>
 80156ce:	4b3e      	ldr	r3, [pc, #248]	@ (80157c8 <ff_wtoupper+0x110>)
 80156d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	1c9a      	adds	r2, r3, #2
 80156d6:	617a      	str	r2, [r7, #20]
 80156d8:	881b      	ldrh	r3, [r3, #0]
 80156da:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80156dc:	8a7b      	ldrh	r3, [r7, #18]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d068      	beq.n	80157b4 <ff_wtoupper+0xfc>
 80156e2:	88fa      	ldrh	r2, [r7, #6]
 80156e4:	8a7b      	ldrh	r3, [r7, #18]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d364      	bcc.n	80157b4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	1c9a      	adds	r2, r3, #2
 80156ee:	617a      	str	r2, [r7, #20]
 80156f0:	881b      	ldrh	r3, [r3, #0]
 80156f2:	823b      	strh	r3, [r7, #16]
 80156f4:	8a3b      	ldrh	r3, [r7, #16]
 80156f6:	0a1b      	lsrs	r3, r3, #8
 80156f8:	81fb      	strh	r3, [r7, #14]
 80156fa:	8a3b      	ldrh	r3, [r7, #16]
 80156fc:	b2db      	uxtb	r3, r3
 80156fe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015700:	88fa      	ldrh	r2, [r7, #6]
 8015702:	8a79      	ldrh	r1, [r7, #18]
 8015704:	8a3b      	ldrh	r3, [r7, #16]
 8015706:	440b      	add	r3, r1
 8015708:	429a      	cmp	r2, r3
 801570a:	da49      	bge.n	80157a0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801570c:	89fb      	ldrh	r3, [r7, #14]
 801570e:	2b08      	cmp	r3, #8
 8015710:	d84f      	bhi.n	80157b2 <ff_wtoupper+0xfa>
 8015712:	a201      	add	r2, pc, #4	@ (adr r2, 8015718 <ff_wtoupper+0x60>)
 8015714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015718:	0801573d 	.word	0x0801573d
 801571c:	0801574f 	.word	0x0801574f
 8015720:	08015765 	.word	0x08015765
 8015724:	0801576d 	.word	0x0801576d
 8015728:	08015775 	.word	0x08015775
 801572c:	0801577d 	.word	0x0801577d
 8015730:	08015785 	.word	0x08015785
 8015734:	0801578d 	.word	0x0801578d
 8015738:	08015795 	.word	0x08015795
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801573c:	88fa      	ldrh	r2, [r7, #6]
 801573e:	8a7b      	ldrh	r3, [r7, #18]
 8015740:	1ad3      	subs	r3, r2, r3
 8015742:	005b      	lsls	r3, r3, #1
 8015744:	697a      	ldr	r2, [r7, #20]
 8015746:	4413      	add	r3, r2
 8015748:	881b      	ldrh	r3, [r3, #0]
 801574a:	80fb      	strh	r3, [r7, #6]
 801574c:	e027      	b.n	801579e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801574e:	88fa      	ldrh	r2, [r7, #6]
 8015750:	8a7b      	ldrh	r3, [r7, #18]
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	b29b      	uxth	r3, r3
 8015756:	f003 0301 	and.w	r3, r3, #1
 801575a:	b29b      	uxth	r3, r3
 801575c:	88fa      	ldrh	r2, [r7, #6]
 801575e:	1ad3      	subs	r3, r2, r3
 8015760:	80fb      	strh	r3, [r7, #6]
 8015762:	e01c      	b.n	801579e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8015764:	88fb      	ldrh	r3, [r7, #6]
 8015766:	3b10      	subs	r3, #16
 8015768:	80fb      	strh	r3, [r7, #6]
 801576a:	e018      	b.n	801579e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801576c:	88fb      	ldrh	r3, [r7, #6]
 801576e:	3b20      	subs	r3, #32
 8015770:	80fb      	strh	r3, [r7, #6]
 8015772:	e014      	b.n	801579e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8015774:	88fb      	ldrh	r3, [r7, #6]
 8015776:	3b30      	subs	r3, #48	@ 0x30
 8015778:	80fb      	strh	r3, [r7, #6]
 801577a:	e010      	b.n	801579e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801577c:	88fb      	ldrh	r3, [r7, #6]
 801577e:	3b1a      	subs	r3, #26
 8015780:	80fb      	strh	r3, [r7, #6]
 8015782:	e00c      	b.n	801579e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015784:	88fb      	ldrh	r3, [r7, #6]
 8015786:	3308      	adds	r3, #8
 8015788:	80fb      	strh	r3, [r7, #6]
 801578a:	e008      	b.n	801579e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801578c:	88fb      	ldrh	r3, [r7, #6]
 801578e:	3b50      	subs	r3, #80	@ 0x50
 8015790:	80fb      	strh	r3, [r7, #6]
 8015792:	e004      	b.n	801579e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015794:	88fb      	ldrh	r3, [r7, #6]
 8015796:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801579a:	80fb      	strh	r3, [r7, #6]
 801579c:	bf00      	nop
			}
			break;
 801579e:	e008      	b.n	80157b2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80157a0:	89fb      	ldrh	r3, [r7, #14]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d195      	bne.n	80156d2 <ff_wtoupper+0x1a>
 80157a6:	8a3b      	ldrh	r3, [r7, #16]
 80157a8:	005b      	lsls	r3, r3, #1
 80157aa:	697a      	ldr	r2, [r7, #20]
 80157ac:	4413      	add	r3, r2
 80157ae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80157b0:	e78f      	b.n	80156d2 <ff_wtoupper+0x1a>
			break;
 80157b2:	bf00      	nop
	}

	return chr;
 80157b4:	88fb      	ldrh	r3, [r7, #6]
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	371c      	adds	r7, #28
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr
 80157c2:	bf00      	nop
 80157c4:	08018b0c 	.word	0x08018b0c
 80157c8:	08018d00 	.word	0x08018d00

080157cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80157d0:	2201      	movs	r2, #1
 80157d2:	490e      	ldr	r1, [pc, #56]	@ (801580c <MX_USB_HOST_Init+0x40>)
 80157d4:	480e      	ldr	r0, [pc, #56]	@ (8015810 <MX_USB_HOST_Init+0x44>)
 80157d6:	f7fb fa24 	bl	8010c22 <USBH_Init>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d001      	beq.n	80157e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80157e0:	f7ed ffa2 	bl	8003728 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80157e4:	490b      	ldr	r1, [pc, #44]	@ (8015814 <MX_USB_HOST_Init+0x48>)
 80157e6:	480a      	ldr	r0, [pc, #40]	@ (8015810 <MX_USB_HOST_Init+0x44>)
 80157e8:	f7fb fac8 	bl	8010d7c <USBH_RegisterClass>
 80157ec:	4603      	mov	r3, r0
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d001      	beq.n	80157f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80157f2:	f7ed ff99 	bl	8003728 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80157f6:	4806      	ldr	r0, [pc, #24]	@ (8015810 <MX_USB_HOST_Init+0x44>)
 80157f8:	f7fb fb4c 	bl	8010e94 <USBH_Start>
 80157fc:	4603      	mov	r3, r0
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d001      	beq.n	8015806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015802:	f7ed ff91 	bl	8003728 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015806:	bf00      	nop
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	0801582d 	.word	0x0801582d
 8015810:	20001294 	.word	0x20001294
 8015814:	20000014 	.word	0x20000014

08015818 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 801581c:	4802      	ldr	r0, [pc, #8]	@ (8015828 <MX_USB_HOST_Process+0x10>)
 801581e:	f7fb fb49 	bl	8010eb4 <USBH_Process>
}
 8015822:	bf00      	nop
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop
 8015828:	20001294 	.word	0x20001294

0801582c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801582c:	b480      	push	{r7}
 801582e:	b083      	sub	sp, #12
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]
 8015834:	460b      	mov	r3, r1
 8015836:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015838:	78fb      	ldrb	r3, [r7, #3]
 801583a:	3b01      	subs	r3, #1
 801583c:	2b04      	cmp	r3, #4
 801583e:	d819      	bhi.n	8015874 <USBH_UserProcess+0x48>
 8015840:	a201      	add	r2, pc, #4	@ (adr r2, 8015848 <USBH_UserProcess+0x1c>)
 8015842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015846:	bf00      	nop
 8015848:	08015875 	.word	0x08015875
 801584c:	08015865 	.word	0x08015865
 8015850:	08015875 	.word	0x08015875
 8015854:	0801586d 	.word	0x0801586d
 8015858:	0801585d 	.word	0x0801585d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801585c:	4b09      	ldr	r3, [pc, #36]	@ (8015884 <USBH_UserProcess+0x58>)
 801585e:	2203      	movs	r2, #3
 8015860:	701a      	strb	r2, [r3, #0]
  break;
 8015862:	e008      	b.n	8015876 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015864:	4b07      	ldr	r3, [pc, #28]	@ (8015884 <USBH_UserProcess+0x58>)
 8015866:	2202      	movs	r2, #2
 8015868:	701a      	strb	r2, [r3, #0]
  break;
 801586a:	e004      	b.n	8015876 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801586c:	4b05      	ldr	r3, [pc, #20]	@ (8015884 <USBH_UserProcess+0x58>)
 801586e:	2201      	movs	r2, #1
 8015870:	701a      	strb	r2, [r3, #0]
  break;
 8015872:	e000      	b.n	8015876 <USBH_UserProcess+0x4a>

  default:
  break;
 8015874:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8015876:	bf00      	nop
 8015878:	370c      	adds	r7, #12
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	2000166c 	.word	0x2000166c

08015888 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b08a      	sub	sp, #40	@ 0x28
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015890:	f107 0314 	add.w	r3, r7, #20
 8015894:	2200      	movs	r2, #0
 8015896:	601a      	str	r2, [r3, #0]
 8015898:	605a      	str	r2, [r3, #4]
 801589a:	609a      	str	r2, [r3, #8]
 801589c:	60da      	str	r2, [r3, #12]
 801589e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80158a8:	d13a      	bne.n	8015920 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80158aa:	2300      	movs	r3, #0
 80158ac:	613b      	str	r3, [r7, #16]
 80158ae:	4b1e      	ldr	r3, [pc, #120]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158b2:	4a1d      	ldr	r2, [pc, #116]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158b4:	f043 0301 	orr.w	r3, r3, #1
 80158b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80158ba:	4b1b      	ldr	r3, [pc, #108]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158be:	f003 0301 	and.w	r3, r3, #1
 80158c2:	613b      	str	r3, [r7, #16]
 80158c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80158c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80158ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80158cc:	2302      	movs	r3, #2
 80158ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80158d0:	2301      	movs	r3, #1
 80158d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80158d4:	2302      	movs	r3, #2
 80158d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80158d8:	230a      	movs	r3, #10
 80158da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80158dc:	f107 0314 	add.w	r3, r7, #20
 80158e0:	4619      	mov	r1, r3
 80158e2:	4812      	ldr	r0, [pc, #72]	@ (801592c <HAL_HCD_MspInit+0xa4>)
 80158e4:	f7f0 fb20 	bl	8005f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80158e8:	4b0f      	ldr	r3, [pc, #60]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158ec:	4a0e      	ldr	r2, [pc, #56]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80158f4:	2300      	movs	r3, #0
 80158f6:	60fb      	str	r3, [r7, #12]
 80158f8:	4b0b      	ldr	r3, [pc, #44]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158fc:	4a0a      	ldr	r2, [pc, #40]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 80158fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015902:	6453      	str	r3, [r2, #68]	@ 0x44
 8015904:	4b08      	ldr	r3, [pc, #32]	@ (8015928 <HAL_HCD_MspInit+0xa0>)
 8015906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801590c:	60fb      	str	r3, [r7, #12]
 801590e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015910:	2200      	movs	r2, #0
 8015912:	2100      	movs	r1, #0
 8015914:	2043      	movs	r0, #67	@ 0x43
 8015916:	f7ef fcb4 	bl	8005282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801591a:	2043      	movs	r0, #67	@ 0x43
 801591c:	f7ef fccd 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015920:	bf00      	nop
 8015922:	3728      	adds	r7, #40	@ 0x28
 8015924:	46bd      	mov	sp, r7
 8015926:	bd80      	pop	{r7, pc}
 8015928:	40023800 	.word	0x40023800
 801592c:	40020000 	.word	0x40020000

08015930 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801593e:	4618      	mov	r0, r3
 8015940:	f7fb fe8f 	bl	8011662 <USBH_LL_IncTimer>
}
 8015944:	bf00      	nop
 8015946:	3708      	adds	r7, #8
 8015948:	46bd      	mov	sp, r7
 801594a:	bd80      	pop	{r7, pc}

0801594c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b082      	sub	sp, #8
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801595a:	4618      	mov	r0, r3
 801595c:	f7fb fec7 	bl	80116ee <USBH_LL_Connect>
}
 8015960:	bf00      	nop
 8015962:	3708      	adds	r7, #8
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}

08015968 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8015976:	4618      	mov	r0, r3
 8015978:	f7fb fed0 	bl	801171c <USBH_LL_Disconnect>
}
 801597c:	bf00      	nop
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	460b      	mov	r3, r1
 801598e:	70fb      	strb	r3, [r7, #3]
 8015990:	4613      	mov	r3, r2
 8015992:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8015994:	bf00      	nop
 8015996:	370c      	adds	r7, #12
 8015998:	46bd      	mov	sp, r7
 801599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801599e:	4770      	bx	lr

080159a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7fb fe81 	bl	80116b6 <USBH_LL_PortEnabled>
}
 80159b4:	bf00      	nop
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fb fe81 	bl	80116d2 <USBH_LL_PortDisabled>
}
 80159d0:	bf00      	nop
 80159d2:	3708      	adds	r7, #8
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80159e6:	2b01      	cmp	r3, #1
 80159e8:	d12a      	bne.n	8015a40 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80159ea:	4a18      	ldr	r2, [pc, #96]	@ (8015a4c <USBH_LL_Init+0x74>)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	4a15      	ldr	r2, [pc, #84]	@ (8015a4c <USBH_LL_Init+0x74>)
 80159f6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80159fa:	4b14      	ldr	r3, [pc, #80]	@ (8015a4c <USBH_LL_Init+0x74>)
 80159fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8015a00:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015a02:	4b12      	ldr	r3, [pc, #72]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a04:	2208      	movs	r2, #8
 8015a06:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015a08:	4b10      	ldr	r3, [pc, #64]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a0a:	2201      	movs	r2, #1
 8015a0c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a10:	2200      	movs	r2, #0
 8015a12:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015a14:	4b0d      	ldr	r3, [pc, #52]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a16:	2202      	movs	r2, #2
 8015a18:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015a20:	480a      	ldr	r0, [pc, #40]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a22:	f7f0 fc4e 	bl	80062c2 <HAL_HCD_Init>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d001      	beq.n	8015a30 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015a2c:	f7ed fe7c 	bl	8003728 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015a30:	4806      	ldr	r0, [pc, #24]	@ (8015a4c <USBH_LL_Init+0x74>)
 8015a32:	f7f1 f8af 	bl	8006b94 <HAL_HCD_GetCurrentFrame>
 8015a36:	4603      	mov	r3, r0
 8015a38:	4619      	mov	r1, r3
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f7fb fe02 	bl	8011644 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015a40:	2300      	movs	r3, #0
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3708      	adds	r7, #8
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
 8015a4a:	bf00      	nop
 8015a4c:	20001670 	.word	0x20001670

08015a50 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7f1 f81c 	bl	8006aa4 <HAL_HCD_Start>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015a70:	7bfb      	ldrb	r3, [r7, #15]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f000 f992 	bl	8015d9c <USBH_Get_USB_Status>
 8015a78:	4603      	mov	r3, r0
 8015a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3710      	adds	r7, #16
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}

08015a86 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015a86:	b580      	push	{r7, lr}
 8015a88:	b084      	sub	sp, #16
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7f1 f824 	bl	8006aea <HAL_HCD_Stop>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015aa6:	7bfb      	ldrb	r3, [r7, #15]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f000 f977 	bl	8015d9c <USBH_Get_USB_Status>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ab2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3710      	adds	r7, #16
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7f1 f86e 	bl	8006bb0 <HAL_HCD_GetCurrentSpeed>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b02      	cmp	r3, #2
 8015ad8:	d00c      	beq.n	8015af4 <USBH_LL_GetSpeed+0x38>
 8015ada:	2b02      	cmp	r3, #2
 8015adc:	d80d      	bhi.n	8015afa <USBH_LL_GetSpeed+0x3e>
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d002      	beq.n	8015ae8 <USBH_LL_GetSpeed+0x2c>
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d003      	beq.n	8015aee <USBH_LL_GetSpeed+0x32>
 8015ae6:	e008      	b.n	8015afa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	73fb      	strb	r3, [r7, #15]
    break;
 8015aec:	e008      	b.n	8015b00 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015aee:	2301      	movs	r3, #1
 8015af0:	73fb      	strb	r3, [r7, #15]
    break;
 8015af2:	e005      	b.n	8015b00 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015af4:	2302      	movs	r3, #2
 8015af6:	73fb      	strb	r3, [r7, #15]
    break;
 8015af8:	e002      	b.n	8015b00 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015afa:	2301      	movs	r3, #1
 8015afc:	73fb      	strb	r3, [r7, #15]
    break;
 8015afe:	bf00      	nop
  }
  return  speed;
 8015b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b084      	sub	sp, #16
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b12:	2300      	movs	r3, #0
 8015b14:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7f0 ffff 	bl	8006b24 <HAL_HCD_ResetPort>
 8015b26:	4603      	mov	r3, r0
 8015b28:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015b2a:	7bfb      	ldrb	r3, [r7, #15]
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f000 f935 	bl	8015d9c <USBH_Get_USB_Status>
 8015b32:	4603      	mov	r3, r0
 8015b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3710      	adds	r7, #16
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b082      	sub	sp, #8
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	460b      	mov	r3, r1
 8015b4a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015b52:	78fa      	ldrb	r2, [r7, #3]
 8015b54:	4611      	mov	r1, r2
 8015b56:	4618      	mov	r0, r3
 8015b58:	f7f1 f807 	bl	8006b6a <HAL_HCD_HC_GetXferCount>
 8015b5c:	4603      	mov	r3, r0
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3708      	adds	r7, #8
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}

08015b66 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015b66:	b590      	push	{r4, r7, lr}
 8015b68:	b089      	sub	sp, #36	@ 0x24
 8015b6a:	af04      	add	r7, sp, #16
 8015b6c:	6078      	str	r0, [r7, #4]
 8015b6e:	4608      	mov	r0, r1
 8015b70:	4611      	mov	r1, r2
 8015b72:	461a      	mov	r2, r3
 8015b74:	4603      	mov	r3, r0
 8015b76:	70fb      	strb	r3, [r7, #3]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	70bb      	strb	r3, [r7, #2]
 8015b7c:	4613      	mov	r3, r2
 8015b7e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b80:	2300      	movs	r3, #0
 8015b82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015b84:	2300      	movs	r3, #0
 8015b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8015b8e:	787c      	ldrb	r4, [r7, #1]
 8015b90:	78ba      	ldrb	r2, [r7, #2]
 8015b92:	78f9      	ldrb	r1, [r7, #3]
 8015b94:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015b96:	9302      	str	r3, [sp, #8]
 8015b98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015b9c:	9301      	str	r3, [sp, #4]
 8015b9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015ba2:	9300      	str	r3, [sp, #0]
 8015ba4:	4623      	mov	r3, r4
 8015ba6:	f7f0 fbf3 	bl	8006390 <HAL_HCD_HC_Init>
 8015baa:	4603      	mov	r3, r0
 8015bac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015bae:	7bfb      	ldrb	r3, [r7, #15]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f000 f8f3 	bl	8015d9c <USBH_Get_USB_Status>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3714      	adds	r7, #20
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd90      	pop	{r4, r7, pc}

08015bc4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015bde:	78fa      	ldrb	r2, [r7, #3]
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7f0 fc8c 	bl	8006500 <HAL_HCD_HC_Halt>
 8015be8:	4603      	mov	r3, r0
 8015bea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 f8d4 	bl	8015d9c <USBH_Get_USB_Status>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015c02:	b590      	push	{r4, r7, lr}
 8015c04:	b089      	sub	sp, #36	@ 0x24
 8015c06:	af04      	add	r7, sp, #16
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	4608      	mov	r0, r1
 8015c0c:	4611      	mov	r1, r2
 8015c0e:	461a      	mov	r2, r3
 8015c10:	4603      	mov	r3, r0
 8015c12:	70fb      	strb	r3, [r7, #3]
 8015c14:	460b      	mov	r3, r1
 8015c16:	70bb      	strb	r3, [r7, #2]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015c20:	2300      	movs	r3, #0
 8015c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8015c2a:	787c      	ldrb	r4, [r7, #1]
 8015c2c:	78ba      	ldrb	r2, [r7, #2]
 8015c2e:	78f9      	ldrb	r1, [r7, #3]
 8015c30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015c34:	9303      	str	r3, [sp, #12]
 8015c36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015c38:	9302      	str	r3, [sp, #8]
 8015c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c3c:	9301      	str	r3, [sp, #4]
 8015c3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	4623      	mov	r3, r4
 8015c46:	f7f0 fc7f 	bl	8006548 <HAL_HCD_HC_SubmitRequest>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
 8015c50:	4618      	mov	r0, r3
 8015c52:	f000 f8a3 	bl	8015d9c <USBH_Get_USB_Status>
 8015c56:	4603      	mov	r3, r0
 8015c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3714      	adds	r7, #20
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd90      	pop	{r4, r7, pc}

08015c64 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015c76:	78fa      	ldrb	r2, [r7, #3]
 8015c78:	4611      	mov	r1, r2
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7f0 ff60 	bl	8006b40 <HAL_HCD_HC_GetURBState>
 8015c80:	4603      	mov	r3, r0
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015c8a:	b580      	push	{r7, lr}
 8015c8c:	b082      	sub	sp, #8
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	6078      	str	r0, [r7, #4]
 8015c92:	460b      	mov	r3, r1
 8015c94:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d103      	bne.n	8015ca8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015ca0:	78fb      	ldrb	r3, [r7, #3]
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f000 f8a6 	bl	8015df4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015ca8:	20c8      	movs	r0, #200	@ 0xc8
 8015caa:	f7ee fad7 	bl	800425c <HAL_Delay>
  return USBH_OK;
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015cb8:	b480      	push	{r7}
 8015cba:	b085      	sub	sp, #20
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	460b      	mov	r3, r1
 8015cc2:	70fb      	strb	r3, [r7, #3]
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015cce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015cd0:	78fa      	ldrb	r2, [r7, #3]
 8015cd2:	68f9      	ldr	r1, [r7, #12]
 8015cd4:	4613      	mov	r3, r2
 8015cd6:	011b      	lsls	r3, r3, #4
 8015cd8:	1a9b      	subs	r3, r3, r2
 8015cda:	009b      	lsls	r3, r3, #2
 8015cdc:	440b      	add	r3, r1
 8015cde:	3317      	adds	r3, #23
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00a      	beq.n	8015cfc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015ce6:	78fa      	ldrb	r2, [r7, #3]
 8015ce8:	68f9      	ldr	r1, [r7, #12]
 8015cea:	4613      	mov	r3, r2
 8015cec:	011b      	lsls	r3, r3, #4
 8015cee:	1a9b      	subs	r3, r3, r2
 8015cf0:	009b      	lsls	r3, r3, #2
 8015cf2:	440b      	add	r3, r1
 8015cf4:	333c      	adds	r3, #60	@ 0x3c
 8015cf6:	78ba      	ldrb	r2, [r7, #2]
 8015cf8:	701a      	strb	r2, [r3, #0]
 8015cfa:	e009      	b.n	8015d10 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015cfc:	78fa      	ldrb	r2, [r7, #3]
 8015cfe:	68f9      	ldr	r1, [r7, #12]
 8015d00:	4613      	mov	r3, r2
 8015d02:	011b      	lsls	r3, r3, #4
 8015d04:	1a9b      	subs	r3, r3, r2
 8015d06:	009b      	lsls	r3, r3, #2
 8015d08:	440b      	add	r3, r1
 8015d0a:	333d      	adds	r3, #61	@ 0x3d
 8015d0c:	78ba      	ldrb	r2, [r7, #2]
 8015d0e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015d10:	2300      	movs	r3, #0
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3714      	adds	r7, #20
 8015d16:	46bd      	mov	sp, r7
 8015d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1c:	4770      	bx	lr

08015d1e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015d1e:	b480      	push	{r7}
 8015d20:	b085      	sub	sp, #20
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	6078      	str	r0, [r7, #4]
 8015d26:	460b      	mov	r3, r1
 8015d28:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8015d34:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8015d36:	78fa      	ldrb	r2, [r7, #3]
 8015d38:	68b9      	ldr	r1, [r7, #8]
 8015d3a:	4613      	mov	r3, r2
 8015d3c:	011b      	lsls	r3, r3, #4
 8015d3e:	1a9b      	subs	r3, r3, r2
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	440b      	add	r3, r1
 8015d44:	3317      	adds	r3, #23
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00a      	beq.n	8015d62 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8015d4c:	78fa      	ldrb	r2, [r7, #3]
 8015d4e:	68b9      	ldr	r1, [r7, #8]
 8015d50:	4613      	mov	r3, r2
 8015d52:	011b      	lsls	r3, r3, #4
 8015d54:	1a9b      	subs	r3, r3, r2
 8015d56:	009b      	lsls	r3, r3, #2
 8015d58:	440b      	add	r3, r1
 8015d5a:	333c      	adds	r3, #60	@ 0x3c
 8015d5c:	781b      	ldrb	r3, [r3, #0]
 8015d5e:	73fb      	strb	r3, [r7, #15]
 8015d60:	e009      	b.n	8015d76 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8015d62:	78fa      	ldrb	r2, [r7, #3]
 8015d64:	68b9      	ldr	r1, [r7, #8]
 8015d66:	4613      	mov	r3, r2
 8015d68:	011b      	lsls	r3, r3, #4
 8015d6a:	1a9b      	subs	r3, r3, r2
 8015d6c:	009b      	lsls	r3, r3, #2
 8015d6e:	440b      	add	r3, r1
 8015d70:	333d      	adds	r3, #61	@ 0x3d
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8015d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3714      	adds	r7, #20
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d82:	4770      	bx	lr

08015d84 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	f7ee fa65 	bl	800425c <HAL_Delay>
}
 8015d92:	bf00      	nop
 8015d94:	3708      	adds	r7, #8
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
	...

08015d9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d9c:	b480      	push	{r7}
 8015d9e:	b085      	sub	sp, #20
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	4603      	mov	r3, r0
 8015da4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015da6:	2300      	movs	r3, #0
 8015da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015daa:	79fb      	ldrb	r3, [r7, #7]
 8015dac:	2b03      	cmp	r3, #3
 8015dae:	d817      	bhi.n	8015de0 <USBH_Get_USB_Status+0x44>
 8015db0:	a201      	add	r2, pc, #4	@ (adr r2, 8015db8 <USBH_Get_USB_Status+0x1c>)
 8015db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015db6:	bf00      	nop
 8015db8:	08015dc9 	.word	0x08015dc9
 8015dbc:	08015dcf 	.word	0x08015dcf
 8015dc0:	08015dd5 	.word	0x08015dd5
 8015dc4:	08015ddb 	.word	0x08015ddb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	73fb      	strb	r3, [r7, #15]
    break;
 8015dcc:	e00b      	b.n	8015de6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015dce:	2302      	movs	r3, #2
 8015dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8015dd2:	e008      	b.n	8015de6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8015dd8:	e005      	b.n	8015de6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015dda:	2302      	movs	r3, #2
 8015ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8015dde:	e002      	b.n	8015de6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015de0:	2302      	movs	r3, #2
 8015de2:	73fb      	strb	r3, [r7, #15]
    break;
 8015de4:	bf00      	nop
  }
  return usb_status;
 8015de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015de8:	4618      	mov	r0, r3
 8015dea:	3714      	adds	r7, #20
 8015dec:	46bd      	mov	sp, r7
 8015dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df2:	4770      	bx	lr

08015df4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b084      	sub	sp, #16
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8015dfe:	79fb      	ldrb	r3, [r7, #7]
 8015e00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8015e02:	79fb      	ldrb	r3, [r7, #7]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d102      	bne.n	8015e0e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	73fb      	strb	r3, [r7, #15]
 8015e0c:	e001      	b.n	8015e12 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,(GPIO_PinState)data);
 8015e12:	7bfb      	ldrb	r3, [r7, #15]
 8015e14:	461a      	mov	r2, r3
 8015e16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8015e1a:	4803      	ldr	r0, [pc, #12]	@ (8015e28 <MX_DriverVbusFS+0x34>)
 8015e1c:	f7f0 fa38 	bl	8006290 <HAL_GPIO_WritePin>
}
 8015e20:	bf00      	nop
 8015e22:	3710      	adds	r7, #16
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}
 8015e28:	40020c00 	.word	0x40020c00

08015e2c <malloc>:
 8015e2c:	4b02      	ldr	r3, [pc, #8]	@ (8015e38 <malloc+0xc>)
 8015e2e:	4601      	mov	r1, r0
 8015e30:	6818      	ldr	r0, [r3, #0]
 8015e32:	f000 b82d 	b.w	8015e90 <_malloc_r>
 8015e36:	bf00      	nop
 8015e38:	20000040 	.word	0x20000040

08015e3c <free>:
 8015e3c:	4b02      	ldr	r3, [pc, #8]	@ (8015e48 <free+0xc>)
 8015e3e:	4601      	mov	r1, r0
 8015e40:	6818      	ldr	r0, [r3, #0]
 8015e42:	f001 bda1 	b.w	8017988 <_free_r>
 8015e46:	bf00      	nop
 8015e48:	20000040 	.word	0x20000040

08015e4c <sbrk_aligned>:
 8015e4c:	b570      	push	{r4, r5, r6, lr}
 8015e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8015e8c <sbrk_aligned+0x40>)
 8015e50:	460c      	mov	r4, r1
 8015e52:	6831      	ldr	r1, [r6, #0]
 8015e54:	4605      	mov	r5, r0
 8015e56:	b911      	cbnz	r1, 8015e5e <sbrk_aligned+0x12>
 8015e58:	f000 feea 	bl	8016c30 <_sbrk_r>
 8015e5c:	6030      	str	r0, [r6, #0]
 8015e5e:	4621      	mov	r1, r4
 8015e60:	4628      	mov	r0, r5
 8015e62:	f000 fee5 	bl	8016c30 <_sbrk_r>
 8015e66:	1c43      	adds	r3, r0, #1
 8015e68:	d103      	bne.n	8015e72 <sbrk_aligned+0x26>
 8015e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8015e6e:	4620      	mov	r0, r4
 8015e70:	bd70      	pop	{r4, r5, r6, pc}
 8015e72:	1cc4      	adds	r4, r0, #3
 8015e74:	f024 0403 	bic.w	r4, r4, #3
 8015e78:	42a0      	cmp	r0, r4
 8015e7a:	d0f8      	beq.n	8015e6e <sbrk_aligned+0x22>
 8015e7c:	1a21      	subs	r1, r4, r0
 8015e7e:	4628      	mov	r0, r5
 8015e80:	f000 fed6 	bl	8016c30 <_sbrk_r>
 8015e84:	3001      	adds	r0, #1
 8015e86:	d1f2      	bne.n	8015e6e <sbrk_aligned+0x22>
 8015e88:	e7ef      	b.n	8015e6a <sbrk_aligned+0x1e>
 8015e8a:	bf00      	nop
 8015e8c:	20001a50 	.word	0x20001a50

08015e90 <_malloc_r>:
 8015e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e94:	1ccd      	adds	r5, r1, #3
 8015e96:	f025 0503 	bic.w	r5, r5, #3
 8015e9a:	3508      	adds	r5, #8
 8015e9c:	2d0c      	cmp	r5, #12
 8015e9e:	bf38      	it	cc
 8015ea0:	250c      	movcc	r5, #12
 8015ea2:	2d00      	cmp	r5, #0
 8015ea4:	4606      	mov	r6, r0
 8015ea6:	db01      	blt.n	8015eac <_malloc_r+0x1c>
 8015ea8:	42a9      	cmp	r1, r5
 8015eaa:	d904      	bls.n	8015eb6 <_malloc_r+0x26>
 8015eac:	230c      	movs	r3, #12
 8015eae:	6033      	str	r3, [r6, #0]
 8015eb0:	2000      	movs	r0, #0
 8015eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015f8c <_malloc_r+0xfc>
 8015eba:	f000 f869 	bl	8015f90 <__malloc_lock>
 8015ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8015ec2:	461c      	mov	r4, r3
 8015ec4:	bb44      	cbnz	r4, 8015f18 <_malloc_r+0x88>
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	4630      	mov	r0, r6
 8015eca:	f7ff ffbf 	bl	8015e4c <sbrk_aligned>
 8015ece:	1c43      	adds	r3, r0, #1
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	d158      	bne.n	8015f86 <_malloc_r+0xf6>
 8015ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8015ed8:	4627      	mov	r7, r4
 8015eda:	2f00      	cmp	r7, #0
 8015edc:	d143      	bne.n	8015f66 <_malloc_r+0xd6>
 8015ede:	2c00      	cmp	r4, #0
 8015ee0:	d04b      	beq.n	8015f7a <_malloc_r+0xea>
 8015ee2:	6823      	ldr	r3, [r4, #0]
 8015ee4:	4639      	mov	r1, r7
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	eb04 0903 	add.w	r9, r4, r3
 8015eec:	f000 fea0 	bl	8016c30 <_sbrk_r>
 8015ef0:	4581      	cmp	r9, r0
 8015ef2:	d142      	bne.n	8015f7a <_malloc_r+0xea>
 8015ef4:	6821      	ldr	r1, [r4, #0]
 8015ef6:	1a6d      	subs	r5, r5, r1
 8015ef8:	4629      	mov	r1, r5
 8015efa:	4630      	mov	r0, r6
 8015efc:	f7ff ffa6 	bl	8015e4c <sbrk_aligned>
 8015f00:	3001      	adds	r0, #1
 8015f02:	d03a      	beq.n	8015f7a <_malloc_r+0xea>
 8015f04:	6823      	ldr	r3, [r4, #0]
 8015f06:	442b      	add	r3, r5
 8015f08:	6023      	str	r3, [r4, #0]
 8015f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8015f0e:	685a      	ldr	r2, [r3, #4]
 8015f10:	bb62      	cbnz	r2, 8015f6c <_malloc_r+0xdc>
 8015f12:	f8c8 7000 	str.w	r7, [r8]
 8015f16:	e00f      	b.n	8015f38 <_malloc_r+0xa8>
 8015f18:	6822      	ldr	r2, [r4, #0]
 8015f1a:	1b52      	subs	r2, r2, r5
 8015f1c:	d420      	bmi.n	8015f60 <_malloc_r+0xd0>
 8015f1e:	2a0b      	cmp	r2, #11
 8015f20:	d917      	bls.n	8015f52 <_malloc_r+0xc2>
 8015f22:	1961      	adds	r1, r4, r5
 8015f24:	42a3      	cmp	r3, r4
 8015f26:	6025      	str	r5, [r4, #0]
 8015f28:	bf18      	it	ne
 8015f2a:	6059      	strne	r1, [r3, #4]
 8015f2c:	6863      	ldr	r3, [r4, #4]
 8015f2e:	bf08      	it	eq
 8015f30:	f8c8 1000 	streq.w	r1, [r8]
 8015f34:	5162      	str	r2, [r4, r5]
 8015f36:	604b      	str	r3, [r1, #4]
 8015f38:	4630      	mov	r0, r6
 8015f3a:	f000 f82f 	bl	8015f9c <__malloc_unlock>
 8015f3e:	f104 000b 	add.w	r0, r4, #11
 8015f42:	1d23      	adds	r3, r4, #4
 8015f44:	f020 0007 	bic.w	r0, r0, #7
 8015f48:	1ac2      	subs	r2, r0, r3
 8015f4a:	bf1c      	itt	ne
 8015f4c:	1a1b      	subne	r3, r3, r0
 8015f4e:	50a3      	strne	r3, [r4, r2]
 8015f50:	e7af      	b.n	8015eb2 <_malloc_r+0x22>
 8015f52:	6862      	ldr	r2, [r4, #4]
 8015f54:	42a3      	cmp	r3, r4
 8015f56:	bf0c      	ite	eq
 8015f58:	f8c8 2000 	streq.w	r2, [r8]
 8015f5c:	605a      	strne	r2, [r3, #4]
 8015f5e:	e7eb      	b.n	8015f38 <_malloc_r+0xa8>
 8015f60:	4623      	mov	r3, r4
 8015f62:	6864      	ldr	r4, [r4, #4]
 8015f64:	e7ae      	b.n	8015ec4 <_malloc_r+0x34>
 8015f66:	463c      	mov	r4, r7
 8015f68:	687f      	ldr	r7, [r7, #4]
 8015f6a:	e7b6      	b.n	8015eda <_malloc_r+0x4a>
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	42a3      	cmp	r3, r4
 8015f72:	d1fb      	bne.n	8015f6c <_malloc_r+0xdc>
 8015f74:	2300      	movs	r3, #0
 8015f76:	6053      	str	r3, [r2, #4]
 8015f78:	e7de      	b.n	8015f38 <_malloc_r+0xa8>
 8015f7a:	230c      	movs	r3, #12
 8015f7c:	6033      	str	r3, [r6, #0]
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f000 f80c 	bl	8015f9c <__malloc_unlock>
 8015f84:	e794      	b.n	8015eb0 <_malloc_r+0x20>
 8015f86:	6005      	str	r5, [r0, #0]
 8015f88:	e7d6      	b.n	8015f38 <_malloc_r+0xa8>
 8015f8a:	bf00      	nop
 8015f8c:	20001a54 	.word	0x20001a54

08015f90 <__malloc_lock>:
 8015f90:	4801      	ldr	r0, [pc, #4]	@ (8015f98 <__malloc_lock+0x8>)
 8015f92:	f000 be9a 	b.w	8016cca <__retarget_lock_acquire_recursive>
 8015f96:	bf00      	nop
 8015f98:	20001b98 	.word	0x20001b98

08015f9c <__malloc_unlock>:
 8015f9c:	4801      	ldr	r0, [pc, #4]	@ (8015fa4 <__malloc_unlock+0x8>)
 8015f9e:	f000 be95 	b.w	8016ccc <__retarget_lock_release_recursive>
 8015fa2:	bf00      	nop
 8015fa4:	20001b98 	.word	0x20001b98

08015fa8 <__cvt>:
 8015fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fac:	ec57 6b10 	vmov	r6, r7, d0
 8015fb0:	2f00      	cmp	r7, #0
 8015fb2:	460c      	mov	r4, r1
 8015fb4:	4619      	mov	r1, r3
 8015fb6:	463b      	mov	r3, r7
 8015fb8:	bfbb      	ittet	lt
 8015fba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8015fbe:	461f      	movlt	r7, r3
 8015fc0:	2300      	movge	r3, #0
 8015fc2:	232d      	movlt	r3, #45	@ 0x2d
 8015fc4:	700b      	strb	r3, [r1, #0]
 8015fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8015fcc:	4691      	mov	r9, r2
 8015fce:	f023 0820 	bic.w	r8, r3, #32
 8015fd2:	bfbc      	itt	lt
 8015fd4:	4632      	movlt	r2, r6
 8015fd6:	4616      	movlt	r6, r2
 8015fd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015fdc:	d005      	beq.n	8015fea <__cvt+0x42>
 8015fde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8015fe2:	d100      	bne.n	8015fe6 <__cvt+0x3e>
 8015fe4:	3401      	adds	r4, #1
 8015fe6:	2102      	movs	r1, #2
 8015fe8:	e000      	b.n	8015fec <__cvt+0x44>
 8015fea:	2103      	movs	r1, #3
 8015fec:	ab03      	add	r3, sp, #12
 8015fee:	9301      	str	r3, [sp, #4]
 8015ff0:	ab02      	add	r3, sp, #8
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	ec47 6b10 	vmov	d0, r6, r7
 8015ff8:	4653      	mov	r3, sl
 8015ffa:	4622      	mov	r2, r4
 8015ffc:	f000 ff00 	bl	8016e00 <_dtoa_r>
 8016000:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016004:	4605      	mov	r5, r0
 8016006:	d119      	bne.n	801603c <__cvt+0x94>
 8016008:	f019 0f01 	tst.w	r9, #1
 801600c:	d00e      	beq.n	801602c <__cvt+0x84>
 801600e:	eb00 0904 	add.w	r9, r0, r4
 8016012:	2200      	movs	r2, #0
 8016014:	2300      	movs	r3, #0
 8016016:	4630      	mov	r0, r6
 8016018:	4639      	mov	r1, r7
 801601a:	f7ea fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 801601e:	b108      	cbz	r0, 8016024 <__cvt+0x7c>
 8016020:	f8cd 900c 	str.w	r9, [sp, #12]
 8016024:	2230      	movs	r2, #48	@ 0x30
 8016026:	9b03      	ldr	r3, [sp, #12]
 8016028:	454b      	cmp	r3, r9
 801602a:	d31e      	bcc.n	801606a <__cvt+0xc2>
 801602c:	9b03      	ldr	r3, [sp, #12]
 801602e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016030:	1b5b      	subs	r3, r3, r5
 8016032:	4628      	mov	r0, r5
 8016034:	6013      	str	r3, [r2, #0]
 8016036:	b004      	add	sp, #16
 8016038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801603c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016040:	eb00 0904 	add.w	r9, r0, r4
 8016044:	d1e5      	bne.n	8016012 <__cvt+0x6a>
 8016046:	7803      	ldrb	r3, [r0, #0]
 8016048:	2b30      	cmp	r3, #48	@ 0x30
 801604a:	d10a      	bne.n	8016062 <__cvt+0xba>
 801604c:	2200      	movs	r2, #0
 801604e:	2300      	movs	r3, #0
 8016050:	4630      	mov	r0, r6
 8016052:	4639      	mov	r1, r7
 8016054:	f7ea fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8016058:	b918      	cbnz	r0, 8016062 <__cvt+0xba>
 801605a:	f1c4 0401 	rsb	r4, r4, #1
 801605e:	f8ca 4000 	str.w	r4, [sl]
 8016062:	f8da 3000 	ldr.w	r3, [sl]
 8016066:	4499      	add	r9, r3
 8016068:	e7d3      	b.n	8016012 <__cvt+0x6a>
 801606a:	1c59      	adds	r1, r3, #1
 801606c:	9103      	str	r1, [sp, #12]
 801606e:	701a      	strb	r2, [r3, #0]
 8016070:	e7d9      	b.n	8016026 <__cvt+0x7e>

08016072 <__exponent>:
 8016072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016074:	2900      	cmp	r1, #0
 8016076:	bfba      	itte	lt
 8016078:	4249      	neglt	r1, r1
 801607a:	232d      	movlt	r3, #45	@ 0x2d
 801607c:	232b      	movge	r3, #43	@ 0x2b
 801607e:	2909      	cmp	r1, #9
 8016080:	7002      	strb	r2, [r0, #0]
 8016082:	7043      	strb	r3, [r0, #1]
 8016084:	dd29      	ble.n	80160da <__exponent+0x68>
 8016086:	f10d 0307 	add.w	r3, sp, #7
 801608a:	461d      	mov	r5, r3
 801608c:	270a      	movs	r7, #10
 801608e:	461a      	mov	r2, r3
 8016090:	fbb1 f6f7 	udiv	r6, r1, r7
 8016094:	fb07 1416 	mls	r4, r7, r6, r1
 8016098:	3430      	adds	r4, #48	@ 0x30
 801609a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801609e:	460c      	mov	r4, r1
 80160a0:	2c63      	cmp	r4, #99	@ 0x63
 80160a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80160a6:	4631      	mov	r1, r6
 80160a8:	dcf1      	bgt.n	801608e <__exponent+0x1c>
 80160aa:	3130      	adds	r1, #48	@ 0x30
 80160ac:	1e94      	subs	r4, r2, #2
 80160ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80160b2:	1c41      	adds	r1, r0, #1
 80160b4:	4623      	mov	r3, r4
 80160b6:	42ab      	cmp	r3, r5
 80160b8:	d30a      	bcc.n	80160d0 <__exponent+0x5e>
 80160ba:	f10d 0309 	add.w	r3, sp, #9
 80160be:	1a9b      	subs	r3, r3, r2
 80160c0:	42ac      	cmp	r4, r5
 80160c2:	bf88      	it	hi
 80160c4:	2300      	movhi	r3, #0
 80160c6:	3302      	adds	r3, #2
 80160c8:	4403      	add	r3, r0
 80160ca:	1a18      	subs	r0, r3, r0
 80160cc:	b003      	add	sp, #12
 80160ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80160d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80160d8:	e7ed      	b.n	80160b6 <__exponent+0x44>
 80160da:	2330      	movs	r3, #48	@ 0x30
 80160dc:	3130      	adds	r1, #48	@ 0x30
 80160de:	7083      	strb	r3, [r0, #2]
 80160e0:	70c1      	strb	r1, [r0, #3]
 80160e2:	1d03      	adds	r3, r0, #4
 80160e4:	e7f1      	b.n	80160ca <__exponent+0x58>
	...

080160e8 <_printf_float>:
 80160e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ec:	b08d      	sub	sp, #52	@ 0x34
 80160ee:	460c      	mov	r4, r1
 80160f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80160f4:	4616      	mov	r6, r2
 80160f6:	461f      	mov	r7, r3
 80160f8:	4605      	mov	r5, r0
 80160fa:	f000 fd61 	bl	8016bc0 <_localeconv_r>
 80160fe:	6803      	ldr	r3, [r0, #0]
 8016100:	9304      	str	r3, [sp, #16]
 8016102:	4618      	mov	r0, r3
 8016104:	f7ea f8b4 	bl	8000270 <strlen>
 8016108:	2300      	movs	r3, #0
 801610a:	930a      	str	r3, [sp, #40]	@ 0x28
 801610c:	f8d8 3000 	ldr.w	r3, [r8]
 8016110:	9005      	str	r0, [sp, #20]
 8016112:	3307      	adds	r3, #7
 8016114:	f023 0307 	bic.w	r3, r3, #7
 8016118:	f103 0208 	add.w	r2, r3, #8
 801611c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016120:	f8d4 b000 	ldr.w	fp, [r4]
 8016124:	f8c8 2000 	str.w	r2, [r8]
 8016128:	e9d3 8900 	ldrd	r8, r9, [r3]
 801612c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016130:	9307      	str	r3, [sp, #28]
 8016132:	f8cd 8018 	str.w	r8, [sp, #24]
 8016136:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801613a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801613e:	4b9c      	ldr	r3, [pc, #624]	@ (80163b0 <_printf_float+0x2c8>)
 8016140:	f04f 32ff 	mov.w	r2, #4294967295
 8016144:	f7ea fcf2 	bl	8000b2c <__aeabi_dcmpun>
 8016148:	bb70      	cbnz	r0, 80161a8 <_printf_float+0xc0>
 801614a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801614e:	4b98      	ldr	r3, [pc, #608]	@ (80163b0 <_printf_float+0x2c8>)
 8016150:	f04f 32ff 	mov.w	r2, #4294967295
 8016154:	f7ea fccc 	bl	8000af0 <__aeabi_dcmple>
 8016158:	bb30      	cbnz	r0, 80161a8 <_printf_float+0xc0>
 801615a:	2200      	movs	r2, #0
 801615c:	2300      	movs	r3, #0
 801615e:	4640      	mov	r0, r8
 8016160:	4649      	mov	r1, r9
 8016162:	f7ea fcbb 	bl	8000adc <__aeabi_dcmplt>
 8016166:	b110      	cbz	r0, 801616e <_printf_float+0x86>
 8016168:	232d      	movs	r3, #45	@ 0x2d
 801616a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801616e:	4a91      	ldr	r2, [pc, #580]	@ (80163b4 <_printf_float+0x2cc>)
 8016170:	4b91      	ldr	r3, [pc, #580]	@ (80163b8 <_printf_float+0x2d0>)
 8016172:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016176:	bf94      	ite	ls
 8016178:	4690      	movls	r8, r2
 801617a:	4698      	movhi	r8, r3
 801617c:	2303      	movs	r3, #3
 801617e:	6123      	str	r3, [r4, #16]
 8016180:	f02b 0304 	bic.w	r3, fp, #4
 8016184:	6023      	str	r3, [r4, #0]
 8016186:	f04f 0900 	mov.w	r9, #0
 801618a:	9700      	str	r7, [sp, #0]
 801618c:	4633      	mov	r3, r6
 801618e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016190:	4621      	mov	r1, r4
 8016192:	4628      	mov	r0, r5
 8016194:	f000 f9d2 	bl	801653c <_printf_common>
 8016198:	3001      	adds	r0, #1
 801619a:	f040 808d 	bne.w	80162b8 <_printf_float+0x1d0>
 801619e:	f04f 30ff 	mov.w	r0, #4294967295
 80161a2:	b00d      	add	sp, #52	@ 0x34
 80161a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a8:	4642      	mov	r2, r8
 80161aa:	464b      	mov	r3, r9
 80161ac:	4640      	mov	r0, r8
 80161ae:	4649      	mov	r1, r9
 80161b0:	f7ea fcbc 	bl	8000b2c <__aeabi_dcmpun>
 80161b4:	b140      	cbz	r0, 80161c8 <_printf_float+0xe0>
 80161b6:	464b      	mov	r3, r9
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	bfbc      	itt	lt
 80161bc:	232d      	movlt	r3, #45	@ 0x2d
 80161be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80161c2:	4a7e      	ldr	r2, [pc, #504]	@ (80163bc <_printf_float+0x2d4>)
 80161c4:	4b7e      	ldr	r3, [pc, #504]	@ (80163c0 <_printf_float+0x2d8>)
 80161c6:	e7d4      	b.n	8016172 <_printf_float+0x8a>
 80161c8:	6863      	ldr	r3, [r4, #4]
 80161ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80161ce:	9206      	str	r2, [sp, #24]
 80161d0:	1c5a      	adds	r2, r3, #1
 80161d2:	d13b      	bne.n	801624c <_printf_float+0x164>
 80161d4:	2306      	movs	r3, #6
 80161d6:	6063      	str	r3, [r4, #4]
 80161d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80161dc:	2300      	movs	r3, #0
 80161de:	6022      	str	r2, [r4, #0]
 80161e0:	9303      	str	r3, [sp, #12]
 80161e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80161e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80161e8:	ab09      	add	r3, sp, #36	@ 0x24
 80161ea:	9300      	str	r3, [sp, #0]
 80161ec:	6861      	ldr	r1, [r4, #4]
 80161ee:	ec49 8b10 	vmov	d0, r8, r9
 80161f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80161f6:	4628      	mov	r0, r5
 80161f8:	f7ff fed6 	bl	8015fa8 <__cvt>
 80161fc:	9b06      	ldr	r3, [sp, #24]
 80161fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016200:	2b47      	cmp	r3, #71	@ 0x47
 8016202:	4680      	mov	r8, r0
 8016204:	d129      	bne.n	801625a <_printf_float+0x172>
 8016206:	1cc8      	adds	r0, r1, #3
 8016208:	db02      	blt.n	8016210 <_printf_float+0x128>
 801620a:	6863      	ldr	r3, [r4, #4]
 801620c:	4299      	cmp	r1, r3
 801620e:	dd41      	ble.n	8016294 <_printf_float+0x1ac>
 8016210:	f1aa 0a02 	sub.w	sl, sl, #2
 8016214:	fa5f fa8a 	uxtb.w	sl, sl
 8016218:	3901      	subs	r1, #1
 801621a:	4652      	mov	r2, sl
 801621c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016220:	9109      	str	r1, [sp, #36]	@ 0x24
 8016222:	f7ff ff26 	bl	8016072 <__exponent>
 8016226:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016228:	1813      	adds	r3, r2, r0
 801622a:	2a01      	cmp	r2, #1
 801622c:	4681      	mov	r9, r0
 801622e:	6123      	str	r3, [r4, #16]
 8016230:	dc02      	bgt.n	8016238 <_printf_float+0x150>
 8016232:	6822      	ldr	r2, [r4, #0]
 8016234:	07d2      	lsls	r2, r2, #31
 8016236:	d501      	bpl.n	801623c <_printf_float+0x154>
 8016238:	3301      	adds	r3, #1
 801623a:	6123      	str	r3, [r4, #16]
 801623c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016240:	2b00      	cmp	r3, #0
 8016242:	d0a2      	beq.n	801618a <_printf_float+0xa2>
 8016244:	232d      	movs	r3, #45	@ 0x2d
 8016246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801624a:	e79e      	b.n	801618a <_printf_float+0xa2>
 801624c:	9a06      	ldr	r2, [sp, #24]
 801624e:	2a47      	cmp	r2, #71	@ 0x47
 8016250:	d1c2      	bne.n	80161d8 <_printf_float+0xf0>
 8016252:	2b00      	cmp	r3, #0
 8016254:	d1c0      	bne.n	80161d8 <_printf_float+0xf0>
 8016256:	2301      	movs	r3, #1
 8016258:	e7bd      	b.n	80161d6 <_printf_float+0xee>
 801625a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801625e:	d9db      	bls.n	8016218 <_printf_float+0x130>
 8016260:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016264:	d118      	bne.n	8016298 <_printf_float+0x1b0>
 8016266:	2900      	cmp	r1, #0
 8016268:	6863      	ldr	r3, [r4, #4]
 801626a:	dd0b      	ble.n	8016284 <_printf_float+0x19c>
 801626c:	6121      	str	r1, [r4, #16]
 801626e:	b913      	cbnz	r3, 8016276 <_printf_float+0x18e>
 8016270:	6822      	ldr	r2, [r4, #0]
 8016272:	07d0      	lsls	r0, r2, #31
 8016274:	d502      	bpl.n	801627c <_printf_float+0x194>
 8016276:	3301      	adds	r3, #1
 8016278:	440b      	add	r3, r1
 801627a:	6123      	str	r3, [r4, #16]
 801627c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801627e:	f04f 0900 	mov.w	r9, #0
 8016282:	e7db      	b.n	801623c <_printf_float+0x154>
 8016284:	b913      	cbnz	r3, 801628c <_printf_float+0x1a4>
 8016286:	6822      	ldr	r2, [r4, #0]
 8016288:	07d2      	lsls	r2, r2, #31
 801628a:	d501      	bpl.n	8016290 <_printf_float+0x1a8>
 801628c:	3302      	adds	r3, #2
 801628e:	e7f4      	b.n	801627a <_printf_float+0x192>
 8016290:	2301      	movs	r3, #1
 8016292:	e7f2      	b.n	801627a <_printf_float+0x192>
 8016294:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801629a:	4299      	cmp	r1, r3
 801629c:	db05      	blt.n	80162aa <_printf_float+0x1c2>
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	6121      	str	r1, [r4, #16]
 80162a2:	07d8      	lsls	r0, r3, #31
 80162a4:	d5ea      	bpl.n	801627c <_printf_float+0x194>
 80162a6:	1c4b      	adds	r3, r1, #1
 80162a8:	e7e7      	b.n	801627a <_printf_float+0x192>
 80162aa:	2900      	cmp	r1, #0
 80162ac:	bfd4      	ite	le
 80162ae:	f1c1 0202 	rsble	r2, r1, #2
 80162b2:	2201      	movgt	r2, #1
 80162b4:	4413      	add	r3, r2
 80162b6:	e7e0      	b.n	801627a <_printf_float+0x192>
 80162b8:	6823      	ldr	r3, [r4, #0]
 80162ba:	055a      	lsls	r2, r3, #21
 80162bc:	d407      	bmi.n	80162ce <_printf_float+0x1e6>
 80162be:	6923      	ldr	r3, [r4, #16]
 80162c0:	4642      	mov	r2, r8
 80162c2:	4631      	mov	r1, r6
 80162c4:	4628      	mov	r0, r5
 80162c6:	47b8      	blx	r7
 80162c8:	3001      	adds	r0, #1
 80162ca:	d12b      	bne.n	8016324 <_printf_float+0x23c>
 80162cc:	e767      	b.n	801619e <_printf_float+0xb6>
 80162ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80162d2:	f240 80dd 	bls.w	8016490 <_printf_float+0x3a8>
 80162d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80162da:	2200      	movs	r2, #0
 80162dc:	2300      	movs	r3, #0
 80162de:	f7ea fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80162e2:	2800      	cmp	r0, #0
 80162e4:	d033      	beq.n	801634e <_printf_float+0x266>
 80162e6:	4a37      	ldr	r2, [pc, #220]	@ (80163c4 <_printf_float+0x2dc>)
 80162e8:	2301      	movs	r3, #1
 80162ea:	4631      	mov	r1, r6
 80162ec:	4628      	mov	r0, r5
 80162ee:	47b8      	blx	r7
 80162f0:	3001      	adds	r0, #1
 80162f2:	f43f af54 	beq.w	801619e <_printf_float+0xb6>
 80162f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80162fa:	4543      	cmp	r3, r8
 80162fc:	db02      	blt.n	8016304 <_printf_float+0x21c>
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	07d8      	lsls	r0, r3, #31
 8016302:	d50f      	bpl.n	8016324 <_printf_float+0x23c>
 8016304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016308:	4631      	mov	r1, r6
 801630a:	4628      	mov	r0, r5
 801630c:	47b8      	blx	r7
 801630e:	3001      	adds	r0, #1
 8016310:	f43f af45 	beq.w	801619e <_printf_float+0xb6>
 8016314:	f04f 0900 	mov.w	r9, #0
 8016318:	f108 38ff 	add.w	r8, r8, #4294967295
 801631c:	f104 0a1a 	add.w	sl, r4, #26
 8016320:	45c8      	cmp	r8, r9
 8016322:	dc09      	bgt.n	8016338 <_printf_float+0x250>
 8016324:	6823      	ldr	r3, [r4, #0]
 8016326:	079b      	lsls	r3, r3, #30
 8016328:	f100 8103 	bmi.w	8016532 <_printf_float+0x44a>
 801632c:	68e0      	ldr	r0, [r4, #12]
 801632e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016330:	4298      	cmp	r0, r3
 8016332:	bfb8      	it	lt
 8016334:	4618      	movlt	r0, r3
 8016336:	e734      	b.n	80161a2 <_printf_float+0xba>
 8016338:	2301      	movs	r3, #1
 801633a:	4652      	mov	r2, sl
 801633c:	4631      	mov	r1, r6
 801633e:	4628      	mov	r0, r5
 8016340:	47b8      	blx	r7
 8016342:	3001      	adds	r0, #1
 8016344:	f43f af2b 	beq.w	801619e <_printf_float+0xb6>
 8016348:	f109 0901 	add.w	r9, r9, #1
 801634c:	e7e8      	b.n	8016320 <_printf_float+0x238>
 801634e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016350:	2b00      	cmp	r3, #0
 8016352:	dc39      	bgt.n	80163c8 <_printf_float+0x2e0>
 8016354:	4a1b      	ldr	r2, [pc, #108]	@ (80163c4 <_printf_float+0x2dc>)
 8016356:	2301      	movs	r3, #1
 8016358:	4631      	mov	r1, r6
 801635a:	4628      	mov	r0, r5
 801635c:	47b8      	blx	r7
 801635e:	3001      	adds	r0, #1
 8016360:	f43f af1d 	beq.w	801619e <_printf_float+0xb6>
 8016364:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016368:	ea59 0303 	orrs.w	r3, r9, r3
 801636c:	d102      	bne.n	8016374 <_printf_float+0x28c>
 801636e:	6823      	ldr	r3, [r4, #0]
 8016370:	07d9      	lsls	r1, r3, #31
 8016372:	d5d7      	bpl.n	8016324 <_printf_float+0x23c>
 8016374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016378:	4631      	mov	r1, r6
 801637a:	4628      	mov	r0, r5
 801637c:	47b8      	blx	r7
 801637e:	3001      	adds	r0, #1
 8016380:	f43f af0d 	beq.w	801619e <_printf_float+0xb6>
 8016384:	f04f 0a00 	mov.w	sl, #0
 8016388:	f104 0b1a 	add.w	fp, r4, #26
 801638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801638e:	425b      	negs	r3, r3
 8016390:	4553      	cmp	r3, sl
 8016392:	dc01      	bgt.n	8016398 <_printf_float+0x2b0>
 8016394:	464b      	mov	r3, r9
 8016396:	e793      	b.n	80162c0 <_printf_float+0x1d8>
 8016398:	2301      	movs	r3, #1
 801639a:	465a      	mov	r2, fp
 801639c:	4631      	mov	r1, r6
 801639e:	4628      	mov	r0, r5
 80163a0:	47b8      	blx	r7
 80163a2:	3001      	adds	r0, #1
 80163a4:	f43f aefb 	beq.w	801619e <_printf_float+0xb6>
 80163a8:	f10a 0a01 	add.w	sl, sl, #1
 80163ac:	e7ee      	b.n	801638c <_printf_float+0x2a4>
 80163ae:	bf00      	nop
 80163b0:	7fefffff 	.word	0x7fefffff
 80163b4:	08018dbc 	.word	0x08018dbc
 80163b8:	08018dc0 	.word	0x08018dc0
 80163bc:	08018dc4 	.word	0x08018dc4
 80163c0:	08018dc8 	.word	0x08018dc8
 80163c4:	08018dcc 	.word	0x08018dcc
 80163c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80163ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80163ce:	4553      	cmp	r3, sl
 80163d0:	bfa8      	it	ge
 80163d2:	4653      	movge	r3, sl
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	4699      	mov	r9, r3
 80163d8:	dc36      	bgt.n	8016448 <_printf_float+0x360>
 80163da:	f04f 0b00 	mov.w	fp, #0
 80163de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80163e2:	f104 021a 	add.w	r2, r4, #26
 80163e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80163e8:	9306      	str	r3, [sp, #24]
 80163ea:	eba3 0309 	sub.w	r3, r3, r9
 80163ee:	455b      	cmp	r3, fp
 80163f0:	dc31      	bgt.n	8016456 <_printf_float+0x36e>
 80163f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163f4:	459a      	cmp	sl, r3
 80163f6:	dc3a      	bgt.n	801646e <_printf_float+0x386>
 80163f8:	6823      	ldr	r3, [r4, #0]
 80163fa:	07da      	lsls	r2, r3, #31
 80163fc:	d437      	bmi.n	801646e <_printf_float+0x386>
 80163fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016400:	ebaa 0903 	sub.w	r9, sl, r3
 8016404:	9b06      	ldr	r3, [sp, #24]
 8016406:	ebaa 0303 	sub.w	r3, sl, r3
 801640a:	4599      	cmp	r9, r3
 801640c:	bfa8      	it	ge
 801640e:	4699      	movge	r9, r3
 8016410:	f1b9 0f00 	cmp.w	r9, #0
 8016414:	dc33      	bgt.n	801647e <_printf_float+0x396>
 8016416:	f04f 0800 	mov.w	r8, #0
 801641a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801641e:	f104 0b1a 	add.w	fp, r4, #26
 8016422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016424:	ebaa 0303 	sub.w	r3, sl, r3
 8016428:	eba3 0309 	sub.w	r3, r3, r9
 801642c:	4543      	cmp	r3, r8
 801642e:	f77f af79 	ble.w	8016324 <_printf_float+0x23c>
 8016432:	2301      	movs	r3, #1
 8016434:	465a      	mov	r2, fp
 8016436:	4631      	mov	r1, r6
 8016438:	4628      	mov	r0, r5
 801643a:	47b8      	blx	r7
 801643c:	3001      	adds	r0, #1
 801643e:	f43f aeae 	beq.w	801619e <_printf_float+0xb6>
 8016442:	f108 0801 	add.w	r8, r8, #1
 8016446:	e7ec      	b.n	8016422 <_printf_float+0x33a>
 8016448:	4642      	mov	r2, r8
 801644a:	4631      	mov	r1, r6
 801644c:	4628      	mov	r0, r5
 801644e:	47b8      	blx	r7
 8016450:	3001      	adds	r0, #1
 8016452:	d1c2      	bne.n	80163da <_printf_float+0x2f2>
 8016454:	e6a3      	b.n	801619e <_printf_float+0xb6>
 8016456:	2301      	movs	r3, #1
 8016458:	4631      	mov	r1, r6
 801645a:	4628      	mov	r0, r5
 801645c:	9206      	str	r2, [sp, #24]
 801645e:	47b8      	blx	r7
 8016460:	3001      	adds	r0, #1
 8016462:	f43f ae9c 	beq.w	801619e <_printf_float+0xb6>
 8016466:	9a06      	ldr	r2, [sp, #24]
 8016468:	f10b 0b01 	add.w	fp, fp, #1
 801646c:	e7bb      	b.n	80163e6 <_printf_float+0x2fe>
 801646e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016472:	4631      	mov	r1, r6
 8016474:	4628      	mov	r0, r5
 8016476:	47b8      	blx	r7
 8016478:	3001      	adds	r0, #1
 801647a:	d1c0      	bne.n	80163fe <_printf_float+0x316>
 801647c:	e68f      	b.n	801619e <_printf_float+0xb6>
 801647e:	9a06      	ldr	r2, [sp, #24]
 8016480:	464b      	mov	r3, r9
 8016482:	4442      	add	r2, r8
 8016484:	4631      	mov	r1, r6
 8016486:	4628      	mov	r0, r5
 8016488:	47b8      	blx	r7
 801648a:	3001      	adds	r0, #1
 801648c:	d1c3      	bne.n	8016416 <_printf_float+0x32e>
 801648e:	e686      	b.n	801619e <_printf_float+0xb6>
 8016490:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016494:	f1ba 0f01 	cmp.w	sl, #1
 8016498:	dc01      	bgt.n	801649e <_printf_float+0x3b6>
 801649a:	07db      	lsls	r3, r3, #31
 801649c:	d536      	bpl.n	801650c <_printf_float+0x424>
 801649e:	2301      	movs	r3, #1
 80164a0:	4642      	mov	r2, r8
 80164a2:	4631      	mov	r1, r6
 80164a4:	4628      	mov	r0, r5
 80164a6:	47b8      	blx	r7
 80164a8:	3001      	adds	r0, #1
 80164aa:	f43f ae78 	beq.w	801619e <_printf_float+0xb6>
 80164ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164b2:	4631      	mov	r1, r6
 80164b4:	4628      	mov	r0, r5
 80164b6:	47b8      	blx	r7
 80164b8:	3001      	adds	r0, #1
 80164ba:	f43f ae70 	beq.w	801619e <_printf_float+0xb6>
 80164be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80164c2:	2200      	movs	r2, #0
 80164c4:	2300      	movs	r3, #0
 80164c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80164ca:	f7ea fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80164ce:	b9c0      	cbnz	r0, 8016502 <_printf_float+0x41a>
 80164d0:	4653      	mov	r3, sl
 80164d2:	f108 0201 	add.w	r2, r8, #1
 80164d6:	4631      	mov	r1, r6
 80164d8:	4628      	mov	r0, r5
 80164da:	47b8      	blx	r7
 80164dc:	3001      	adds	r0, #1
 80164de:	d10c      	bne.n	80164fa <_printf_float+0x412>
 80164e0:	e65d      	b.n	801619e <_printf_float+0xb6>
 80164e2:	2301      	movs	r3, #1
 80164e4:	465a      	mov	r2, fp
 80164e6:	4631      	mov	r1, r6
 80164e8:	4628      	mov	r0, r5
 80164ea:	47b8      	blx	r7
 80164ec:	3001      	adds	r0, #1
 80164ee:	f43f ae56 	beq.w	801619e <_printf_float+0xb6>
 80164f2:	f108 0801 	add.w	r8, r8, #1
 80164f6:	45d0      	cmp	r8, sl
 80164f8:	dbf3      	blt.n	80164e2 <_printf_float+0x3fa>
 80164fa:	464b      	mov	r3, r9
 80164fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016500:	e6df      	b.n	80162c2 <_printf_float+0x1da>
 8016502:	f04f 0800 	mov.w	r8, #0
 8016506:	f104 0b1a 	add.w	fp, r4, #26
 801650a:	e7f4      	b.n	80164f6 <_printf_float+0x40e>
 801650c:	2301      	movs	r3, #1
 801650e:	4642      	mov	r2, r8
 8016510:	e7e1      	b.n	80164d6 <_printf_float+0x3ee>
 8016512:	2301      	movs	r3, #1
 8016514:	464a      	mov	r2, r9
 8016516:	4631      	mov	r1, r6
 8016518:	4628      	mov	r0, r5
 801651a:	47b8      	blx	r7
 801651c:	3001      	adds	r0, #1
 801651e:	f43f ae3e 	beq.w	801619e <_printf_float+0xb6>
 8016522:	f108 0801 	add.w	r8, r8, #1
 8016526:	68e3      	ldr	r3, [r4, #12]
 8016528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801652a:	1a5b      	subs	r3, r3, r1
 801652c:	4543      	cmp	r3, r8
 801652e:	dcf0      	bgt.n	8016512 <_printf_float+0x42a>
 8016530:	e6fc      	b.n	801632c <_printf_float+0x244>
 8016532:	f04f 0800 	mov.w	r8, #0
 8016536:	f104 0919 	add.w	r9, r4, #25
 801653a:	e7f4      	b.n	8016526 <_printf_float+0x43e>

0801653c <_printf_common>:
 801653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016540:	4616      	mov	r6, r2
 8016542:	4698      	mov	r8, r3
 8016544:	688a      	ldr	r2, [r1, #8]
 8016546:	690b      	ldr	r3, [r1, #16]
 8016548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801654c:	4293      	cmp	r3, r2
 801654e:	bfb8      	it	lt
 8016550:	4613      	movlt	r3, r2
 8016552:	6033      	str	r3, [r6, #0]
 8016554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016558:	4607      	mov	r7, r0
 801655a:	460c      	mov	r4, r1
 801655c:	b10a      	cbz	r2, 8016562 <_printf_common+0x26>
 801655e:	3301      	adds	r3, #1
 8016560:	6033      	str	r3, [r6, #0]
 8016562:	6823      	ldr	r3, [r4, #0]
 8016564:	0699      	lsls	r1, r3, #26
 8016566:	bf42      	ittt	mi
 8016568:	6833      	ldrmi	r3, [r6, #0]
 801656a:	3302      	addmi	r3, #2
 801656c:	6033      	strmi	r3, [r6, #0]
 801656e:	6825      	ldr	r5, [r4, #0]
 8016570:	f015 0506 	ands.w	r5, r5, #6
 8016574:	d106      	bne.n	8016584 <_printf_common+0x48>
 8016576:	f104 0a19 	add.w	sl, r4, #25
 801657a:	68e3      	ldr	r3, [r4, #12]
 801657c:	6832      	ldr	r2, [r6, #0]
 801657e:	1a9b      	subs	r3, r3, r2
 8016580:	42ab      	cmp	r3, r5
 8016582:	dc26      	bgt.n	80165d2 <_printf_common+0x96>
 8016584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016588:	6822      	ldr	r2, [r4, #0]
 801658a:	3b00      	subs	r3, #0
 801658c:	bf18      	it	ne
 801658e:	2301      	movne	r3, #1
 8016590:	0692      	lsls	r2, r2, #26
 8016592:	d42b      	bmi.n	80165ec <_printf_common+0xb0>
 8016594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016598:	4641      	mov	r1, r8
 801659a:	4638      	mov	r0, r7
 801659c:	47c8      	blx	r9
 801659e:	3001      	adds	r0, #1
 80165a0:	d01e      	beq.n	80165e0 <_printf_common+0xa4>
 80165a2:	6823      	ldr	r3, [r4, #0]
 80165a4:	6922      	ldr	r2, [r4, #16]
 80165a6:	f003 0306 	and.w	r3, r3, #6
 80165aa:	2b04      	cmp	r3, #4
 80165ac:	bf02      	ittt	eq
 80165ae:	68e5      	ldreq	r5, [r4, #12]
 80165b0:	6833      	ldreq	r3, [r6, #0]
 80165b2:	1aed      	subeq	r5, r5, r3
 80165b4:	68a3      	ldr	r3, [r4, #8]
 80165b6:	bf0c      	ite	eq
 80165b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80165bc:	2500      	movne	r5, #0
 80165be:	4293      	cmp	r3, r2
 80165c0:	bfc4      	itt	gt
 80165c2:	1a9b      	subgt	r3, r3, r2
 80165c4:	18ed      	addgt	r5, r5, r3
 80165c6:	2600      	movs	r6, #0
 80165c8:	341a      	adds	r4, #26
 80165ca:	42b5      	cmp	r5, r6
 80165cc:	d11a      	bne.n	8016604 <_printf_common+0xc8>
 80165ce:	2000      	movs	r0, #0
 80165d0:	e008      	b.n	80165e4 <_printf_common+0xa8>
 80165d2:	2301      	movs	r3, #1
 80165d4:	4652      	mov	r2, sl
 80165d6:	4641      	mov	r1, r8
 80165d8:	4638      	mov	r0, r7
 80165da:	47c8      	blx	r9
 80165dc:	3001      	adds	r0, #1
 80165de:	d103      	bne.n	80165e8 <_printf_common+0xac>
 80165e0:	f04f 30ff 	mov.w	r0, #4294967295
 80165e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165e8:	3501      	adds	r5, #1
 80165ea:	e7c6      	b.n	801657a <_printf_common+0x3e>
 80165ec:	18e1      	adds	r1, r4, r3
 80165ee:	1c5a      	adds	r2, r3, #1
 80165f0:	2030      	movs	r0, #48	@ 0x30
 80165f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80165f6:	4422      	add	r2, r4
 80165f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80165fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016600:	3302      	adds	r3, #2
 8016602:	e7c7      	b.n	8016594 <_printf_common+0x58>
 8016604:	2301      	movs	r3, #1
 8016606:	4622      	mov	r2, r4
 8016608:	4641      	mov	r1, r8
 801660a:	4638      	mov	r0, r7
 801660c:	47c8      	blx	r9
 801660e:	3001      	adds	r0, #1
 8016610:	d0e6      	beq.n	80165e0 <_printf_common+0xa4>
 8016612:	3601      	adds	r6, #1
 8016614:	e7d9      	b.n	80165ca <_printf_common+0x8e>
	...

08016618 <_printf_i>:
 8016618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801661c:	7e0f      	ldrb	r7, [r1, #24]
 801661e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016620:	2f78      	cmp	r7, #120	@ 0x78
 8016622:	4691      	mov	r9, r2
 8016624:	4680      	mov	r8, r0
 8016626:	460c      	mov	r4, r1
 8016628:	469a      	mov	sl, r3
 801662a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801662e:	d807      	bhi.n	8016640 <_printf_i+0x28>
 8016630:	2f62      	cmp	r7, #98	@ 0x62
 8016632:	d80a      	bhi.n	801664a <_printf_i+0x32>
 8016634:	2f00      	cmp	r7, #0
 8016636:	f000 80d2 	beq.w	80167de <_printf_i+0x1c6>
 801663a:	2f58      	cmp	r7, #88	@ 0x58
 801663c:	f000 80b9 	beq.w	80167b2 <_printf_i+0x19a>
 8016640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016648:	e03a      	b.n	80166c0 <_printf_i+0xa8>
 801664a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801664e:	2b15      	cmp	r3, #21
 8016650:	d8f6      	bhi.n	8016640 <_printf_i+0x28>
 8016652:	a101      	add	r1, pc, #4	@ (adr r1, 8016658 <_printf_i+0x40>)
 8016654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016658:	080166b1 	.word	0x080166b1
 801665c:	080166c5 	.word	0x080166c5
 8016660:	08016641 	.word	0x08016641
 8016664:	08016641 	.word	0x08016641
 8016668:	08016641 	.word	0x08016641
 801666c:	08016641 	.word	0x08016641
 8016670:	080166c5 	.word	0x080166c5
 8016674:	08016641 	.word	0x08016641
 8016678:	08016641 	.word	0x08016641
 801667c:	08016641 	.word	0x08016641
 8016680:	08016641 	.word	0x08016641
 8016684:	080167c5 	.word	0x080167c5
 8016688:	080166ef 	.word	0x080166ef
 801668c:	0801677f 	.word	0x0801677f
 8016690:	08016641 	.word	0x08016641
 8016694:	08016641 	.word	0x08016641
 8016698:	080167e7 	.word	0x080167e7
 801669c:	08016641 	.word	0x08016641
 80166a0:	080166ef 	.word	0x080166ef
 80166a4:	08016641 	.word	0x08016641
 80166a8:	08016641 	.word	0x08016641
 80166ac:	08016787 	.word	0x08016787
 80166b0:	6833      	ldr	r3, [r6, #0]
 80166b2:	1d1a      	adds	r2, r3, #4
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	6032      	str	r2, [r6, #0]
 80166b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80166bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80166c0:	2301      	movs	r3, #1
 80166c2:	e09d      	b.n	8016800 <_printf_i+0x1e8>
 80166c4:	6833      	ldr	r3, [r6, #0]
 80166c6:	6820      	ldr	r0, [r4, #0]
 80166c8:	1d19      	adds	r1, r3, #4
 80166ca:	6031      	str	r1, [r6, #0]
 80166cc:	0606      	lsls	r6, r0, #24
 80166ce:	d501      	bpl.n	80166d4 <_printf_i+0xbc>
 80166d0:	681d      	ldr	r5, [r3, #0]
 80166d2:	e003      	b.n	80166dc <_printf_i+0xc4>
 80166d4:	0645      	lsls	r5, r0, #25
 80166d6:	d5fb      	bpl.n	80166d0 <_printf_i+0xb8>
 80166d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80166dc:	2d00      	cmp	r5, #0
 80166de:	da03      	bge.n	80166e8 <_printf_i+0xd0>
 80166e0:	232d      	movs	r3, #45	@ 0x2d
 80166e2:	426d      	negs	r5, r5
 80166e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80166e8:	4859      	ldr	r0, [pc, #356]	@ (8016850 <_printf_i+0x238>)
 80166ea:	230a      	movs	r3, #10
 80166ec:	e011      	b.n	8016712 <_printf_i+0xfa>
 80166ee:	6821      	ldr	r1, [r4, #0]
 80166f0:	6833      	ldr	r3, [r6, #0]
 80166f2:	0608      	lsls	r0, r1, #24
 80166f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80166f8:	d402      	bmi.n	8016700 <_printf_i+0xe8>
 80166fa:	0649      	lsls	r1, r1, #25
 80166fc:	bf48      	it	mi
 80166fe:	b2ad      	uxthmi	r5, r5
 8016700:	2f6f      	cmp	r7, #111	@ 0x6f
 8016702:	4853      	ldr	r0, [pc, #332]	@ (8016850 <_printf_i+0x238>)
 8016704:	6033      	str	r3, [r6, #0]
 8016706:	bf14      	ite	ne
 8016708:	230a      	movne	r3, #10
 801670a:	2308      	moveq	r3, #8
 801670c:	2100      	movs	r1, #0
 801670e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016712:	6866      	ldr	r6, [r4, #4]
 8016714:	60a6      	str	r6, [r4, #8]
 8016716:	2e00      	cmp	r6, #0
 8016718:	bfa2      	ittt	ge
 801671a:	6821      	ldrge	r1, [r4, #0]
 801671c:	f021 0104 	bicge.w	r1, r1, #4
 8016720:	6021      	strge	r1, [r4, #0]
 8016722:	b90d      	cbnz	r5, 8016728 <_printf_i+0x110>
 8016724:	2e00      	cmp	r6, #0
 8016726:	d04b      	beq.n	80167c0 <_printf_i+0x1a8>
 8016728:	4616      	mov	r6, r2
 801672a:	fbb5 f1f3 	udiv	r1, r5, r3
 801672e:	fb03 5711 	mls	r7, r3, r1, r5
 8016732:	5dc7      	ldrb	r7, [r0, r7]
 8016734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016738:	462f      	mov	r7, r5
 801673a:	42bb      	cmp	r3, r7
 801673c:	460d      	mov	r5, r1
 801673e:	d9f4      	bls.n	801672a <_printf_i+0x112>
 8016740:	2b08      	cmp	r3, #8
 8016742:	d10b      	bne.n	801675c <_printf_i+0x144>
 8016744:	6823      	ldr	r3, [r4, #0]
 8016746:	07df      	lsls	r7, r3, #31
 8016748:	d508      	bpl.n	801675c <_printf_i+0x144>
 801674a:	6923      	ldr	r3, [r4, #16]
 801674c:	6861      	ldr	r1, [r4, #4]
 801674e:	4299      	cmp	r1, r3
 8016750:	bfde      	ittt	le
 8016752:	2330      	movle	r3, #48	@ 0x30
 8016754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016758:	f106 36ff 	addle.w	r6, r6, #4294967295
 801675c:	1b92      	subs	r2, r2, r6
 801675e:	6122      	str	r2, [r4, #16]
 8016760:	f8cd a000 	str.w	sl, [sp]
 8016764:	464b      	mov	r3, r9
 8016766:	aa03      	add	r2, sp, #12
 8016768:	4621      	mov	r1, r4
 801676a:	4640      	mov	r0, r8
 801676c:	f7ff fee6 	bl	801653c <_printf_common>
 8016770:	3001      	adds	r0, #1
 8016772:	d14a      	bne.n	801680a <_printf_i+0x1f2>
 8016774:	f04f 30ff 	mov.w	r0, #4294967295
 8016778:	b004      	add	sp, #16
 801677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801677e:	6823      	ldr	r3, [r4, #0]
 8016780:	f043 0320 	orr.w	r3, r3, #32
 8016784:	6023      	str	r3, [r4, #0]
 8016786:	4833      	ldr	r0, [pc, #204]	@ (8016854 <_printf_i+0x23c>)
 8016788:	2778      	movs	r7, #120	@ 0x78
 801678a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801678e:	6823      	ldr	r3, [r4, #0]
 8016790:	6831      	ldr	r1, [r6, #0]
 8016792:	061f      	lsls	r7, r3, #24
 8016794:	f851 5b04 	ldr.w	r5, [r1], #4
 8016798:	d402      	bmi.n	80167a0 <_printf_i+0x188>
 801679a:	065f      	lsls	r7, r3, #25
 801679c:	bf48      	it	mi
 801679e:	b2ad      	uxthmi	r5, r5
 80167a0:	6031      	str	r1, [r6, #0]
 80167a2:	07d9      	lsls	r1, r3, #31
 80167a4:	bf44      	itt	mi
 80167a6:	f043 0320 	orrmi.w	r3, r3, #32
 80167aa:	6023      	strmi	r3, [r4, #0]
 80167ac:	b11d      	cbz	r5, 80167b6 <_printf_i+0x19e>
 80167ae:	2310      	movs	r3, #16
 80167b0:	e7ac      	b.n	801670c <_printf_i+0xf4>
 80167b2:	4827      	ldr	r0, [pc, #156]	@ (8016850 <_printf_i+0x238>)
 80167b4:	e7e9      	b.n	801678a <_printf_i+0x172>
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	f023 0320 	bic.w	r3, r3, #32
 80167bc:	6023      	str	r3, [r4, #0]
 80167be:	e7f6      	b.n	80167ae <_printf_i+0x196>
 80167c0:	4616      	mov	r6, r2
 80167c2:	e7bd      	b.n	8016740 <_printf_i+0x128>
 80167c4:	6833      	ldr	r3, [r6, #0]
 80167c6:	6825      	ldr	r5, [r4, #0]
 80167c8:	6961      	ldr	r1, [r4, #20]
 80167ca:	1d18      	adds	r0, r3, #4
 80167cc:	6030      	str	r0, [r6, #0]
 80167ce:	062e      	lsls	r6, r5, #24
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	d501      	bpl.n	80167d8 <_printf_i+0x1c0>
 80167d4:	6019      	str	r1, [r3, #0]
 80167d6:	e002      	b.n	80167de <_printf_i+0x1c6>
 80167d8:	0668      	lsls	r0, r5, #25
 80167da:	d5fb      	bpl.n	80167d4 <_printf_i+0x1bc>
 80167dc:	8019      	strh	r1, [r3, #0]
 80167de:	2300      	movs	r3, #0
 80167e0:	6123      	str	r3, [r4, #16]
 80167e2:	4616      	mov	r6, r2
 80167e4:	e7bc      	b.n	8016760 <_printf_i+0x148>
 80167e6:	6833      	ldr	r3, [r6, #0]
 80167e8:	1d1a      	adds	r2, r3, #4
 80167ea:	6032      	str	r2, [r6, #0]
 80167ec:	681e      	ldr	r6, [r3, #0]
 80167ee:	6862      	ldr	r2, [r4, #4]
 80167f0:	2100      	movs	r1, #0
 80167f2:	4630      	mov	r0, r6
 80167f4:	f7e9 fcec 	bl	80001d0 <memchr>
 80167f8:	b108      	cbz	r0, 80167fe <_printf_i+0x1e6>
 80167fa:	1b80      	subs	r0, r0, r6
 80167fc:	6060      	str	r0, [r4, #4]
 80167fe:	6863      	ldr	r3, [r4, #4]
 8016800:	6123      	str	r3, [r4, #16]
 8016802:	2300      	movs	r3, #0
 8016804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016808:	e7aa      	b.n	8016760 <_printf_i+0x148>
 801680a:	6923      	ldr	r3, [r4, #16]
 801680c:	4632      	mov	r2, r6
 801680e:	4649      	mov	r1, r9
 8016810:	4640      	mov	r0, r8
 8016812:	47d0      	blx	sl
 8016814:	3001      	adds	r0, #1
 8016816:	d0ad      	beq.n	8016774 <_printf_i+0x15c>
 8016818:	6823      	ldr	r3, [r4, #0]
 801681a:	079b      	lsls	r3, r3, #30
 801681c:	d413      	bmi.n	8016846 <_printf_i+0x22e>
 801681e:	68e0      	ldr	r0, [r4, #12]
 8016820:	9b03      	ldr	r3, [sp, #12]
 8016822:	4298      	cmp	r0, r3
 8016824:	bfb8      	it	lt
 8016826:	4618      	movlt	r0, r3
 8016828:	e7a6      	b.n	8016778 <_printf_i+0x160>
 801682a:	2301      	movs	r3, #1
 801682c:	4632      	mov	r2, r6
 801682e:	4649      	mov	r1, r9
 8016830:	4640      	mov	r0, r8
 8016832:	47d0      	blx	sl
 8016834:	3001      	adds	r0, #1
 8016836:	d09d      	beq.n	8016774 <_printf_i+0x15c>
 8016838:	3501      	adds	r5, #1
 801683a:	68e3      	ldr	r3, [r4, #12]
 801683c:	9903      	ldr	r1, [sp, #12]
 801683e:	1a5b      	subs	r3, r3, r1
 8016840:	42ab      	cmp	r3, r5
 8016842:	dcf2      	bgt.n	801682a <_printf_i+0x212>
 8016844:	e7eb      	b.n	801681e <_printf_i+0x206>
 8016846:	2500      	movs	r5, #0
 8016848:	f104 0619 	add.w	r6, r4, #25
 801684c:	e7f5      	b.n	801683a <_printf_i+0x222>
 801684e:	bf00      	nop
 8016850:	08018dce 	.word	0x08018dce
 8016854:	08018ddf 	.word	0x08018ddf

08016858 <std>:
 8016858:	2300      	movs	r3, #0
 801685a:	b510      	push	{r4, lr}
 801685c:	4604      	mov	r4, r0
 801685e:	e9c0 3300 	strd	r3, r3, [r0]
 8016862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016866:	6083      	str	r3, [r0, #8]
 8016868:	8181      	strh	r1, [r0, #12]
 801686a:	6643      	str	r3, [r0, #100]	@ 0x64
 801686c:	81c2      	strh	r2, [r0, #14]
 801686e:	6183      	str	r3, [r0, #24]
 8016870:	4619      	mov	r1, r3
 8016872:	2208      	movs	r2, #8
 8016874:	305c      	adds	r0, #92	@ 0x5c
 8016876:	f000 f99b 	bl	8016bb0 <memset>
 801687a:	4b0d      	ldr	r3, [pc, #52]	@ (80168b0 <std+0x58>)
 801687c:	6263      	str	r3, [r4, #36]	@ 0x24
 801687e:	4b0d      	ldr	r3, [pc, #52]	@ (80168b4 <std+0x5c>)
 8016880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016882:	4b0d      	ldr	r3, [pc, #52]	@ (80168b8 <std+0x60>)
 8016884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016886:	4b0d      	ldr	r3, [pc, #52]	@ (80168bc <std+0x64>)
 8016888:	6323      	str	r3, [r4, #48]	@ 0x30
 801688a:	4b0d      	ldr	r3, [pc, #52]	@ (80168c0 <std+0x68>)
 801688c:	6224      	str	r4, [r4, #32]
 801688e:	429c      	cmp	r4, r3
 8016890:	d006      	beq.n	80168a0 <std+0x48>
 8016892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016896:	4294      	cmp	r4, r2
 8016898:	d002      	beq.n	80168a0 <std+0x48>
 801689a:	33d0      	adds	r3, #208	@ 0xd0
 801689c:	429c      	cmp	r4, r3
 801689e:	d105      	bne.n	80168ac <std+0x54>
 80168a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80168a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168a8:	f000 ba0e 	b.w	8016cc8 <__retarget_lock_init_recursive>
 80168ac:	bd10      	pop	{r4, pc}
 80168ae:	bf00      	nop
 80168b0:	08016a01 	.word	0x08016a01
 80168b4:	08016a23 	.word	0x08016a23
 80168b8:	08016a5b 	.word	0x08016a5b
 80168bc:	08016a7f 	.word	0x08016a7f
 80168c0:	20001a58 	.word	0x20001a58

080168c4 <stdio_exit_handler>:
 80168c4:	4a02      	ldr	r2, [pc, #8]	@ (80168d0 <stdio_exit_handler+0xc>)
 80168c6:	4903      	ldr	r1, [pc, #12]	@ (80168d4 <stdio_exit_handler+0x10>)
 80168c8:	4803      	ldr	r0, [pc, #12]	@ (80168d8 <stdio_exit_handler+0x14>)
 80168ca:	f000 b869 	b.w	80169a0 <_fwalk_sglue>
 80168ce:	bf00      	nop
 80168d0:	20000034 	.word	0x20000034
 80168d4:	080184ad 	.word	0x080184ad
 80168d8:	20000044 	.word	0x20000044

080168dc <cleanup_stdio>:
 80168dc:	6841      	ldr	r1, [r0, #4]
 80168de:	4b0c      	ldr	r3, [pc, #48]	@ (8016910 <cleanup_stdio+0x34>)
 80168e0:	4299      	cmp	r1, r3
 80168e2:	b510      	push	{r4, lr}
 80168e4:	4604      	mov	r4, r0
 80168e6:	d001      	beq.n	80168ec <cleanup_stdio+0x10>
 80168e8:	f001 fde0 	bl	80184ac <_fflush_r>
 80168ec:	68a1      	ldr	r1, [r4, #8]
 80168ee:	4b09      	ldr	r3, [pc, #36]	@ (8016914 <cleanup_stdio+0x38>)
 80168f0:	4299      	cmp	r1, r3
 80168f2:	d002      	beq.n	80168fa <cleanup_stdio+0x1e>
 80168f4:	4620      	mov	r0, r4
 80168f6:	f001 fdd9 	bl	80184ac <_fflush_r>
 80168fa:	68e1      	ldr	r1, [r4, #12]
 80168fc:	4b06      	ldr	r3, [pc, #24]	@ (8016918 <cleanup_stdio+0x3c>)
 80168fe:	4299      	cmp	r1, r3
 8016900:	d004      	beq.n	801690c <cleanup_stdio+0x30>
 8016902:	4620      	mov	r0, r4
 8016904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016908:	f001 bdd0 	b.w	80184ac <_fflush_r>
 801690c:	bd10      	pop	{r4, pc}
 801690e:	bf00      	nop
 8016910:	20001a58 	.word	0x20001a58
 8016914:	20001ac0 	.word	0x20001ac0
 8016918:	20001b28 	.word	0x20001b28

0801691c <global_stdio_init.part.0>:
 801691c:	b510      	push	{r4, lr}
 801691e:	4b0b      	ldr	r3, [pc, #44]	@ (801694c <global_stdio_init.part.0+0x30>)
 8016920:	4c0b      	ldr	r4, [pc, #44]	@ (8016950 <global_stdio_init.part.0+0x34>)
 8016922:	4a0c      	ldr	r2, [pc, #48]	@ (8016954 <global_stdio_init.part.0+0x38>)
 8016924:	601a      	str	r2, [r3, #0]
 8016926:	4620      	mov	r0, r4
 8016928:	2200      	movs	r2, #0
 801692a:	2104      	movs	r1, #4
 801692c:	f7ff ff94 	bl	8016858 <std>
 8016930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016934:	2201      	movs	r2, #1
 8016936:	2109      	movs	r1, #9
 8016938:	f7ff ff8e 	bl	8016858 <std>
 801693c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016940:	2202      	movs	r2, #2
 8016942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016946:	2112      	movs	r1, #18
 8016948:	f7ff bf86 	b.w	8016858 <std>
 801694c:	20001b90 	.word	0x20001b90
 8016950:	20001a58 	.word	0x20001a58
 8016954:	080168c5 	.word	0x080168c5

08016958 <__sfp_lock_acquire>:
 8016958:	4801      	ldr	r0, [pc, #4]	@ (8016960 <__sfp_lock_acquire+0x8>)
 801695a:	f000 b9b6 	b.w	8016cca <__retarget_lock_acquire_recursive>
 801695e:	bf00      	nop
 8016960:	20001b99 	.word	0x20001b99

08016964 <__sfp_lock_release>:
 8016964:	4801      	ldr	r0, [pc, #4]	@ (801696c <__sfp_lock_release+0x8>)
 8016966:	f000 b9b1 	b.w	8016ccc <__retarget_lock_release_recursive>
 801696a:	bf00      	nop
 801696c:	20001b99 	.word	0x20001b99

08016970 <__sinit>:
 8016970:	b510      	push	{r4, lr}
 8016972:	4604      	mov	r4, r0
 8016974:	f7ff fff0 	bl	8016958 <__sfp_lock_acquire>
 8016978:	6a23      	ldr	r3, [r4, #32]
 801697a:	b11b      	cbz	r3, 8016984 <__sinit+0x14>
 801697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016980:	f7ff bff0 	b.w	8016964 <__sfp_lock_release>
 8016984:	4b04      	ldr	r3, [pc, #16]	@ (8016998 <__sinit+0x28>)
 8016986:	6223      	str	r3, [r4, #32]
 8016988:	4b04      	ldr	r3, [pc, #16]	@ (801699c <__sinit+0x2c>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d1f5      	bne.n	801697c <__sinit+0xc>
 8016990:	f7ff ffc4 	bl	801691c <global_stdio_init.part.0>
 8016994:	e7f2      	b.n	801697c <__sinit+0xc>
 8016996:	bf00      	nop
 8016998:	080168dd 	.word	0x080168dd
 801699c:	20001b90 	.word	0x20001b90

080169a0 <_fwalk_sglue>:
 80169a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169a4:	4607      	mov	r7, r0
 80169a6:	4688      	mov	r8, r1
 80169a8:	4614      	mov	r4, r2
 80169aa:	2600      	movs	r6, #0
 80169ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169b0:	f1b9 0901 	subs.w	r9, r9, #1
 80169b4:	d505      	bpl.n	80169c2 <_fwalk_sglue+0x22>
 80169b6:	6824      	ldr	r4, [r4, #0]
 80169b8:	2c00      	cmp	r4, #0
 80169ba:	d1f7      	bne.n	80169ac <_fwalk_sglue+0xc>
 80169bc:	4630      	mov	r0, r6
 80169be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169c2:	89ab      	ldrh	r3, [r5, #12]
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	d907      	bls.n	80169d8 <_fwalk_sglue+0x38>
 80169c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169cc:	3301      	adds	r3, #1
 80169ce:	d003      	beq.n	80169d8 <_fwalk_sglue+0x38>
 80169d0:	4629      	mov	r1, r5
 80169d2:	4638      	mov	r0, r7
 80169d4:	47c0      	blx	r8
 80169d6:	4306      	orrs	r6, r0
 80169d8:	3568      	adds	r5, #104	@ 0x68
 80169da:	e7e9      	b.n	80169b0 <_fwalk_sglue+0x10>

080169dc <iprintf>:
 80169dc:	b40f      	push	{r0, r1, r2, r3}
 80169de:	b507      	push	{r0, r1, r2, lr}
 80169e0:	4906      	ldr	r1, [pc, #24]	@ (80169fc <iprintf+0x20>)
 80169e2:	ab04      	add	r3, sp, #16
 80169e4:	6808      	ldr	r0, [r1, #0]
 80169e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80169ea:	6881      	ldr	r1, [r0, #8]
 80169ec:	9301      	str	r3, [sp, #4]
 80169ee:	f001 fbc1 	bl	8018174 <_vfiprintf_r>
 80169f2:	b003      	add	sp, #12
 80169f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80169f8:	b004      	add	sp, #16
 80169fa:	4770      	bx	lr
 80169fc:	20000040 	.word	0x20000040

08016a00 <__sread>:
 8016a00:	b510      	push	{r4, lr}
 8016a02:	460c      	mov	r4, r1
 8016a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a08:	f000 f900 	bl	8016c0c <_read_r>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	bfab      	itete	ge
 8016a10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016a12:	89a3      	ldrhlt	r3, [r4, #12]
 8016a14:	181b      	addge	r3, r3, r0
 8016a16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016a1a:	bfac      	ite	ge
 8016a1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016a1e:	81a3      	strhlt	r3, [r4, #12]
 8016a20:	bd10      	pop	{r4, pc}

08016a22 <__swrite>:
 8016a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a26:	461f      	mov	r7, r3
 8016a28:	898b      	ldrh	r3, [r1, #12]
 8016a2a:	05db      	lsls	r3, r3, #23
 8016a2c:	4605      	mov	r5, r0
 8016a2e:	460c      	mov	r4, r1
 8016a30:	4616      	mov	r6, r2
 8016a32:	d505      	bpl.n	8016a40 <__swrite+0x1e>
 8016a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a38:	2302      	movs	r3, #2
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	f000 f8d4 	bl	8016be8 <_lseek_r>
 8016a40:	89a3      	ldrh	r3, [r4, #12]
 8016a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016a4a:	81a3      	strh	r3, [r4, #12]
 8016a4c:	4632      	mov	r2, r6
 8016a4e:	463b      	mov	r3, r7
 8016a50:	4628      	mov	r0, r5
 8016a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a56:	f000 b8fb 	b.w	8016c50 <_write_r>

08016a5a <__sseek>:
 8016a5a:	b510      	push	{r4, lr}
 8016a5c:	460c      	mov	r4, r1
 8016a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a62:	f000 f8c1 	bl	8016be8 <_lseek_r>
 8016a66:	1c43      	adds	r3, r0, #1
 8016a68:	89a3      	ldrh	r3, [r4, #12]
 8016a6a:	bf15      	itete	ne
 8016a6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016a6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016a72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016a76:	81a3      	strheq	r3, [r4, #12]
 8016a78:	bf18      	it	ne
 8016a7a:	81a3      	strhne	r3, [r4, #12]
 8016a7c:	bd10      	pop	{r4, pc}

08016a7e <__sclose>:
 8016a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a82:	f000 b8a1 	b.w	8016bc8 <_close_r>

08016a86 <__swbuf_r>:
 8016a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a88:	460e      	mov	r6, r1
 8016a8a:	4614      	mov	r4, r2
 8016a8c:	4605      	mov	r5, r0
 8016a8e:	b118      	cbz	r0, 8016a98 <__swbuf_r+0x12>
 8016a90:	6a03      	ldr	r3, [r0, #32]
 8016a92:	b90b      	cbnz	r3, 8016a98 <__swbuf_r+0x12>
 8016a94:	f7ff ff6c 	bl	8016970 <__sinit>
 8016a98:	69a3      	ldr	r3, [r4, #24]
 8016a9a:	60a3      	str	r3, [r4, #8]
 8016a9c:	89a3      	ldrh	r3, [r4, #12]
 8016a9e:	071a      	lsls	r2, r3, #28
 8016aa0:	d501      	bpl.n	8016aa6 <__swbuf_r+0x20>
 8016aa2:	6923      	ldr	r3, [r4, #16]
 8016aa4:	b943      	cbnz	r3, 8016ab8 <__swbuf_r+0x32>
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	4628      	mov	r0, r5
 8016aaa:	f000 f82b 	bl	8016b04 <__swsetup_r>
 8016aae:	b118      	cbz	r0, 8016ab8 <__swbuf_r+0x32>
 8016ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8016ab4:	4638      	mov	r0, r7
 8016ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ab8:	6823      	ldr	r3, [r4, #0]
 8016aba:	6922      	ldr	r2, [r4, #16]
 8016abc:	1a98      	subs	r0, r3, r2
 8016abe:	6963      	ldr	r3, [r4, #20]
 8016ac0:	b2f6      	uxtb	r6, r6
 8016ac2:	4283      	cmp	r3, r0
 8016ac4:	4637      	mov	r7, r6
 8016ac6:	dc05      	bgt.n	8016ad4 <__swbuf_r+0x4e>
 8016ac8:	4621      	mov	r1, r4
 8016aca:	4628      	mov	r0, r5
 8016acc:	f001 fcee 	bl	80184ac <_fflush_r>
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d1ed      	bne.n	8016ab0 <__swbuf_r+0x2a>
 8016ad4:	68a3      	ldr	r3, [r4, #8]
 8016ad6:	3b01      	subs	r3, #1
 8016ad8:	60a3      	str	r3, [r4, #8]
 8016ada:	6823      	ldr	r3, [r4, #0]
 8016adc:	1c5a      	adds	r2, r3, #1
 8016ade:	6022      	str	r2, [r4, #0]
 8016ae0:	701e      	strb	r6, [r3, #0]
 8016ae2:	6962      	ldr	r2, [r4, #20]
 8016ae4:	1c43      	adds	r3, r0, #1
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d004      	beq.n	8016af4 <__swbuf_r+0x6e>
 8016aea:	89a3      	ldrh	r3, [r4, #12]
 8016aec:	07db      	lsls	r3, r3, #31
 8016aee:	d5e1      	bpl.n	8016ab4 <__swbuf_r+0x2e>
 8016af0:	2e0a      	cmp	r6, #10
 8016af2:	d1df      	bne.n	8016ab4 <__swbuf_r+0x2e>
 8016af4:	4621      	mov	r1, r4
 8016af6:	4628      	mov	r0, r5
 8016af8:	f001 fcd8 	bl	80184ac <_fflush_r>
 8016afc:	2800      	cmp	r0, #0
 8016afe:	d0d9      	beq.n	8016ab4 <__swbuf_r+0x2e>
 8016b00:	e7d6      	b.n	8016ab0 <__swbuf_r+0x2a>
	...

08016b04 <__swsetup_r>:
 8016b04:	b538      	push	{r3, r4, r5, lr}
 8016b06:	4b29      	ldr	r3, [pc, #164]	@ (8016bac <__swsetup_r+0xa8>)
 8016b08:	4605      	mov	r5, r0
 8016b0a:	6818      	ldr	r0, [r3, #0]
 8016b0c:	460c      	mov	r4, r1
 8016b0e:	b118      	cbz	r0, 8016b18 <__swsetup_r+0x14>
 8016b10:	6a03      	ldr	r3, [r0, #32]
 8016b12:	b90b      	cbnz	r3, 8016b18 <__swsetup_r+0x14>
 8016b14:	f7ff ff2c 	bl	8016970 <__sinit>
 8016b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b1c:	0719      	lsls	r1, r3, #28
 8016b1e:	d422      	bmi.n	8016b66 <__swsetup_r+0x62>
 8016b20:	06da      	lsls	r2, r3, #27
 8016b22:	d407      	bmi.n	8016b34 <__swsetup_r+0x30>
 8016b24:	2209      	movs	r2, #9
 8016b26:	602a      	str	r2, [r5, #0]
 8016b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b2c:	81a3      	strh	r3, [r4, #12]
 8016b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8016b32:	e033      	b.n	8016b9c <__swsetup_r+0x98>
 8016b34:	0758      	lsls	r0, r3, #29
 8016b36:	d512      	bpl.n	8016b5e <__swsetup_r+0x5a>
 8016b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016b3a:	b141      	cbz	r1, 8016b4e <__swsetup_r+0x4a>
 8016b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b40:	4299      	cmp	r1, r3
 8016b42:	d002      	beq.n	8016b4a <__swsetup_r+0x46>
 8016b44:	4628      	mov	r0, r5
 8016b46:	f000 ff1f 	bl	8017988 <_free_r>
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016b4e:	89a3      	ldrh	r3, [r4, #12]
 8016b50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016b54:	81a3      	strh	r3, [r4, #12]
 8016b56:	2300      	movs	r3, #0
 8016b58:	6063      	str	r3, [r4, #4]
 8016b5a:	6923      	ldr	r3, [r4, #16]
 8016b5c:	6023      	str	r3, [r4, #0]
 8016b5e:	89a3      	ldrh	r3, [r4, #12]
 8016b60:	f043 0308 	orr.w	r3, r3, #8
 8016b64:	81a3      	strh	r3, [r4, #12]
 8016b66:	6923      	ldr	r3, [r4, #16]
 8016b68:	b94b      	cbnz	r3, 8016b7e <__swsetup_r+0x7a>
 8016b6a:	89a3      	ldrh	r3, [r4, #12]
 8016b6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016b74:	d003      	beq.n	8016b7e <__swsetup_r+0x7a>
 8016b76:	4621      	mov	r1, r4
 8016b78:	4628      	mov	r0, r5
 8016b7a:	f001 fce5 	bl	8018548 <__smakebuf_r>
 8016b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b82:	f013 0201 	ands.w	r2, r3, #1
 8016b86:	d00a      	beq.n	8016b9e <__swsetup_r+0x9a>
 8016b88:	2200      	movs	r2, #0
 8016b8a:	60a2      	str	r2, [r4, #8]
 8016b8c:	6962      	ldr	r2, [r4, #20]
 8016b8e:	4252      	negs	r2, r2
 8016b90:	61a2      	str	r2, [r4, #24]
 8016b92:	6922      	ldr	r2, [r4, #16]
 8016b94:	b942      	cbnz	r2, 8016ba8 <__swsetup_r+0xa4>
 8016b96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b9a:	d1c5      	bne.n	8016b28 <__swsetup_r+0x24>
 8016b9c:	bd38      	pop	{r3, r4, r5, pc}
 8016b9e:	0799      	lsls	r1, r3, #30
 8016ba0:	bf58      	it	pl
 8016ba2:	6962      	ldrpl	r2, [r4, #20]
 8016ba4:	60a2      	str	r2, [r4, #8]
 8016ba6:	e7f4      	b.n	8016b92 <__swsetup_r+0x8e>
 8016ba8:	2000      	movs	r0, #0
 8016baa:	e7f7      	b.n	8016b9c <__swsetup_r+0x98>
 8016bac:	20000040 	.word	0x20000040

08016bb0 <memset>:
 8016bb0:	4402      	add	r2, r0
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	4293      	cmp	r3, r2
 8016bb6:	d100      	bne.n	8016bba <memset+0xa>
 8016bb8:	4770      	bx	lr
 8016bba:	f803 1b01 	strb.w	r1, [r3], #1
 8016bbe:	e7f9      	b.n	8016bb4 <memset+0x4>

08016bc0 <_localeconv_r>:
 8016bc0:	4800      	ldr	r0, [pc, #0]	@ (8016bc4 <_localeconv_r+0x4>)
 8016bc2:	4770      	bx	lr
 8016bc4:	20000180 	.word	0x20000180

08016bc8 <_close_r>:
 8016bc8:	b538      	push	{r3, r4, r5, lr}
 8016bca:	4d06      	ldr	r5, [pc, #24]	@ (8016be4 <_close_r+0x1c>)
 8016bcc:	2300      	movs	r3, #0
 8016bce:	4604      	mov	r4, r0
 8016bd0:	4608      	mov	r0, r1
 8016bd2:	602b      	str	r3, [r5, #0]
 8016bd4:	f7ed fa30 	bl	8004038 <_close>
 8016bd8:	1c43      	adds	r3, r0, #1
 8016bda:	d102      	bne.n	8016be2 <_close_r+0x1a>
 8016bdc:	682b      	ldr	r3, [r5, #0]
 8016bde:	b103      	cbz	r3, 8016be2 <_close_r+0x1a>
 8016be0:	6023      	str	r3, [r4, #0]
 8016be2:	bd38      	pop	{r3, r4, r5, pc}
 8016be4:	20001b94 	.word	0x20001b94

08016be8 <_lseek_r>:
 8016be8:	b538      	push	{r3, r4, r5, lr}
 8016bea:	4d07      	ldr	r5, [pc, #28]	@ (8016c08 <_lseek_r+0x20>)
 8016bec:	4604      	mov	r4, r0
 8016bee:	4608      	mov	r0, r1
 8016bf0:	4611      	mov	r1, r2
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	602a      	str	r2, [r5, #0]
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	f7ed fa45 	bl	8004086 <_lseek>
 8016bfc:	1c43      	adds	r3, r0, #1
 8016bfe:	d102      	bne.n	8016c06 <_lseek_r+0x1e>
 8016c00:	682b      	ldr	r3, [r5, #0]
 8016c02:	b103      	cbz	r3, 8016c06 <_lseek_r+0x1e>
 8016c04:	6023      	str	r3, [r4, #0]
 8016c06:	bd38      	pop	{r3, r4, r5, pc}
 8016c08:	20001b94 	.word	0x20001b94

08016c0c <_read_r>:
 8016c0c:	b538      	push	{r3, r4, r5, lr}
 8016c0e:	4d07      	ldr	r5, [pc, #28]	@ (8016c2c <_read_r+0x20>)
 8016c10:	4604      	mov	r4, r0
 8016c12:	4608      	mov	r0, r1
 8016c14:	4611      	mov	r1, r2
 8016c16:	2200      	movs	r2, #0
 8016c18:	602a      	str	r2, [r5, #0]
 8016c1a:	461a      	mov	r2, r3
 8016c1c:	f7ed f9d3 	bl	8003fc6 <_read>
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	d102      	bne.n	8016c2a <_read_r+0x1e>
 8016c24:	682b      	ldr	r3, [r5, #0]
 8016c26:	b103      	cbz	r3, 8016c2a <_read_r+0x1e>
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	bd38      	pop	{r3, r4, r5, pc}
 8016c2c:	20001b94 	.word	0x20001b94

08016c30 <_sbrk_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d06      	ldr	r5, [pc, #24]	@ (8016c4c <_sbrk_r+0x1c>)
 8016c34:	2300      	movs	r3, #0
 8016c36:	4604      	mov	r4, r0
 8016c38:	4608      	mov	r0, r1
 8016c3a:	602b      	str	r3, [r5, #0]
 8016c3c:	f7ed fa30 	bl	80040a0 <_sbrk>
 8016c40:	1c43      	adds	r3, r0, #1
 8016c42:	d102      	bne.n	8016c4a <_sbrk_r+0x1a>
 8016c44:	682b      	ldr	r3, [r5, #0]
 8016c46:	b103      	cbz	r3, 8016c4a <_sbrk_r+0x1a>
 8016c48:	6023      	str	r3, [r4, #0]
 8016c4a:	bd38      	pop	{r3, r4, r5, pc}
 8016c4c:	20001b94 	.word	0x20001b94

08016c50 <_write_r>:
 8016c50:	b538      	push	{r3, r4, r5, lr}
 8016c52:	4d07      	ldr	r5, [pc, #28]	@ (8016c70 <_write_r+0x20>)
 8016c54:	4604      	mov	r4, r0
 8016c56:	4608      	mov	r0, r1
 8016c58:	4611      	mov	r1, r2
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	602a      	str	r2, [r5, #0]
 8016c5e:	461a      	mov	r2, r3
 8016c60:	f7ed f9ce 	bl	8004000 <_write>
 8016c64:	1c43      	adds	r3, r0, #1
 8016c66:	d102      	bne.n	8016c6e <_write_r+0x1e>
 8016c68:	682b      	ldr	r3, [r5, #0]
 8016c6a:	b103      	cbz	r3, 8016c6e <_write_r+0x1e>
 8016c6c:	6023      	str	r3, [r4, #0]
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	20001b94 	.word	0x20001b94

08016c74 <__errno>:
 8016c74:	4b01      	ldr	r3, [pc, #4]	@ (8016c7c <__errno+0x8>)
 8016c76:	6818      	ldr	r0, [r3, #0]
 8016c78:	4770      	bx	lr
 8016c7a:	bf00      	nop
 8016c7c:	20000040 	.word	0x20000040

08016c80 <__libc_init_array>:
 8016c80:	b570      	push	{r4, r5, r6, lr}
 8016c82:	4d0d      	ldr	r5, [pc, #52]	@ (8016cb8 <__libc_init_array+0x38>)
 8016c84:	4c0d      	ldr	r4, [pc, #52]	@ (8016cbc <__libc_init_array+0x3c>)
 8016c86:	1b64      	subs	r4, r4, r5
 8016c88:	10a4      	asrs	r4, r4, #2
 8016c8a:	2600      	movs	r6, #0
 8016c8c:	42a6      	cmp	r6, r4
 8016c8e:	d109      	bne.n	8016ca4 <__libc_init_array+0x24>
 8016c90:	4d0b      	ldr	r5, [pc, #44]	@ (8016cc0 <__libc_init_array+0x40>)
 8016c92:	4c0c      	ldr	r4, [pc, #48]	@ (8016cc4 <__libc_init_array+0x44>)
 8016c94:	f001 fd66 	bl	8018764 <_init>
 8016c98:	1b64      	subs	r4, r4, r5
 8016c9a:	10a4      	asrs	r4, r4, #2
 8016c9c:	2600      	movs	r6, #0
 8016c9e:	42a6      	cmp	r6, r4
 8016ca0:	d105      	bne.n	8016cae <__libc_init_array+0x2e>
 8016ca2:	bd70      	pop	{r4, r5, r6, pc}
 8016ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ca8:	4798      	blx	r3
 8016caa:	3601      	adds	r6, #1
 8016cac:	e7ee      	b.n	8016c8c <__libc_init_array+0xc>
 8016cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cb2:	4798      	blx	r3
 8016cb4:	3601      	adds	r6, #1
 8016cb6:	e7f2      	b.n	8016c9e <__libc_init_array+0x1e>
 8016cb8:	08019138 	.word	0x08019138
 8016cbc:	08019138 	.word	0x08019138
 8016cc0:	08019138 	.word	0x08019138
 8016cc4:	0801913c 	.word	0x0801913c

08016cc8 <__retarget_lock_init_recursive>:
 8016cc8:	4770      	bx	lr

08016cca <__retarget_lock_acquire_recursive>:
 8016cca:	4770      	bx	lr

08016ccc <__retarget_lock_release_recursive>:
 8016ccc:	4770      	bx	lr

08016cce <memcpy>:
 8016cce:	440a      	add	r2, r1
 8016cd0:	4291      	cmp	r1, r2
 8016cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016cd6:	d100      	bne.n	8016cda <memcpy+0xc>
 8016cd8:	4770      	bx	lr
 8016cda:	b510      	push	{r4, lr}
 8016cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ce4:	4291      	cmp	r1, r2
 8016ce6:	d1f9      	bne.n	8016cdc <memcpy+0xe>
 8016ce8:	bd10      	pop	{r4, pc}

08016cea <quorem>:
 8016cea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cee:	6903      	ldr	r3, [r0, #16]
 8016cf0:	690c      	ldr	r4, [r1, #16]
 8016cf2:	42a3      	cmp	r3, r4
 8016cf4:	4607      	mov	r7, r0
 8016cf6:	db7e      	blt.n	8016df6 <quorem+0x10c>
 8016cf8:	3c01      	subs	r4, #1
 8016cfa:	f101 0814 	add.w	r8, r1, #20
 8016cfe:	00a3      	lsls	r3, r4, #2
 8016d00:	f100 0514 	add.w	r5, r0, #20
 8016d04:	9300      	str	r3, [sp, #0]
 8016d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016d0a:	9301      	str	r3, [sp, #4]
 8016d0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016d14:	3301      	adds	r3, #1
 8016d16:	429a      	cmp	r2, r3
 8016d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016d1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016d20:	d32e      	bcc.n	8016d80 <quorem+0x96>
 8016d22:	f04f 0a00 	mov.w	sl, #0
 8016d26:	46c4      	mov	ip, r8
 8016d28:	46ae      	mov	lr, r5
 8016d2a:	46d3      	mov	fp, sl
 8016d2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016d30:	b298      	uxth	r0, r3
 8016d32:	fb06 a000 	mla	r0, r6, r0, sl
 8016d36:	0c02      	lsrs	r2, r0, #16
 8016d38:	0c1b      	lsrs	r3, r3, #16
 8016d3a:	fb06 2303 	mla	r3, r6, r3, r2
 8016d3e:	f8de 2000 	ldr.w	r2, [lr]
 8016d42:	b280      	uxth	r0, r0
 8016d44:	b292      	uxth	r2, r2
 8016d46:	1a12      	subs	r2, r2, r0
 8016d48:	445a      	add	r2, fp
 8016d4a:	f8de 0000 	ldr.w	r0, [lr]
 8016d4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016d52:	b29b      	uxth	r3, r3
 8016d54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8016d58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016d5c:	b292      	uxth	r2, r2
 8016d5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016d62:	45e1      	cmp	r9, ip
 8016d64:	f84e 2b04 	str.w	r2, [lr], #4
 8016d68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016d6c:	d2de      	bcs.n	8016d2c <quorem+0x42>
 8016d6e:	9b00      	ldr	r3, [sp, #0]
 8016d70:	58eb      	ldr	r3, [r5, r3]
 8016d72:	b92b      	cbnz	r3, 8016d80 <quorem+0x96>
 8016d74:	9b01      	ldr	r3, [sp, #4]
 8016d76:	3b04      	subs	r3, #4
 8016d78:	429d      	cmp	r5, r3
 8016d7a:	461a      	mov	r2, r3
 8016d7c:	d32f      	bcc.n	8016dde <quorem+0xf4>
 8016d7e:	613c      	str	r4, [r7, #16]
 8016d80:	4638      	mov	r0, r7
 8016d82:	f001 f8c5 	bl	8017f10 <__mcmp>
 8016d86:	2800      	cmp	r0, #0
 8016d88:	db25      	blt.n	8016dd6 <quorem+0xec>
 8016d8a:	4629      	mov	r1, r5
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8016d92:	f8d1 c000 	ldr.w	ip, [r1]
 8016d96:	fa1f fe82 	uxth.w	lr, r2
 8016d9a:	fa1f f38c 	uxth.w	r3, ip
 8016d9e:	eba3 030e 	sub.w	r3, r3, lr
 8016da2:	4403      	add	r3, r0
 8016da4:	0c12      	lsrs	r2, r2, #16
 8016da6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016daa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016db4:	45c1      	cmp	r9, r8
 8016db6:	f841 3b04 	str.w	r3, [r1], #4
 8016dba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016dbe:	d2e6      	bcs.n	8016d8e <quorem+0xa4>
 8016dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016dc8:	b922      	cbnz	r2, 8016dd4 <quorem+0xea>
 8016dca:	3b04      	subs	r3, #4
 8016dcc:	429d      	cmp	r5, r3
 8016dce:	461a      	mov	r2, r3
 8016dd0:	d30b      	bcc.n	8016dea <quorem+0x100>
 8016dd2:	613c      	str	r4, [r7, #16]
 8016dd4:	3601      	adds	r6, #1
 8016dd6:	4630      	mov	r0, r6
 8016dd8:	b003      	add	sp, #12
 8016dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dde:	6812      	ldr	r2, [r2, #0]
 8016de0:	3b04      	subs	r3, #4
 8016de2:	2a00      	cmp	r2, #0
 8016de4:	d1cb      	bne.n	8016d7e <quorem+0x94>
 8016de6:	3c01      	subs	r4, #1
 8016de8:	e7c6      	b.n	8016d78 <quorem+0x8e>
 8016dea:	6812      	ldr	r2, [r2, #0]
 8016dec:	3b04      	subs	r3, #4
 8016dee:	2a00      	cmp	r2, #0
 8016df0:	d1ef      	bne.n	8016dd2 <quorem+0xe8>
 8016df2:	3c01      	subs	r4, #1
 8016df4:	e7ea      	b.n	8016dcc <quorem+0xe2>
 8016df6:	2000      	movs	r0, #0
 8016df8:	e7ee      	b.n	8016dd8 <quorem+0xee>
 8016dfa:	0000      	movs	r0, r0
 8016dfc:	0000      	movs	r0, r0
	...

08016e00 <_dtoa_r>:
 8016e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	69c7      	ldr	r7, [r0, #28]
 8016e06:	b099      	sub	sp, #100	@ 0x64
 8016e08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016e0c:	ec55 4b10 	vmov	r4, r5, d0
 8016e10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8016e12:	9109      	str	r1, [sp, #36]	@ 0x24
 8016e14:	4683      	mov	fp, r0
 8016e16:	920e      	str	r2, [sp, #56]	@ 0x38
 8016e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016e1a:	b97f      	cbnz	r7, 8016e3c <_dtoa_r+0x3c>
 8016e1c:	2010      	movs	r0, #16
 8016e1e:	f7ff f805 	bl	8015e2c <malloc>
 8016e22:	4602      	mov	r2, r0
 8016e24:	f8cb 001c 	str.w	r0, [fp, #28]
 8016e28:	b920      	cbnz	r0, 8016e34 <_dtoa_r+0x34>
 8016e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80170c8 <_dtoa_r+0x2c8>)
 8016e2c:	21ef      	movs	r1, #239	@ 0xef
 8016e2e:	48a7      	ldr	r0, [pc, #668]	@ (80170cc <_dtoa_r+0x2cc>)
 8016e30:	f001 fbe8 	bl	8018604 <__assert_func>
 8016e34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8016e38:	6007      	str	r7, [r0, #0]
 8016e3a:	60c7      	str	r7, [r0, #12]
 8016e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016e40:	6819      	ldr	r1, [r3, #0]
 8016e42:	b159      	cbz	r1, 8016e5c <_dtoa_r+0x5c>
 8016e44:	685a      	ldr	r2, [r3, #4]
 8016e46:	604a      	str	r2, [r1, #4]
 8016e48:	2301      	movs	r3, #1
 8016e4a:	4093      	lsls	r3, r2
 8016e4c:	608b      	str	r3, [r1, #8]
 8016e4e:	4658      	mov	r0, fp
 8016e50:	f000 fe24 	bl	8017a9c <_Bfree>
 8016e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	601a      	str	r2, [r3, #0]
 8016e5c:	1e2b      	subs	r3, r5, #0
 8016e5e:	bfb9      	ittee	lt
 8016e60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016e64:	9303      	strlt	r3, [sp, #12]
 8016e66:	2300      	movge	r3, #0
 8016e68:	6033      	strge	r3, [r6, #0]
 8016e6a:	9f03      	ldr	r7, [sp, #12]
 8016e6c:	4b98      	ldr	r3, [pc, #608]	@ (80170d0 <_dtoa_r+0x2d0>)
 8016e6e:	bfbc      	itt	lt
 8016e70:	2201      	movlt	r2, #1
 8016e72:	6032      	strlt	r2, [r6, #0]
 8016e74:	43bb      	bics	r3, r7
 8016e76:	d112      	bne.n	8016e9e <_dtoa_r+0x9e>
 8016e78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016e7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016e7e:	6013      	str	r3, [r2, #0]
 8016e80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e84:	4323      	orrs	r3, r4
 8016e86:	f000 854d 	beq.w	8017924 <_dtoa_r+0xb24>
 8016e8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016e8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80170e4 <_dtoa_r+0x2e4>
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 854f 	beq.w	8017934 <_dtoa_r+0xb34>
 8016e96:	f10a 0303 	add.w	r3, sl, #3
 8016e9a:	f000 bd49 	b.w	8017930 <_dtoa_r+0xb30>
 8016e9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	ec51 0b17 	vmov	r0, r1, d7
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016eae:	f7e9 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8016eb2:	4680      	mov	r8, r0
 8016eb4:	b158      	cbz	r0, 8016ece <_dtoa_r+0xce>
 8016eb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016eb8:	2301      	movs	r3, #1
 8016eba:	6013      	str	r3, [r2, #0]
 8016ebc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016ebe:	b113      	cbz	r3, 8016ec6 <_dtoa_r+0xc6>
 8016ec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016ec2:	4b84      	ldr	r3, [pc, #528]	@ (80170d4 <_dtoa_r+0x2d4>)
 8016ec4:	6013      	str	r3, [r2, #0]
 8016ec6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80170e8 <_dtoa_r+0x2e8>
 8016eca:	f000 bd33 	b.w	8017934 <_dtoa_r+0xb34>
 8016ece:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016ed2:	aa16      	add	r2, sp, #88	@ 0x58
 8016ed4:	a917      	add	r1, sp, #92	@ 0x5c
 8016ed6:	4658      	mov	r0, fp
 8016ed8:	f001 f8ca 	bl	8018070 <__d2b>
 8016edc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016ee0:	4681      	mov	r9, r0
 8016ee2:	2e00      	cmp	r6, #0
 8016ee4:	d077      	beq.n	8016fd6 <_dtoa_r+0x1d6>
 8016ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ee8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8016eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016ef4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8016ef8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016efc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016f00:	4619      	mov	r1, r3
 8016f02:	2200      	movs	r2, #0
 8016f04:	4b74      	ldr	r3, [pc, #464]	@ (80170d8 <_dtoa_r+0x2d8>)
 8016f06:	f7e9 f9bf 	bl	8000288 <__aeabi_dsub>
 8016f0a:	a369      	add	r3, pc, #420	@ (adr r3, 80170b0 <_dtoa_r+0x2b0>)
 8016f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f10:	f7e9 fb72 	bl	80005f8 <__aeabi_dmul>
 8016f14:	a368      	add	r3, pc, #416	@ (adr r3, 80170b8 <_dtoa_r+0x2b8>)
 8016f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f1a:	f7e9 f9b7 	bl	800028c <__adddf3>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	4630      	mov	r0, r6
 8016f22:	460d      	mov	r5, r1
 8016f24:	f7e9 fafe 	bl	8000524 <__aeabi_i2d>
 8016f28:	a365      	add	r3, pc, #404	@ (adr r3, 80170c0 <_dtoa_r+0x2c0>)
 8016f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f2e:	f7e9 fb63 	bl	80005f8 <__aeabi_dmul>
 8016f32:	4602      	mov	r2, r0
 8016f34:	460b      	mov	r3, r1
 8016f36:	4620      	mov	r0, r4
 8016f38:	4629      	mov	r1, r5
 8016f3a:	f7e9 f9a7 	bl	800028c <__adddf3>
 8016f3e:	4604      	mov	r4, r0
 8016f40:	460d      	mov	r5, r1
 8016f42:	f7e9 fe09 	bl	8000b58 <__aeabi_d2iz>
 8016f46:	2200      	movs	r2, #0
 8016f48:	4607      	mov	r7, r0
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	4629      	mov	r1, r5
 8016f50:	f7e9 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8016f54:	b140      	cbz	r0, 8016f68 <_dtoa_r+0x168>
 8016f56:	4638      	mov	r0, r7
 8016f58:	f7e9 fae4 	bl	8000524 <__aeabi_i2d>
 8016f5c:	4622      	mov	r2, r4
 8016f5e:	462b      	mov	r3, r5
 8016f60:	f7e9 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f64:	b900      	cbnz	r0, 8016f68 <_dtoa_r+0x168>
 8016f66:	3f01      	subs	r7, #1
 8016f68:	2f16      	cmp	r7, #22
 8016f6a:	d851      	bhi.n	8017010 <_dtoa_r+0x210>
 8016f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80170dc <_dtoa_r+0x2dc>)
 8016f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016f7a:	f7e9 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8016f7e:	2800      	cmp	r0, #0
 8016f80:	d048      	beq.n	8017014 <_dtoa_r+0x214>
 8016f82:	3f01      	subs	r7, #1
 8016f84:	2300      	movs	r3, #0
 8016f86:	9312      	str	r3, [sp, #72]	@ 0x48
 8016f88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016f8a:	1b9b      	subs	r3, r3, r6
 8016f8c:	1e5a      	subs	r2, r3, #1
 8016f8e:	bf44      	itt	mi
 8016f90:	f1c3 0801 	rsbmi	r8, r3, #1
 8016f94:	2300      	movmi	r3, #0
 8016f96:	9208      	str	r2, [sp, #32]
 8016f98:	bf54      	ite	pl
 8016f9a:	f04f 0800 	movpl.w	r8, #0
 8016f9e:	9308      	strmi	r3, [sp, #32]
 8016fa0:	2f00      	cmp	r7, #0
 8016fa2:	db39      	blt.n	8017018 <_dtoa_r+0x218>
 8016fa4:	9b08      	ldr	r3, [sp, #32]
 8016fa6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8016fa8:	443b      	add	r3, r7
 8016faa:	9308      	str	r3, [sp, #32]
 8016fac:	2300      	movs	r3, #0
 8016fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fb2:	2b09      	cmp	r3, #9
 8016fb4:	d864      	bhi.n	8017080 <_dtoa_r+0x280>
 8016fb6:	2b05      	cmp	r3, #5
 8016fb8:	bfc4      	itt	gt
 8016fba:	3b04      	subgt	r3, #4
 8016fbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8016fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fc0:	f1a3 0302 	sub.w	r3, r3, #2
 8016fc4:	bfcc      	ite	gt
 8016fc6:	2400      	movgt	r4, #0
 8016fc8:	2401      	movle	r4, #1
 8016fca:	2b03      	cmp	r3, #3
 8016fcc:	d863      	bhi.n	8017096 <_dtoa_r+0x296>
 8016fce:	e8df f003 	tbb	[pc, r3]
 8016fd2:	372a      	.short	0x372a
 8016fd4:	5535      	.short	0x5535
 8016fd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8016fda:	441e      	add	r6, r3
 8016fdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8016fe0:	2b20      	cmp	r3, #32
 8016fe2:	bfc1      	itttt	gt
 8016fe4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8016fe8:	409f      	lslgt	r7, r3
 8016fea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8016fee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8016ff2:	bfd6      	itet	le
 8016ff4:	f1c3 0320 	rsble	r3, r3, #32
 8016ff8:	ea47 0003 	orrgt.w	r0, r7, r3
 8016ffc:	fa04 f003 	lslle.w	r0, r4, r3
 8017000:	f7e9 fa80 	bl	8000504 <__aeabi_ui2d>
 8017004:	2201      	movs	r2, #1
 8017006:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801700a:	3e01      	subs	r6, #1
 801700c:	9214      	str	r2, [sp, #80]	@ 0x50
 801700e:	e777      	b.n	8016f00 <_dtoa_r+0x100>
 8017010:	2301      	movs	r3, #1
 8017012:	e7b8      	b.n	8016f86 <_dtoa_r+0x186>
 8017014:	9012      	str	r0, [sp, #72]	@ 0x48
 8017016:	e7b7      	b.n	8016f88 <_dtoa_r+0x188>
 8017018:	427b      	negs	r3, r7
 801701a:	930a      	str	r3, [sp, #40]	@ 0x28
 801701c:	2300      	movs	r3, #0
 801701e:	eba8 0807 	sub.w	r8, r8, r7
 8017022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017024:	e7c4      	b.n	8016fb0 <_dtoa_r+0x1b0>
 8017026:	2300      	movs	r3, #0
 8017028:	930b      	str	r3, [sp, #44]	@ 0x2c
 801702a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801702c:	2b00      	cmp	r3, #0
 801702e:	dc35      	bgt.n	801709c <_dtoa_r+0x29c>
 8017030:	2301      	movs	r3, #1
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	9307      	str	r3, [sp, #28]
 8017036:	461a      	mov	r2, r3
 8017038:	920e      	str	r2, [sp, #56]	@ 0x38
 801703a:	e00b      	b.n	8017054 <_dtoa_r+0x254>
 801703c:	2301      	movs	r3, #1
 801703e:	e7f3      	b.n	8017028 <_dtoa_r+0x228>
 8017040:	2300      	movs	r3, #0
 8017042:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017046:	18fb      	adds	r3, r7, r3
 8017048:	9300      	str	r3, [sp, #0]
 801704a:	3301      	adds	r3, #1
 801704c:	2b01      	cmp	r3, #1
 801704e:	9307      	str	r3, [sp, #28]
 8017050:	bfb8      	it	lt
 8017052:	2301      	movlt	r3, #1
 8017054:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017058:	2100      	movs	r1, #0
 801705a:	2204      	movs	r2, #4
 801705c:	f102 0514 	add.w	r5, r2, #20
 8017060:	429d      	cmp	r5, r3
 8017062:	d91f      	bls.n	80170a4 <_dtoa_r+0x2a4>
 8017064:	6041      	str	r1, [r0, #4]
 8017066:	4658      	mov	r0, fp
 8017068:	f000 fcd8 	bl	8017a1c <_Balloc>
 801706c:	4682      	mov	sl, r0
 801706e:	2800      	cmp	r0, #0
 8017070:	d13c      	bne.n	80170ec <_dtoa_r+0x2ec>
 8017072:	4b1b      	ldr	r3, [pc, #108]	@ (80170e0 <_dtoa_r+0x2e0>)
 8017074:	4602      	mov	r2, r0
 8017076:	f240 11af 	movw	r1, #431	@ 0x1af
 801707a:	e6d8      	b.n	8016e2e <_dtoa_r+0x2e>
 801707c:	2301      	movs	r3, #1
 801707e:	e7e0      	b.n	8017042 <_dtoa_r+0x242>
 8017080:	2401      	movs	r4, #1
 8017082:	2300      	movs	r3, #0
 8017084:	9309      	str	r3, [sp, #36]	@ 0x24
 8017086:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017088:	f04f 33ff 	mov.w	r3, #4294967295
 801708c:	9300      	str	r3, [sp, #0]
 801708e:	9307      	str	r3, [sp, #28]
 8017090:	2200      	movs	r2, #0
 8017092:	2312      	movs	r3, #18
 8017094:	e7d0      	b.n	8017038 <_dtoa_r+0x238>
 8017096:	2301      	movs	r3, #1
 8017098:	930b      	str	r3, [sp, #44]	@ 0x2c
 801709a:	e7f5      	b.n	8017088 <_dtoa_r+0x288>
 801709c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801709e:	9300      	str	r3, [sp, #0]
 80170a0:	9307      	str	r3, [sp, #28]
 80170a2:	e7d7      	b.n	8017054 <_dtoa_r+0x254>
 80170a4:	3101      	adds	r1, #1
 80170a6:	0052      	lsls	r2, r2, #1
 80170a8:	e7d8      	b.n	801705c <_dtoa_r+0x25c>
 80170aa:	bf00      	nop
 80170ac:	f3af 8000 	nop.w
 80170b0:	636f4361 	.word	0x636f4361
 80170b4:	3fd287a7 	.word	0x3fd287a7
 80170b8:	8b60c8b3 	.word	0x8b60c8b3
 80170bc:	3fc68a28 	.word	0x3fc68a28
 80170c0:	509f79fb 	.word	0x509f79fb
 80170c4:	3fd34413 	.word	0x3fd34413
 80170c8:	08018dfd 	.word	0x08018dfd
 80170cc:	08018e14 	.word	0x08018e14
 80170d0:	7ff00000 	.word	0x7ff00000
 80170d4:	08018dcd 	.word	0x08018dcd
 80170d8:	3ff80000 	.word	0x3ff80000
 80170dc:	08018f10 	.word	0x08018f10
 80170e0:	08018e6c 	.word	0x08018e6c
 80170e4:	08018df9 	.word	0x08018df9
 80170e8:	08018dcc 	.word	0x08018dcc
 80170ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80170f0:	6018      	str	r0, [r3, #0]
 80170f2:	9b07      	ldr	r3, [sp, #28]
 80170f4:	2b0e      	cmp	r3, #14
 80170f6:	f200 80a4 	bhi.w	8017242 <_dtoa_r+0x442>
 80170fa:	2c00      	cmp	r4, #0
 80170fc:	f000 80a1 	beq.w	8017242 <_dtoa_r+0x442>
 8017100:	2f00      	cmp	r7, #0
 8017102:	dd33      	ble.n	801716c <_dtoa_r+0x36c>
 8017104:	4bad      	ldr	r3, [pc, #692]	@ (80173bc <_dtoa_r+0x5bc>)
 8017106:	f007 020f 	and.w	r2, r7, #15
 801710a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801710e:	ed93 7b00 	vldr	d7, [r3]
 8017112:	05f8      	lsls	r0, r7, #23
 8017114:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017118:	ea4f 1427 	mov.w	r4, r7, asr #4
 801711c:	d516      	bpl.n	801714c <_dtoa_r+0x34c>
 801711e:	4ba8      	ldr	r3, [pc, #672]	@ (80173c0 <_dtoa_r+0x5c0>)
 8017120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017128:	f7e9 fb90 	bl	800084c <__aeabi_ddiv>
 801712c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017130:	f004 040f 	and.w	r4, r4, #15
 8017134:	2603      	movs	r6, #3
 8017136:	4da2      	ldr	r5, [pc, #648]	@ (80173c0 <_dtoa_r+0x5c0>)
 8017138:	b954      	cbnz	r4, 8017150 <_dtoa_r+0x350>
 801713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801713e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017142:	f7e9 fb83 	bl	800084c <__aeabi_ddiv>
 8017146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801714a:	e028      	b.n	801719e <_dtoa_r+0x39e>
 801714c:	2602      	movs	r6, #2
 801714e:	e7f2      	b.n	8017136 <_dtoa_r+0x336>
 8017150:	07e1      	lsls	r1, r4, #31
 8017152:	d508      	bpl.n	8017166 <_dtoa_r+0x366>
 8017154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017158:	e9d5 2300 	ldrd	r2, r3, [r5]
 801715c:	f7e9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8017160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017164:	3601      	adds	r6, #1
 8017166:	1064      	asrs	r4, r4, #1
 8017168:	3508      	adds	r5, #8
 801716a:	e7e5      	b.n	8017138 <_dtoa_r+0x338>
 801716c:	f000 80d2 	beq.w	8017314 <_dtoa_r+0x514>
 8017170:	427c      	negs	r4, r7
 8017172:	4b92      	ldr	r3, [pc, #584]	@ (80173bc <_dtoa_r+0x5bc>)
 8017174:	4d92      	ldr	r5, [pc, #584]	@ (80173c0 <_dtoa_r+0x5c0>)
 8017176:	f004 020f 	and.w	r2, r4, #15
 801717a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017186:	f7e9 fa37 	bl	80005f8 <__aeabi_dmul>
 801718a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801718e:	1124      	asrs	r4, r4, #4
 8017190:	2300      	movs	r3, #0
 8017192:	2602      	movs	r6, #2
 8017194:	2c00      	cmp	r4, #0
 8017196:	f040 80b2 	bne.w	80172fe <_dtoa_r+0x4fe>
 801719a:	2b00      	cmp	r3, #0
 801719c:	d1d3      	bne.n	8017146 <_dtoa_r+0x346>
 801719e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80171a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f000 80b7 	beq.w	8017318 <_dtoa_r+0x518>
 80171aa:	4b86      	ldr	r3, [pc, #536]	@ (80173c4 <_dtoa_r+0x5c4>)
 80171ac:	2200      	movs	r2, #0
 80171ae:	4620      	mov	r0, r4
 80171b0:	4629      	mov	r1, r5
 80171b2:	f7e9 fc93 	bl	8000adc <__aeabi_dcmplt>
 80171b6:	2800      	cmp	r0, #0
 80171b8:	f000 80ae 	beq.w	8017318 <_dtoa_r+0x518>
 80171bc:	9b07      	ldr	r3, [sp, #28]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	f000 80aa 	beq.w	8017318 <_dtoa_r+0x518>
 80171c4:	9b00      	ldr	r3, [sp, #0]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	dd37      	ble.n	801723a <_dtoa_r+0x43a>
 80171ca:	1e7b      	subs	r3, r7, #1
 80171cc:	9304      	str	r3, [sp, #16]
 80171ce:	4620      	mov	r0, r4
 80171d0:	4b7d      	ldr	r3, [pc, #500]	@ (80173c8 <_dtoa_r+0x5c8>)
 80171d2:	2200      	movs	r2, #0
 80171d4:	4629      	mov	r1, r5
 80171d6:	f7e9 fa0f 	bl	80005f8 <__aeabi_dmul>
 80171da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171de:	9c00      	ldr	r4, [sp, #0]
 80171e0:	3601      	adds	r6, #1
 80171e2:	4630      	mov	r0, r6
 80171e4:	f7e9 f99e 	bl	8000524 <__aeabi_i2d>
 80171e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171ec:	f7e9 fa04 	bl	80005f8 <__aeabi_dmul>
 80171f0:	4b76      	ldr	r3, [pc, #472]	@ (80173cc <_dtoa_r+0x5cc>)
 80171f2:	2200      	movs	r2, #0
 80171f4:	f7e9 f84a 	bl	800028c <__adddf3>
 80171f8:	4605      	mov	r5, r0
 80171fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80171fe:	2c00      	cmp	r4, #0
 8017200:	f040 808d 	bne.w	801731e <_dtoa_r+0x51e>
 8017204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017208:	4b71      	ldr	r3, [pc, #452]	@ (80173d0 <_dtoa_r+0x5d0>)
 801720a:	2200      	movs	r2, #0
 801720c:	f7e9 f83c 	bl	8000288 <__aeabi_dsub>
 8017210:	4602      	mov	r2, r0
 8017212:	460b      	mov	r3, r1
 8017214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017218:	462a      	mov	r2, r5
 801721a:	4633      	mov	r3, r6
 801721c:	f7e9 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8017220:	2800      	cmp	r0, #0
 8017222:	f040 828b 	bne.w	801773c <_dtoa_r+0x93c>
 8017226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801722a:	462a      	mov	r2, r5
 801722c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017230:	f7e9 fc54 	bl	8000adc <__aeabi_dcmplt>
 8017234:	2800      	cmp	r0, #0
 8017236:	f040 8128 	bne.w	801748a <_dtoa_r+0x68a>
 801723a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801723e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017244:	2b00      	cmp	r3, #0
 8017246:	f2c0 815a 	blt.w	80174fe <_dtoa_r+0x6fe>
 801724a:	2f0e      	cmp	r7, #14
 801724c:	f300 8157 	bgt.w	80174fe <_dtoa_r+0x6fe>
 8017250:	4b5a      	ldr	r3, [pc, #360]	@ (80173bc <_dtoa_r+0x5bc>)
 8017252:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017256:	ed93 7b00 	vldr	d7, [r3]
 801725a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801725c:	2b00      	cmp	r3, #0
 801725e:	ed8d 7b00 	vstr	d7, [sp]
 8017262:	da03      	bge.n	801726c <_dtoa_r+0x46c>
 8017264:	9b07      	ldr	r3, [sp, #28]
 8017266:	2b00      	cmp	r3, #0
 8017268:	f340 8101 	ble.w	801746e <_dtoa_r+0x66e>
 801726c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017270:	4656      	mov	r6, sl
 8017272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017276:	4620      	mov	r0, r4
 8017278:	4629      	mov	r1, r5
 801727a:	f7e9 fae7 	bl	800084c <__aeabi_ddiv>
 801727e:	f7e9 fc6b 	bl	8000b58 <__aeabi_d2iz>
 8017282:	4680      	mov	r8, r0
 8017284:	f7e9 f94e 	bl	8000524 <__aeabi_i2d>
 8017288:	e9dd 2300 	ldrd	r2, r3, [sp]
 801728c:	f7e9 f9b4 	bl	80005f8 <__aeabi_dmul>
 8017290:	4602      	mov	r2, r0
 8017292:	460b      	mov	r3, r1
 8017294:	4620      	mov	r0, r4
 8017296:	4629      	mov	r1, r5
 8017298:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801729c:	f7e8 fff4 	bl	8000288 <__aeabi_dsub>
 80172a0:	f806 4b01 	strb.w	r4, [r6], #1
 80172a4:	9d07      	ldr	r5, [sp, #28]
 80172a6:	eba6 040a 	sub.w	r4, r6, sl
 80172aa:	42a5      	cmp	r5, r4
 80172ac:	4602      	mov	r2, r0
 80172ae:	460b      	mov	r3, r1
 80172b0:	f040 8117 	bne.w	80174e2 <_dtoa_r+0x6e2>
 80172b4:	f7e8 ffea 	bl	800028c <__adddf3>
 80172b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172bc:	4604      	mov	r4, r0
 80172be:	460d      	mov	r5, r1
 80172c0:	f7e9 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	f040 80f9 	bne.w	80174bc <_dtoa_r+0x6bc>
 80172ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172ce:	4620      	mov	r0, r4
 80172d0:	4629      	mov	r1, r5
 80172d2:	f7e9 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80172d6:	b118      	cbz	r0, 80172e0 <_dtoa_r+0x4e0>
 80172d8:	f018 0f01 	tst.w	r8, #1
 80172dc:	f040 80ee 	bne.w	80174bc <_dtoa_r+0x6bc>
 80172e0:	4649      	mov	r1, r9
 80172e2:	4658      	mov	r0, fp
 80172e4:	f000 fbda 	bl	8017a9c <_Bfree>
 80172e8:	2300      	movs	r3, #0
 80172ea:	7033      	strb	r3, [r6, #0]
 80172ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80172ee:	3701      	adds	r7, #1
 80172f0:	601f      	str	r7, [r3, #0]
 80172f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	f000 831d 	beq.w	8017934 <_dtoa_r+0xb34>
 80172fa:	601e      	str	r6, [r3, #0]
 80172fc:	e31a      	b.n	8017934 <_dtoa_r+0xb34>
 80172fe:	07e2      	lsls	r2, r4, #31
 8017300:	d505      	bpl.n	801730e <_dtoa_r+0x50e>
 8017302:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017306:	f7e9 f977 	bl	80005f8 <__aeabi_dmul>
 801730a:	3601      	adds	r6, #1
 801730c:	2301      	movs	r3, #1
 801730e:	1064      	asrs	r4, r4, #1
 8017310:	3508      	adds	r5, #8
 8017312:	e73f      	b.n	8017194 <_dtoa_r+0x394>
 8017314:	2602      	movs	r6, #2
 8017316:	e742      	b.n	801719e <_dtoa_r+0x39e>
 8017318:	9c07      	ldr	r4, [sp, #28]
 801731a:	9704      	str	r7, [sp, #16]
 801731c:	e761      	b.n	80171e2 <_dtoa_r+0x3e2>
 801731e:	4b27      	ldr	r3, [pc, #156]	@ (80173bc <_dtoa_r+0x5bc>)
 8017320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017322:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017326:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801732a:	4454      	add	r4, sl
 801732c:	2900      	cmp	r1, #0
 801732e:	d053      	beq.n	80173d8 <_dtoa_r+0x5d8>
 8017330:	4928      	ldr	r1, [pc, #160]	@ (80173d4 <_dtoa_r+0x5d4>)
 8017332:	2000      	movs	r0, #0
 8017334:	f7e9 fa8a 	bl	800084c <__aeabi_ddiv>
 8017338:	4633      	mov	r3, r6
 801733a:	462a      	mov	r2, r5
 801733c:	f7e8 ffa4 	bl	8000288 <__aeabi_dsub>
 8017340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017344:	4656      	mov	r6, sl
 8017346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801734a:	f7e9 fc05 	bl	8000b58 <__aeabi_d2iz>
 801734e:	4605      	mov	r5, r0
 8017350:	f7e9 f8e8 	bl	8000524 <__aeabi_i2d>
 8017354:	4602      	mov	r2, r0
 8017356:	460b      	mov	r3, r1
 8017358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801735c:	f7e8 ff94 	bl	8000288 <__aeabi_dsub>
 8017360:	3530      	adds	r5, #48	@ 0x30
 8017362:	4602      	mov	r2, r0
 8017364:	460b      	mov	r3, r1
 8017366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801736a:	f806 5b01 	strb.w	r5, [r6], #1
 801736e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017372:	f7e9 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8017376:	2800      	cmp	r0, #0
 8017378:	d171      	bne.n	801745e <_dtoa_r+0x65e>
 801737a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801737e:	4911      	ldr	r1, [pc, #68]	@ (80173c4 <_dtoa_r+0x5c4>)
 8017380:	2000      	movs	r0, #0
 8017382:	f7e8 ff81 	bl	8000288 <__aeabi_dsub>
 8017386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801738a:	f7e9 fba7 	bl	8000adc <__aeabi_dcmplt>
 801738e:	2800      	cmp	r0, #0
 8017390:	f040 8095 	bne.w	80174be <_dtoa_r+0x6be>
 8017394:	42a6      	cmp	r6, r4
 8017396:	f43f af50 	beq.w	801723a <_dtoa_r+0x43a>
 801739a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801739e:	4b0a      	ldr	r3, [pc, #40]	@ (80173c8 <_dtoa_r+0x5c8>)
 80173a0:	2200      	movs	r2, #0
 80173a2:	f7e9 f929 	bl	80005f8 <__aeabi_dmul>
 80173a6:	4b08      	ldr	r3, [pc, #32]	@ (80173c8 <_dtoa_r+0x5c8>)
 80173a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80173ac:	2200      	movs	r2, #0
 80173ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173b2:	f7e9 f921 	bl	80005f8 <__aeabi_dmul>
 80173b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173ba:	e7c4      	b.n	8017346 <_dtoa_r+0x546>
 80173bc:	08018f10 	.word	0x08018f10
 80173c0:	08018ee8 	.word	0x08018ee8
 80173c4:	3ff00000 	.word	0x3ff00000
 80173c8:	40240000 	.word	0x40240000
 80173cc:	401c0000 	.word	0x401c0000
 80173d0:	40140000 	.word	0x40140000
 80173d4:	3fe00000 	.word	0x3fe00000
 80173d8:	4631      	mov	r1, r6
 80173da:	4628      	mov	r0, r5
 80173dc:	f7e9 f90c 	bl	80005f8 <__aeabi_dmul>
 80173e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80173e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80173e6:	4656      	mov	r6, sl
 80173e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173ec:	f7e9 fbb4 	bl	8000b58 <__aeabi_d2iz>
 80173f0:	4605      	mov	r5, r0
 80173f2:	f7e9 f897 	bl	8000524 <__aeabi_i2d>
 80173f6:	4602      	mov	r2, r0
 80173f8:	460b      	mov	r3, r1
 80173fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173fe:	f7e8 ff43 	bl	8000288 <__aeabi_dsub>
 8017402:	3530      	adds	r5, #48	@ 0x30
 8017404:	f806 5b01 	strb.w	r5, [r6], #1
 8017408:	4602      	mov	r2, r0
 801740a:	460b      	mov	r3, r1
 801740c:	42a6      	cmp	r6, r4
 801740e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017412:	f04f 0200 	mov.w	r2, #0
 8017416:	d124      	bne.n	8017462 <_dtoa_r+0x662>
 8017418:	4bac      	ldr	r3, [pc, #688]	@ (80176cc <_dtoa_r+0x8cc>)
 801741a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801741e:	f7e8 ff35 	bl	800028c <__adddf3>
 8017422:	4602      	mov	r2, r0
 8017424:	460b      	mov	r3, r1
 8017426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801742a:	f7e9 fb75 	bl	8000b18 <__aeabi_dcmpgt>
 801742e:	2800      	cmp	r0, #0
 8017430:	d145      	bne.n	80174be <_dtoa_r+0x6be>
 8017432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017436:	49a5      	ldr	r1, [pc, #660]	@ (80176cc <_dtoa_r+0x8cc>)
 8017438:	2000      	movs	r0, #0
 801743a:	f7e8 ff25 	bl	8000288 <__aeabi_dsub>
 801743e:	4602      	mov	r2, r0
 8017440:	460b      	mov	r3, r1
 8017442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017446:	f7e9 fb49 	bl	8000adc <__aeabi_dcmplt>
 801744a:	2800      	cmp	r0, #0
 801744c:	f43f aef5 	beq.w	801723a <_dtoa_r+0x43a>
 8017450:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017452:	1e73      	subs	r3, r6, #1
 8017454:	9315      	str	r3, [sp, #84]	@ 0x54
 8017456:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801745a:	2b30      	cmp	r3, #48	@ 0x30
 801745c:	d0f8      	beq.n	8017450 <_dtoa_r+0x650>
 801745e:	9f04      	ldr	r7, [sp, #16]
 8017460:	e73e      	b.n	80172e0 <_dtoa_r+0x4e0>
 8017462:	4b9b      	ldr	r3, [pc, #620]	@ (80176d0 <_dtoa_r+0x8d0>)
 8017464:	f7e9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8017468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801746c:	e7bc      	b.n	80173e8 <_dtoa_r+0x5e8>
 801746e:	d10c      	bne.n	801748a <_dtoa_r+0x68a>
 8017470:	4b98      	ldr	r3, [pc, #608]	@ (80176d4 <_dtoa_r+0x8d4>)
 8017472:	2200      	movs	r2, #0
 8017474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017478:	f7e9 f8be 	bl	80005f8 <__aeabi_dmul>
 801747c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017480:	f7e9 fb40 	bl	8000b04 <__aeabi_dcmpge>
 8017484:	2800      	cmp	r0, #0
 8017486:	f000 8157 	beq.w	8017738 <_dtoa_r+0x938>
 801748a:	2400      	movs	r4, #0
 801748c:	4625      	mov	r5, r4
 801748e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017490:	43db      	mvns	r3, r3
 8017492:	9304      	str	r3, [sp, #16]
 8017494:	4656      	mov	r6, sl
 8017496:	2700      	movs	r7, #0
 8017498:	4621      	mov	r1, r4
 801749a:	4658      	mov	r0, fp
 801749c:	f000 fafe 	bl	8017a9c <_Bfree>
 80174a0:	2d00      	cmp	r5, #0
 80174a2:	d0dc      	beq.n	801745e <_dtoa_r+0x65e>
 80174a4:	b12f      	cbz	r7, 80174b2 <_dtoa_r+0x6b2>
 80174a6:	42af      	cmp	r7, r5
 80174a8:	d003      	beq.n	80174b2 <_dtoa_r+0x6b2>
 80174aa:	4639      	mov	r1, r7
 80174ac:	4658      	mov	r0, fp
 80174ae:	f000 faf5 	bl	8017a9c <_Bfree>
 80174b2:	4629      	mov	r1, r5
 80174b4:	4658      	mov	r0, fp
 80174b6:	f000 faf1 	bl	8017a9c <_Bfree>
 80174ba:	e7d0      	b.n	801745e <_dtoa_r+0x65e>
 80174bc:	9704      	str	r7, [sp, #16]
 80174be:	4633      	mov	r3, r6
 80174c0:	461e      	mov	r6, r3
 80174c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80174c6:	2a39      	cmp	r2, #57	@ 0x39
 80174c8:	d107      	bne.n	80174da <_dtoa_r+0x6da>
 80174ca:	459a      	cmp	sl, r3
 80174cc:	d1f8      	bne.n	80174c0 <_dtoa_r+0x6c0>
 80174ce:	9a04      	ldr	r2, [sp, #16]
 80174d0:	3201      	adds	r2, #1
 80174d2:	9204      	str	r2, [sp, #16]
 80174d4:	2230      	movs	r2, #48	@ 0x30
 80174d6:	f88a 2000 	strb.w	r2, [sl]
 80174da:	781a      	ldrb	r2, [r3, #0]
 80174dc:	3201      	adds	r2, #1
 80174de:	701a      	strb	r2, [r3, #0]
 80174e0:	e7bd      	b.n	801745e <_dtoa_r+0x65e>
 80174e2:	4b7b      	ldr	r3, [pc, #492]	@ (80176d0 <_dtoa_r+0x8d0>)
 80174e4:	2200      	movs	r2, #0
 80174e6:	f7e9 f887 	bl	80005f8 <__aeabi_dmul>
 80174ea:	2200      	movs	r2, #0
 80174ec:	2300      	movs	r3, #0
 80174ee:	4604      	mov	r4, r0
 80174f0:	460d      	mov	r5, r1
 80174f2:	f7e9 fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f43f aebb 	beq.w	8017272 <_dtoa_r+0x472>
 80174fc:	e6f0      	b.n	80172e0 <_dtoa_r+0x4e0>
 80174fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017500:	2a00      	cmp	r2, #0
 8017502:	f000 80db 	beq.w	80176bc <_dtoa_r+0x8bc>
 8017506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017508:	2a01      	cmp	r2, #1
 801750a:	f300 80bf 	bgt.w	801768c <_dtoa_r+0x88c>
 801750e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017510:	2a00      	cmp	r2, #0
 8017512:	f000 80b7 	beq.w	8017684 <_dtoa_r+0x884>
 8017516:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801751a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801751c:	4646      	mov	r6, r8
 801751e:	9a08      	ldr	r2, [sp, #32]
 8017520:	2101      	movs	r1, #1
 8017522:	441a      	add	r2, r3
 8017524:	4658      	mov	r0, fp
 8017526:	4498      	add	r8, r3
 8017528:	9208      	str	r2, [sp, #32]
 801752a:	f000 fb6b 	bl	8017c04 <__i2b>
 801752e:	4605      	mov	r5, r0
 8017530:	b15e      	cbz	r6, 801754a <_dtoa_r+0x74a>
 8017532:	9b08      	ldr	r3, [sp, #32]
 8017534:	2b00      	cmp	r3, #0
 8017536:	dd08      	ble.n	801754a <_dtoa_r+0x74a>
 8017538:	42b3      	cmp	r3, r6
 801753a:	9a08      	ldr	r2, [sp, #32]
 801753c:	bfa8      	it	ge
 801753e:	4633      	movge	r3, r6
 8017540:	eba8 0803 	sub.w	r8, r8, r3
 8017544:	1af6      	subs	r6, r6, r3
 8017546:	1ad3      	subs	r3, r2, r3
 8017548:	9308      	str	r3, [sp, #32]
 801754a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801754c:	b1f3      	cbz	r3, 801758c <_dtoa_r+0x78c>
 801754e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017550:	2b00      	cmp	r3, #0
 8017552:	f000 80b7 	beq.w	80176c4 <_dtoa_r+0x8c4>
 8017556:	b18c      	cbz	r4, 801757c <_dtoa_r+0x77c>
 8017558:	4629      	mov	r1, r5
 801755a:	4622      	mov	r2, r4
 801755c:	4658      	mov	r0, fp
 801755e:	f000 fc11 	bl	8017d84 <__pow5mult>
 8017562:	464a      	mov	r2, r9
 8017564:	4601      	mov	r1, r0
 8017566:	4605      	mov	r5, r0
 8017568:	4658      	mov	r0, fp
 801756a:	f000 fb61 	bl	8017c30 <__multiply>
 801756e:	4649      	mov	r1, r9
 8017570:	9004      	str	r0, [sp, #16]
 8017572:	4658      	mov	r0, fp
 8017574:	f000 fa92 	bl	8017a9c <_Bfree>
 8017578:	9b04      	ldr	r3, [sp, #16]
 801757a:	4699      	mov	r9, r3
 801757c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801757e:	1b1a      	subs	r2, r3, r4
 8017580:	d004      	beq.n	801758c <_dtoa_r+0x78c>
 8017582:	4649      	mov	r1, r9
 8017584:	4658      	mov	r0, fp
 8017586:	f000 fbfd 	bl	8017d84 <__pow5mult>
 801758a:	4681      	mov	r9, r0
 801758c:	2101      	movs	r1, #1
 801758e:	4658      	mov	r0, fp
 8017590:	f000 fb38 	bl	8017c04 <__i2b>
 8017594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017596:	4604      	mov	r4, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	f000 81cf 	beq.w	801793c <_dtoa_r+0xb3c>
 801759e:	461a      	mov	r2, r3
 80175a0:	4601      	mov	r1, r0
 80175a2:	4658      	mov	r0, fp
 80175a4:	f000 fbee 	bl	8017d84 <__pow5mult>
 80175a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	4604      	mov	r4, r0
 80175ae:	f300 8095 	bgt.w	80176dc <_dtoa_r+0x8dc>
 80175b2:	9b02      	ldr	r3, [sp, #8]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f040 8087 	bne.w	80176c8 <_dtoa_r+0x8c8>
 80175ba:	9b03      	ldr	r3, [sp, #12]
 80175bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	f040 8089 	bne.w	80176d8 <_dtoa_r+0x8d8>
 80175c6:	9b03      	ldr	r3, [sp, #12]
 80175c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80175cc:	0d1b      	lsrs	r3, r3, #20
 80175ce:	051b      	lsls	r3, r3, #20
 80175d0:	b12b      	cbz	r3, 80175de <_dtoa_r+0x7de>
 80175d2:	9b08      	ldr	r3, [sp, #32]
 80175d4:	3301      	adds	r3, #1
 80175d6:	9308      	str	r3, [sp, #32]
 80175d8:	f108 0801 	add.w	r8, r8, #1
 80175dc:	2301      	movs	r3, #1
 80175de:	930a      	str	r3, [sp, #40]	@ 0x28
 80175e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 81b0 	beq.w	8017948 <_dtoa_r+0xb48>
 80175e8:	6923      	ldr	r3, [r4, #16]
 80175ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80175ee:	6918      	ldr	r0, [r3, #16]
 80175f0:	f000 fabc 	bl	8017b6c <__hi0bits>
 80175f4:	f1c0 0020 	rsb	r0, r0, #32
 80175f8:	9b08      	ldr	r3, [sp, #32]
 80175fa:	4418      	add	r0, r3
 80175fc:	f010 001f 	ands.w	r0, r0, #31
 8017600:	d077      	beq.n	80176f2 <_dtoa_r+0x8f2>
 8017602:	f1c0 0320 	rsb	r3, r0, #32
 8017606:	2b04      	cmp	r3, #4
 8017608:	dd6b      	ble.n	80176e2 <_dtoa_r+0x8e2>
 801760a:	9b08      	ldr	r3, [sp, #32]
 801760c:	f1c0 001c 	rsb	r0, r0, #28
 8017610:	4403      	add	r3, r0
 8017612:	4480      	add	r8, r0
 8017614:	4406      	add	r6, r0
 8017616:	9308      	str	r3, [sp, #32]
 8017618:	f1b8 0f00 	cmp.w	r8, #0
 801761c:	dd05      	ble.n	801762a <_dtoa_r+0x82a>
 801761e:	4649      	mov	r1, r9
 8017620:	4642      	mov	r2, r8
 8017622:	4658      	mov	r0, fp
 8017624:	f000 fc08 	bl	8017e38 <__lshift>
 8017628:	4681      	mov	r9, r0
 801762a:	9b08      	ldr	r3, [sp, #32]
 801762c:	2b00      	cmp	r3, #0
 801762e:	dd05      	ble.n	801763c <_dtoa_r+0x83c>
 8017630:	4621      	mov	r1, r4
 8017632:	461a      	mov	r2, r3
 8017634:	4658      	mov	r0, fp
 8017636:	f000 fbff 	bl	8017e38 <__lshift>
 801763a:	4604      	mov	r4, r0
 801763c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801763e:	2b00      	cmp	r3, #0
 8017640:	d059      	beq.n	80176f6 <_dtoa_r+0x8f6>
 8017642:	4621      	mov	r1, r4
 8017644:	4648      	mov	r0, r9
 8017646:	f000 fc63 	bl	8017f10 <__mcmp>
 801764a:	2800      	cmp	r0, #0
 801764c:	da53      	bge.n	80176f6 <_dtoa_r+0x8f6>
 801764e:	1e7b      	subs	r3, r7, #1
 8017650:	9304      	str	r3, [sp, #16]
 8017652:	4649      	mov	r1, r9
 8017654:	2300      	movs	r3, #0
 8017656:	220a      	movs	r2, #10
 8017658:	4658      	mov	r0, fp
 801765a:	f000 fa41 	bl	8017ae0 <__multadd>
 801765e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017660:	4681      	mov	r9, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	f000 8172 	beq.w	801794c <_dtoa_r+0xb4c>
 8017668:	2300      	movs	r3, #0
 801766a:	4629      	mov	r1, r5
 801766c:	220a      	movs	r2, #10
 801766e:	4658      	mov	r0, fp
 8017670:	f000 fa36 	bl	8017ae0 <__multadd>
 8017674:	9b00      	ldr	r3, [sp, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	4605      	mov	r5, r0
 801767a:	dc67      	bgt.n	801774c <_dtoa_r+0x94c>
 801767c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801767e:	2b02      	cmp	r3, #2
 8017680:	dc41      	bgt.n	8017706 <_dtoa_r+0x906>
 8017682:	e063      	b.n	801774c <_dtoa_r+0x94c>
 8017684:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801768a:	e746      	b.n	801751a <_dtoa_r+0x71a>
 801768c:	9b07      	ldr	r3, [sp, #28]
 801768e:	1e5c      	subs	r4, r3, #1
 8017690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017692:	42a3      	cmp	r3, r4
 8017694:	bfbf      	itttt	lt
 8017696:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017698:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801769a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801769c:	1ae3      	sublt	r3, r4, r3
 801769e:	bfb4      	ite	lt
 80176a0:	18d2      	addlt	r2, r2, r3
 80176a2:	1b1c      	subge	r4, r3, r4
 80176a4:	9b07      	ldr	r3, [sp, #28]
 80176a6:	bfbc      	itt	lt
 80176a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80176aa:	2400      	movlt	r4, #0
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	bfb5      	itete	lt
 80176b0:	eba8 0603 	sublt.w	r6, r8, r3
 80176b4:	9b07      	ldrge	r3, [sp, #28]
 80176b6:	2300      	movlt	r3, #0
 80176b8:	4646      	movge	r6, r8
 80176ba:	e730      	b.n	801751e <_dtoa_r+0x71e>
 80176bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80176be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80176c0:	4646      	mov	r6, r8
 80176c2:	e735      	b.n	8017530 <_dtoa_r+0x730>
 80176c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80176c6:	e75c      	b.n	8017582 <_dtoa_r+0x782>
 80176c8:	2300      	movs	r3, #0
 80176ca:	e788      	b.n	80175de <_dtoa_r+0x7de>
 80176cc:	3fe00000 	.word	0x3fe00000
 80176d0:	40240000 	.word	0x40240000
 80176d4:	40140000 	.word	0x40140000
 80176d8:	9b02      	ldr	r3, [sp, #8]
 80176da:	e780      	b.n	80175de <_dtoa_r+0x7de>
 80176dc:	2300      	movs	r3, #0
 80176de:	930a      	str	r3, [sp, #40]	@ 0x28
 80176e0:	e782      	b.n	80175e8 <_dtoa_r+0x7e8>
 80176e2:	d099      	beq.n	8017618 <_dtoa_r+0x818>
 80176e4:	9a08      	ldr	r2, [sp, #32]
 80176e6:	331c      	adds	r3, #28
 80176e8:	441a      	add	r2, r3
 80176ea:	4498      	add	r8, r3
 80176ec:	441e      	add	r6, r3
 80176ee:	9208      	str	r2, [sp, #32]
 80176f0:	e792      	b.n	8017618 <_dtoa_r+0x818>
 80176f2:	4603      	mov	r3, r0
 80176f4:	e7f6      	b.n	80176e4 <_dtoa_r+0x8e4>
 80176f6:	9b07      	ldr	r3, [sp, #28]
 80176f8:	9704      	str	r7, [sp, #16]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	dc20      	bgt.n	8017740 <_dtoa_r+0x940>
 80176fe:	9300      	str	r3, [sp, #0]
 8017700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017702:	2b02      	cmp	r3, #2
 8017704:	dd1e      	ble.n	8017744 <_dtoa_r+0x944>
 8017706:	9b00      	ldr	r3, [sp, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	f47f aec0 	bne.w	801748e <_dtoa_r+0x68e>
 801770e:	4621      	mov	r1, r4
 8017710:	2205      	movs	r2, #5
 8017712:	4658      	mov	r0, fp
 8017714:	f000 f9e4 	bl	8017ae0 <__multadd>
 8017718:	4601      	mov	r1, r0
 801771a:	4604      	mov	r4, r0
 801771c:	4648      	mov	r0, r9
 801771e:	f000 fbf7 	bl	8017f10 <__mcmp>
 8017722:	2800      	cmp	r0, #0
 8017724:	f77f aeb3 	ble.w	801748e <_dtoa_r+0x68e>
 8017728:	4656      	mov	r6, sl
 801772a:	2331      	movs	r3, #49	@ 0x31
 801772c:	f806 3b01 	strb.w	r3, [r6], #1
 8017730:	9b04      	ldr	r3, [sp, #16]
 8017732:	3301      	adds	r3, #1
 8017734:	9304      	str	r3, [sp, #16]
 8017736:	e6ae      	b.n	8017496 <_dtoa_r+0x696>
 8017738:	9c07      	ldr	r4, [sp, #28]
 801773a:	9704      	str	r7, [sp, #16]
 801773c:	4625      	mov	r5, r4
 801773e:	e7f3      	b.n	8017728 <_dtoa_r+0x928>
 8017740:	9b07      	ldr	r3, [sp, #28]
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017746:	2b00      	cmp	r3, #0
 8017748:	f000 8104 	beq.w	8017954 <_dtoa_r+0xb54>
 801774c:	2e00      	cmp	r6, #0
 801774e:	dd05      	ble.n	801775c <_dtoa_r+0x95c>
 8017750:	4629      	mov	r1, r5
 8017752:	4632      	mov	r2, r6
 8017754:	4658      	mov	r0, fp
 8017756:	f000 fb6f 	bl	8017e38 <__lshift>
 801775a:	4605      	mov	r5, r0
 801775c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801775e:	2b00      	cmp	r3, #0
 8017760:	d05a      	beq.n	8017818 <_dtoa_r+0xa18>
 8017762:	6869      	ldr	r1, [r5, #4]
 8017764:	4658      	mov	r0, fp
 8017766:	f000 f959 	bl	8017a1c <_Balloc>
 801776a:	4606      	mov	r6, r0
 801776c:	b928      	cbnz	r0, 801777a <_dtoa_r+0x97a>
 801776e:	4b84      	ldr	r3, [pc, #528]	@ (8017980 <_dtoa_r+0xb80>)
 8017770:	4602      	mov	r2, r0
 8017772:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017776:	f7ff bb5a 	b.w	8016e2e <_dtoa_r+0x2e>
 801777a:	692a      	ldr	r2, [r5, #16]
 801777c:	3202      	adds	r2, #2
 801777e:	0092      	lsls	r2, r2, #2
 8017780:	f105 010c 	add.w	r1, r5, #12
 8017784:	300c      	adds	r0, #12
 8017786:	f7ff faa2 	bl	8016cce <memcpy>
 801778a:	2201      	movs	r2, #1
 801778c:	4631      	mov	r1, r6
 801778e:	4658      	mov	r0, fp
 8017790:	f000 fb52 	bl	8017e38 <__lshift>
 8017794:	f10a 0301 	add.w	r3, sl, #1
 8017798:	9307      	str	r3, [sp, #28]
 801779a:	9b00      	ldr	r3, [sp, #0]
 801779c:	4453      	add	r3, sl
 801779e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80177a0:	9b02      	ldr	r3, [sp, #8]
 80177a2:	f003 0301 	and.w	r3, r3, #1
 80177a6:	462f      	mov	r7, r5
 80177a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80177aa:	4605      	mov	r5, r0
 80177ac:	9b07      	ldr	r3, [sp, #28]
 80177ae:	4621      	mov	r1, r4
 80177b0:	3b01      	subs	r3, #1
 80177b2:	4648      	mov	r0, r9
 80177b4:	9300      	str	r3, [sp, #0]
 80177b6:	f7ff fa98 	bl	8016cea <quorem>
 80177ba:	4639      	mov	r1, r7
 80177bc:	9002      	str	r0, [sp, #8]
 80177be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80177c2:	4648      	mov	r0, r9
 80177c4:	f000 fba4 	bl	8017f10 <__mcmp>
 80177c8:	462a      	mov	r2, r5
 80177ca:	9008      	str	r0, [sp, #32]
 80177cc:	4621      	mov	r1, r4
 80177ce:	4658      	mov	r0, fp
 80177d0:	f000 fbba 	bl	8017f48 <__mdiff>
 80177d4:	68c2      	ldr	r2, [r0, #12]
 80177d6:	4606      	mov	r6, r0
 80177d8:	bb02      	cbnz	r2, 801781c <_dtoa_r+0xa1c>
 80177da:	4601      	mov	r1, r0
 80177dc:	4648      	mov	r0, r9
 80177de:	f000 fb97 	bl	8017f10 <__mcmp>
 80177e2:	4602      	mov	r2, r0
 80177e4:	4631      	mov	r1, r6
 80177e6:	4658      	mov	r0, fp
 80177e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80177ea:	f000 f957 	bl	8017a9c <_Bfree>
 80177ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80177f2:	9e07      	ldr	r6, [sp, #28]
 80177f4:	ea43 0102 	orr.w	r1, r3, r2
 80177f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80177fa:	4319      	orrs	r1, r3
 80177fc:	d110      	bne.n	8017820 <_dtoa_r+0xa20>
 80177fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017802:	d029      	beq.n	8017858 <_dtoa_r+0xa58>
 8017804:	9b08      	ldr	r3, [sp, #32]
 8017806:	2b00      	cmp	r3, #0
 8017808:	dd02      	ble.n	8017810 <_dtoa_r+0xa10>
 801780a:	9b02      	ldr	r3, [sp, #8]
 801780c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017810:	9b00      	ldr	r3, [sp, #0]
 8017812:	f883 8000 	strb.w	r8, [r3]
 8017816:	e63f      	b.n	8017498 <_dtoa_r+0x698>
 8017818:	4628      	mov	r0, r5
 801781a:	e7bb      	b.n	8017794 <_dtoa_r+0x994>
 801781c:	2201      	movs	r2, #1
 801781e:	e7e1      	b.n	80177e4 <_dtoa_r+0x9e4>
 8017820:	9b08      	ldr	r3, [sp, #32]
 8017822:	2b00      	cmp	r3, #0
 8017824:	db04      	blt.n	8017830 <_dtoa_r+0xa30>
 8017826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017828:	430b      	orrs	r3, r1
 801782a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801782c:	430b      	orrs	r3, r1
 801782e:	d120      	bne.n	8017872 <_dtoa_r+0xa72>
 8017830:	2a00      	cmp	r2, #0
 8017832:	dded      	ble.n	8017810 <_dtoa_r+0xa10>
 8017834:	4649      	mov	r1, r9
 8017836:	2201      	movs	r2, #1
 8017838:	4658      	mov	r0, fp
 801783a:	f000 fafd 	bl	8017e38 <__lshift>
 801783e:	4621      	mov	r1, r4
 8017840:	4681      	mov	r9, r0
 8017842:	f000 fb65 	bl	8017f10 <__mcmp>
 8017846:	2800      	cmp	r0, #0
 8017848:	dc03      	bgt.n	8017852 <_dtoa_r+0xa52>
 801784a:	d1e1      	bne.n	8017810 <_dtoa_r+0xa10>
 801784c:	f018 0f01 	tst.w	r8, #1
 8017850:	d0de      	beq.n	8017810 <_dtoa_r+0xa10>
 8017852:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017856:	d1d8      	bne.n	801780a <_dtoa_r+0xa0a>
 8017858:	9a00      	ldr	r2, [sp, #0]
 801785a:	2339      	movs	r3, #57	@ 0x39
 801785c:	7013      	strb	r3, [r2, #0]
 801785e:	4633      	mov	r3, r6
 8017860:	461e      	mov	r6, r3
 8017862:	3b01      	subs	r3, #1
 8017864:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017868:	2a39      	cmp	r2, #57	@ 0x39
 801786a:	d052      	beq.n	8017912 <_dtoa_r+0xb12>
 801786c:	3201      	adds	r2, #1
 801786e:	701a      	strb	r2, [r3, #0]
 8017870:	e612      	b.n	8017498 <_dtoa_r+0x698>
 8017872:	2a00      	cmp	r2, #0
 8017874:	dd07      	ble.n	8017886 <_dtoa_r+0xa86>
 8017876:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801787a:	d0ed      	beq.n	8017858 <_dtoa_r+0xa58>
 801787c:	9a00      	ldr	r2, [sp, #0]
 801787e:	f108 0301 	add.w	r3, r8, #1
 8017882:	7013      	strb	r3, [r2, #0]
 8017884:	e608      	b.n	8017498 <_dtoa_r+0x698>
 8017886:	9b07      	ldr	r3, [sp, #28]
 8017888:	9a07      	ldr	r2, [sp, #28]
 801788a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801788e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017890:	4293      	cmp	r3, r2
 8017892:	d028      	beq.n	80178e6 <_dtoa_r+0xae6>
 8017894:	4649      	mov	r1, r9
 8017896:	2300      	movs	r3, #0
 8017898:	220a      	movs	r2, #10
 801789a:	4658      	mov	r0, fp
 801789c:	f000 f920 	bl	8017ae0 <__multadd>
 80178a0:	42af      	cmp	r7, r5
 80178a2:	4681      	mov	r9, r0
 80178a4:	f04f 0300 	mov.w	r3, #0
 80178a8:	f04f 020a 	mov.w	r2, #10
 80178ac:	4639      	mov	r1, r7
 80178ae:	4658      	mov	r0, fp
 80178b0:	d107      	bne.n	80178c2 <_dtoa_r+0xac2>
 80178b2:	f000 f915 	bl	8017ae0 <__multadd>
 80178b6:	4607      	mov	r7, r0
 80178b8:	4605      	mov	r5, r0
 80178ba:	9b07      	ldr	r3, [sp, #28]
 80178bc:	3301      	adds	r3, #1
 80178be:	9307      	str	r3, [sp, #28]
 80178c0:	e774      	b.n	80177ac <_dtoa_r+0x9ac>
 80178c2:	f000 f90d 	bl	8017ae0 <__multadd>
 80178c6:	4629      	mov	r1, r5
 80178c8:	4607      	mov	r7, r0
 80178ca:	2300      	movs	r3, #0
 80178cc:	220a      	movs	r2, #10
 80178ce:	4658      	mov	r0, fp
 80178d0:	f000 f906 	bl	8017ae0 <__multadd>
 80178d4:	4605      	mov	r5, r0
 80178d6:	e7f0      	b.n	80178ba <_dtoa_r+0xaba>
 80178d8:	9b00      	ldr	r3, [sp, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	bfcc      	ite	gt
 80178de:	461e      	movgt	r6, r3
 80178e0:	2601      	movle	r6, #1
 80178e2:	4456      	add	r6, sl
 80178e4:	2700      	movs	r7, #0
 80178e6:	4649      	mov	r1, r9
 80178e8:	2201      	movs	r2, #1
 80178ea:	4658      	mov	r0, fp
 80178ec:	f000 faa4 	bl	8017e38 <__lshift>
 80178f0:	4621      	mov	r1, r4
 80178f2:	4681      	mov	r9, r0
 80178f4:	f000 fb0c 	bl	8017f10 <__mcmp>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	dcb0      	bgt.n	801785e <_dtoa_r+0xa5e>
 80178fc:	d102      	bne.n	8017904 <_dtoa_r+0xb04>
 80178fe:	f018 0f01 	tst.w	r8, #1
 8017902:	d1ac      	bne.n	801785e <_dtoa_r+0xa5e>
 8017904:	4633      	mov	r3, r6
 8017906:	461e      	mov	r6, r3
 8017908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801790c:	2a30      	cmp	r2, #48	@ 0x30
 801790e:	d0fa      	beq.n	8017906 <_dtoa_r+0xb06>
 8017910:	e5c2      	b.n	8017498 <_dtoa_r+0x698>
 8017912:	459a      	cmp	sl, r3
 8017914:	d1a4      	bne.n	8017860 <_dtoa_r+0xa60>
 8017916:	9b04      	ldr	r3, [sp, #16]
 8017918:	3301      	adds	r3, #1
 801791a:	9304      	str	r3, [sp, #16]
 801791c:	2331      	movs	r3, #49	@ 0x31
 801791e:	f88a 3000 	strb.w	r3, [sl]
 8017922:	e5b9      	b.n	8017498 <_dtoa_r+0x698>
 8017924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017926:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8017984 <_dtoa_r+0xb84>
 801792a:	b11b      	cbz	r3, 8017934 <_dtoa_r+0xb34>
 801792c:	f10a 0308 	add.w	r3, sl, #8
 8017930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017932:	6013      	str	r3, [r2, #0]
 8017934:	4650      	mov	r0, sl
 8017936:	b019      	add	sp, #100	@ 0x64
 8017938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801793e:	2b01      	cmp	r3, #1
 8017940:	f77f ae37 	ble.w	80175b2 <_dtoa_r+0x7b2>
 8017944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017946:	930a      	str	r3, [sp, #40]	@ 0x28
 8017948:	2001      	movs	r0, #1
 801794a:	e655      	b.n	80175f8 <_dtoa_r+0x7f8>
 801794c:	9b00      	ldr	r3, [sp, #0]
 801794e:	2b00      	cmp	r3, #0
 8017950:	f77f aed6 	ble.w	8017700 <_dtoa_r+0x900>
 8017954:	4656      	mov	r6, sl
 8017956:	4621      	mov	r1, r4
 8017958:	4648      	mov	r0, r9
 801795a:	f7ff f9c6 	bl	8016cea <quorem>
 801795e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017962:	f806 8b01 	strb.w	r8, [r6], #1
 8017966:	9b00      	ldr	r3, [sp, #0]
 8017968:	eba6 020a 	sub.w	r2, r6, sl
 801796c:	4293      	cmp	r3, r2
 801796e:	ddb3      	ble.n	80178d8 <_dtoa_r+0xad8>
 8017970:	4649      	mov	r1, r9
 8017972:	2300      	movs	r3, #0
 8017974:	220a      	movs	r2, #10
 8017976:	4658      	mov	r0, fp
 8017978:	f000 f8b2 	bl	8017ae0 <__multadd>
 801797c:	4681      	mov	r9, r0
 801797e:	e7ea      	b.n	8017956 <_dtoa_r+0xb56>
 8017980:	08018e6c 	.word	0x08018e6c
 8017984:	08018df0 	.word	0x08018df0

08017988 <_free_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	4605      	mov	r5, r0
 801798c:	2900      	cmp	r1, #0
 801798e:	d041      	beq.n	8017a14 <_free_r+0x8c>
 8017990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017994:	1f0c      	subs	r4, r1, #4
 8017996:	2b00      	cmp	r3, #0
 8017998:	bfb8      	it	lt
 801799a:	18e4      	addlt	r4, r4, r3
 801799c:	f7fe faf8 	bl	8015f90 <__malloc_lock>
 80179a0:	4a1d      	ldr	r2, [pc, #116]	@ (8017a18 <_free_r+0x90>)
 80179a2:	6813      	ldr	r3, [r2, #0]
 80179a4:	b933      	cbnz	r3, 80179b4 <_free_r+0x2c>
 80179a6:	6063      	str	r3, [r4, #4]
 80179a8:	6014      	str	r4, [r2, #0]
 80179aa:	4628      	mov	r0, r5
 80179ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179b0:	f7fe baf4 	b.w	8015f9c <__malloc_unlock>
 80179b4:	42a3      	cmp	r3, r4
 80179b6:	d908      	bls.n	80179ca <_free_r+0x42>
 80179b8:	6820      	ldr	r0, [r4, #0]
 80179ba:	1821      	adds	r1, r4, r0
 80179bc:	428b      	cmp	r3, r1
 80179be:	bf01      	itttt	eq
 80179c0:	6819      	ldreq	r1, [r3, #0]
 80179c2:	685b      	ldreq	r3, [r3, #4]
 80179c4:	1809      	addeq	r1, r1, r0
 80179c6:	6021      	streq	r1, [r4, #0]
 80179c8:	e7ed      	b.n	80179a6 <_free_r+0x1e>
 80179ca:	461a      	mov	r2, r3
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	b10b      	cbz	r3, 80179d4 <_free_r+0x4c>
 80179d0:	42a3      	cmp	r3, r4
 80179d2:	d9fa      	bls.n	80179ca <_free_r+0x42>
 80179d4:	6811      	ldr	r1, [r2, #0]
 80179d6:	1850      	adds	r0, r2, r1
 80179d8:	42a0      	cmp	r0, r4
 80179da:	d10b      	bne.n	80179f4 <_free_r+0x6c>
 80179dc:	6820      	ldr	r0, [r4, #0]
 80179de:	4401      	add	r1, r0
 80179e0:	1850      	adds	r0, r2, r1
 80179e2:	4283      	cmp	r3, r0
 80179e4:	6011      	str	r1, [r2, #0]
 80179e6:	d1e0      	bne.n	80179aa <_free_r+0x22>
 80179e8:	6818      	ldr	r0, [r3, #0]
 80179ea:	685b      	ldr	r3, [r3, #4]
 80179ec:	6053      	str	r3, [r2, #4]
 80179ee:	4408      	add	r0, r1
 80179f0:	6010      	str	r0, [r2, #0]
 80179f2:	e7da      	b.n	80179aa <_free_r+0x22>
 80179f4:	d902      	bls.n	80179fc <_free_r+0x74>
 80179f6:	230c      	movs	r3, #12
 80179f8:	602b      	str	r3, [r5, #0]
 80179fa:	e7d6      	b.n	80179aa <_free_r+0x22>
 80179fc:	6820      	ldr	r0, [r4, #0]
 80179fe:	1821      	adds	r1, r4, r0
 8017a00:	428b      	cmp	r3, r1
 8017a02:	bf04      	itt	eq
 8017a04:	6819      	ldreq	r1, [r3, #0]
 8017a06:	685b      	ldreq	r3, [r3, #4]
 8017a08:	6063      	str	r3, [r4, #4]
 8017a0a:	bf04      	itt	eq
 8017a0c:	1809      	addeq	r1, r1, r0
 8017a0e:	6021      	streq	r1, [r4, #0]
 8017a10:	6054      	str	r4, [r2, #4]
 8017a12:	e7ca      	b.n	80179aa <_free_r+0x22>
 8017a14:	bd38      	pop	{r3, r4, r5, pc}
 8017a16:	bf00      	nop
 8017a18:	20001a54 	.word	0x20001a54

08017a1c <_Balloc>:
 8017a1c:	b570      	push	{r4, r5, r6, lr}
 8017a1e:	69c6      	ldr	r6, [r0, #28]
 8017a20:	4604      	mov	r4, r0
 8017a22:	460d      	mov	r5, r1
 8017a24:	b976      	cbnz	r6, 8017a44 <_Balloc+0x28>
 8017a26:	2010      	movs	r0, #16
 8017a28:	f7fe fa00 	bl	8015e2c <malloc>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	61e0      	str	r0, [r4, #28]
 8017a30:	b920      	cbnz	r0, 8017a3c <_Balloc+0x20>
 8017a32:	4b18      	ldr	r3, [pc, #96]	@ (8017a94 <_Balloc+0x78>)
 8017a34:	4818      	ldr	r0, [pc, #96]	@ (8017a98 <_Balloc+0x7c>)
 8017a36:	216b      	movs	r1, #107	@ 0x6b
 8017a38:	f000 fde4 	bl	8018604 <__assert_func>
 8017a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017a40:	6006      	str	r6, [r0, #0]
 8017a42:	60c6      	str	r6, [r0, #12]
 8017a44:	69e6      	ldr	r6, [r4, #28]
 8017a46:	68f3      	ldr	r3, [r6, #12]
 8017a48:	b183      	cbz	r3, 8017a6c <_Balloc+0x50>
 8017a4a:	69e3      	ldr	r3, [r4, #28]
 8017a4c:	68db      	ldr	r3, [r3, #12]
 8017a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017a52:	b9b8      	cbnz	r0, 8017a84 <_Balloc+0x68>
 8017a54:	2101      	movs	r1, #1
 8017a56:	fa01 f605 	lsl.w	r6, r1, r5
 8017a5a:	1d72      	adds	r2, r6, #5
 8017a5c:	0092      	lsls	r2, r2, #2
 8017a5e:	4620      	mov	r0, r4
 8017a60:	f000 fdee 	bl	8018640 <_calloc_r>
 8017a64:	b160      	cbz	r0, 8017a80 <_Balloc+0x64>
 8017a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017a6a:	e00e      	b.n	8017a8a <_Balloc+0x6e>
 8017a6c:	2221      	movs	r2, #33	@ 0x21
 8017a6e:	2104      	movs	r1, #4
 8017a70:	4620      	mov	r0, r4
 8017a72:	f000 fde5 	bl	8018640 <_calloc_r>
 8017a76:	69e3      	ldr	r3, [r4, #28]
 8017a78:	60f0      	str	r0, [r6, #12]
 8017a7a:	68db      	ldr	r3, [r3, #12]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d1e4      	bne.n	8017a4a <_Balloc+0x2e>
 8017a80:	2000      	movs	r0, #0
 8017a82:	bd70      	pop	{r4, r5, r6, pc}
 8017a84:	6802      	ldr	r2, [r0, #0]
 8017a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017a90:	e7f7      	b.n	8017a82 <_Balloc+0x66>
 8017a92:	bf00      	nop
 8017a94:	08018dfd 	.word	0x08018dfd
 8017a98:	08018e7d 	.word	0x08018e7d

08017a9c <_Bfree>:
 8017a9c:	b570      	push	{r4, r5, r6, lr}
 8017a9e:	69c6      	ldr	r6, [r0, #28]
 8017aa0:	4605      	mov	r5, r0
 8017aa2:	460c      	mov	r4, r1
 8017aa4:	b976      	cbnz	r6, 8017ac4 <_Bfree+0x28>
 8017aa6:	2010      	movs	r0, #16
 8017aa8:	f7fe f9c0 	bl	8015e2c <malloc>
 8017aac:	4602      	mov	r2, r0
 8017aae:	61e8      	str	r0, [r5, #28]
 8017ab0:	b920      	cbnz	r0, 8017abc <_Bfree+0x20>
 8017ab2:	4b09      	ldr	r3, [pc, #36]	@ (8017ad8 <_Bfree+0x3c>)
 8017ab4:	4809      	ldr	r0, [pc, #36]	@ (8017adc <_Bfree+0x40>)
 8017ab6:	218f      	movs	r1, #143	@ 0x8f
 8017ab8:	f000 fda4 	bl	8018604 <__assert_func>
 8017abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017ac0:	6006      	str	r6, [r0, #0]
 8017ac2:	60c6      	str	r6, [r0, #12]
 8017ac4:	b13c      	cbz	r4, 8017ad6 <_Bfree+0x3a>
 8017ac6:	69eb      	ldr	r3, [r5, #28]
 8017ac8:	6862      	ldr	r2, [r4, #4]
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ad0:	6021      	str	r1, [r4, #0]
 8017ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017ad6:	bd70      	pop	{r4, r5, r6, pc}
 8017ad8:	08018dfd 	.word	0x08018dfd
 8017adc:	08018e7d 	.word	0x08018e7d

08017ae0 <__multadd>:
 8017ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae4:	690d      	ldr	r5, [r1, #16]
 8017ae6:	4607      	mov	r7, r0
 8017ae8:	460c      	mov	r4, r1
 8017aea:	461e      	mov	r6, r3
 8017aec:	f101 0c14 	add.w	ip, r1, #20
 8017af0:	2000      	movs	r0, #0
 8017af2:	f8dc 3000 	ldr.w	r3, [ip]
 8017af6:	b299      	uxth	r1, r3
 8017af8:	fb02 6101 	mla	r1, r2, r1, r6
 8017afc:	0c1e      	lsrs	r6, r3, #16
 8017afe:	0c0b      	lsrs	r3, r1, #16
 8017b00:	fb02 3306 	mla	r3, r2, r6, r3
 8017b04:	b289      	uxth	r1, r1
 8017b06:	3001      	adds	r0, #1
 8017b08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017b0c:	4285      	cmp	r5, r0
 8017b0e:	f84c 1b04 	str.w	r1, [ip], #4
 8017b12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017b16:	dcec      	bgt.n	8017af2 <__multadd+0x12>
 8017b18:	b30e      	cbz	r6, 8017b5e <__multadd+0x7e>
 8017b1a:	68a3      	ldr	r3, [r4, #8]
 8017b1c:	42ab      	cmp	r3, r5
 8017b1e:	dc19      	bgt.n	8017b54 <__multadd+0x74>
 8017b20:	6861      	ldr	r1, [r4, #4]
 8017b22:	4638      	mov	r0, r7
 8017b24:	3101      	adds	r1, #1
 8017b26:	f7ff ff79 	bl	8017a1c <_Balloc>
 8017b2a:	4680      	mov	r8, r0
 8017b2c:	b928      	cbnz	r0, 8017b3a <__multadd+0x5a>
 8017b2e:	4602      	mov	r2, r0
 8017b30:	4b0c      	ldr	r3, [pc, #48]	@ (8017b64 <__multadd+0x84>)
 8017b32:	480d      	ldr	r0, [pc, #52]	@ (8017b68 <__multadd+0x88>)
 8017b34:	21ba      	movs	r1, #186	@ 0xba
 8017b36:	f000 fd65 	bl	8018604 <__assert_func>
 8017b3a:	6922      	ldr	r2, [r4, #16]
 8017b3c:	3202      	adds	r2, #2
 8017b3e:	f104 010c 	add.w	r1, r4, #12
 8017b42:	0092      	lsls	r2, r2, #2
 8017b44:	300c      	adds	r0, #12
 8017b46:	f7ff f8c2 	bl	8016cce <memcpy>
 8017b4a:	4621      	mov	r1, r4
 8017b4c:	4638      	mov	r0, r7
 8017b4e:	f7ff ffa5 	bl	8017a9c <_Bfree>
 8017b52:	4644      	mov	r4, r8
 8017b54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017b58:	3501      	adds	r5, #1
 8017b5a:	615e      	str	r6, [r3, #20]
 8017b5c:	6125      	str	r5, [r4, #16]
 8017b5e:	4620      	mov	r0, r4
 8017b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b64:	08018e6c 	.word	0x08018e6c
 8017b68:	08018e7d 	.word	0x08018e7d

08017b6c <__hi0bits>:
 8017b6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017b70:	4603      	mov	r3, r0
 8017b72:	bf36      	itet	cc
 8017b74:	0403      	lslcc	r3, r0, #16
 8017b76:	2000      	movcs	r0, #0
 8017b78:	2010      	movcc	r0, #16
 8017b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017b7e:	bf3c      	itt	cc
 8017b80:	021b      	lslcc	r3, r3, #8
 8017b82:	3008      	addcc	r0, #8
 8017b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017b88:	bf3c      	itt	cc
 8017b8a:	011b      	lslcc	r3, r3, #4
 8017b8c:	3004      	addcc	r0, #4
 8017b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017b92:	bf3c      	itt	cc
 8017b94:	009b      	lslcc	r3, r3, #2
 8017b96:	3002      	addcc	r0, #2
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	db05      	blt.n	8017ba8 <__hi0bits+0x3c>
 8017b9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017ba0:	f100 0001 	add.w	r0, r0, #1
 8017ba4:	bf08      	it	eq
 8017ba6:	2020      	moveq	r0, #32
 8017ba8:	4770      	bx	lr

08017baa <__lo0bits>:
 8017baa:	6803      	ldr	r3, [r0, #0]
 8017bac:	4602      	mov	r2, r0
 8017bae:	f013 0007 	ands.w	r0, r3, #7
 8017bb2:	d00b      	beq.n	8017bcc <__lo0bits+0x22>
 8017bb4:	07d9      	lsls	r1, r3, #31
 8017bb6:	d421      	bmi.n	8017bfc <__lo0bits+0x52>
 8017bb8:	0798      	lsls	r0, r3, #30
 8017bba:	bf49      	itett	mi
 8017bbc:	085b      	lsrmi	r3, r3, #1
 8017bbe:	089b      	lsrpl	r3, r3, #2
 8017bc0:	2001      	movmi	r0, #1
 8017bc2:	6013      	strmi	r3, [r2, #0]
 8017bc4:	bf5c      	itt	pl
 8017bc6:	6013      	strpl	r3, [r2, #0]
 8017bc8:	2002      	movpl	r0, #2
 8017bca:	4770      	bx	lr
 8017bcc:	b299      	uxth	r1, r3
 8017bce:	b909      	cbnz	r1, 8017bd4 <__lo0bits+0x2a>
 8017bd0:	0c1b      	lsrs	r3, r3, #16
 8017bd2:	2010      	movs	r0, #16
 8017bd4:	b2d9      	uxtb	r1, r3
 8017bd6:	b909      	cbnz	r1, 8017bdc <__lo0bits+0x32>
 8017bd8:	3008      	adds	r0, #8
 8017bda:	0a1b      	lsrs	r3, r3, #8
 8017bdc:	0719      	lsls	r1, r3, #28
 8017bde:	bf04      	itt	eq
 8017be0:	091b      	lsreq	r3, r3, #4
 8017be2:	3004      	addeq	r0, #4
 8017be4:	0799      	lsls	r1, r3, #30
 8017be6:	bf04      	itt	eq
 8017be8:	089b      	lsreq	r3, r3, #2
 8017bea:	3002      	addeq	r0, #2
 8017bec:	07d9      	lsls	r1, r3, #31
 8017bee:	d403      	bmi.n	8017bf8 <__lo0bits+0x4e>
 8017bf0:	085b      	lsrs	r3, r3, #1
 8017bf2:	f100 0001 	add.w	r0, r0, #1
 8017bf6:	d003      	beq.n	8017c00 <__lo0bits+0x56>
 8017bf8:	6013      	str	r3, [r2, #0]
 8017bfa:	4770      	bx	lr
 8017bfc:	2000      	movs	r0, #0
 8017bfe:	4770      	bx	lr
 8017c00:	2020      	movs	r0, #32
 8017c02:	4770      	bx	lr

08017c04 <__i2b>:
 8017c04:	b510      	push	{r4, lr}
 8017c06:	460c      	mov	r4, r1
 8017c08:	2101      	movs	r1, #1
 8017c0a:	f7ff ff07 	bl	8017a1c <_Balloc>
 8017c0e:	4602      	mov	r2, r0
 8017c10:	b928      	cbnz	r0, 8017c1e <__i2b+0x1a>
 8017c12:	4b05      	ldr	r3, [pc, #20]	@ (8017c28 <__i2b+0x24>)
 8017c14:	4805      	ldr	r0, [pc, #20]	@ (8017c2c <__i2b+0x28>)
 8017c16:	f240 1145 	movw	r1, #325	@ 0x145
 8017c1a:	f000 fcf3 	bl	8018604 <__assert_func>
 8017c1e:	2301      	movs	r3, #1
 8017c20:	6144      	str	r4, [r0, #20]
 8017c22:	6103      	str	r3, [r0, #16]
 8017c24:	bd10      	pop	{r4, pc}
 8017c26:	bf00      	nop
 8017c28:	08018e6c 	.word	0x08018e6c
 8017c2c:	08018e7d 	.word	0x08018e7d

08017c30 <__multiply>:
 8017c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c34:	4614      	mov	r4, r2
 8017c36:	690a      	ldr	r2, [r1, #16]
 8017c38:	6923      	ldr	r3, [r4, #16]
 8017c3a:	429a      	cmp	r2, r3
 8017c3c:	bfa8      	it	ge
 8017c3e:	4623      	movge	r3, r4
 8017c40:	460f      	mov	r7, r1
 8017c42:	bfa4      	itt	ge
 8017c44:	460c      	movge	r4, r1
 8017c46:	461f      	movge	r7, r3
 8017c48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017c4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017c50:	68a3      	ldr	r3, [r4, #8]
 8017c52:	6861      	ldr	r1, [r4, #4]
 8017c54:	eb0a 0609 	add.w	r6, sl, r9
 8017c58:	42b3      	cmp	r3, r6
 8017c5a:	b085      	sub	sp, #20
 8017c5c:	bfb8      	it	lt
 8017c5e:	3101      	addlt	r1, #1
 8017c60:	f7ff fedc 	bl	8017a1c <_Balloc>
 8017c64:	b930      	cbnz	r0, 8017c74 <__multiply+0x44>
 8017c66:	4602      	mov	r2, r0
 8017c68:	4b44      	ldr	r3, [pc, #272]	@ (8017d7c <__multiply+0x14c>)
 8017c6a:	4845      	ldr	r0, [pc, #276]	@ (8017d80 <__multiply+0x150>)
 8017c6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017c70:	f000 fcc8 	bl	8018604 <__assert_func>
 8017c74:	f100 0514 	add.w	r5, r0, #20
 8017c78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017c7c:	462b      	mov	r3, r5
 8017c7e:	2200      	movs	r2, #0
 8017c80:	4543      	cmp	r3, r8
 8017c82:	d321      	bcc.n	8017cc8 <__multiply+0x98>
 8017c84:	f107 0114 	add.w	r1, r7, #20
 8017c88:	f104 0214 	add.w	r2, r4, #20
 8017c8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017c90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017c94:	9302      	str	r3, [sp, #8]
 8017c96:	1b13      	subs	r3, r2, r4
 8017c98:	3b15      	subs	r3, #21
 8017c9a:	f023 0303 	bic.w	r3, r3, #3
 8017c9e:	3304      	adds	r3, #4
 8017ca0:	f104 0715 	add.w	r7, r4, #21
 8017ca4:	42ba      	cmp	r2, r7
 8017ca6:	bf38      	it	cc
 8017ca8:	2304      	movcc	r3, #4
 8017caa:	9301      	str	r3, [sp, #4]
 8017cac:	9b02      	ldr	r3, [sp, #8]
 8017cae:	9103      	str	r1, [sp, #12]
 8017cb0:	428b      	cmp	r3, r1
 8017cb2:	d80c      	bhi.n	8017cce <__multiply+0x9e>
 8017cb4:	2e00      	cmp	r6, #0
 8017cb6:	dd03      	ble.n	8017cc0 <__multiply+0x90>
 8017cb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d05b      	beq.n	8017d78 <__multiply+0x148>
 8017cc0:	6106      	str	r6, [r0, #16]
 8017cc2:	b005      	add	sp, #20
 8017cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc8:	f843 2b04 	str.w	r2, [r3], #4
 8017ccc:	e7d8      	b.n	8017c80 <__multiply+0x50>
 8017cce:	f8b1 a000 	ldrh.w	sl, [r1]
 8017cd2:	f1ba 0f00 	cmp.w	sl, #0
 8017cd6:	d024      	beq.n	8017d22 <__multiply+0xf2>
 8017cd8:	f104 0e14 	add.w	lr, r4, #20
 8017cdc:	46a9      	mov	r9, r5
 8017cde:	f04f 0c00 	mov.w	ip, #0
 8017ce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017ce6:	f8d9 3000 	ldr.w	r3, [r9]
 8017cea:	fa1f fb87 	uxth.w	fp, r7
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	fb0a 330b 	mla	r3, sl, fp, r3
 8017cf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017cf8:	f8d9 7000 	ldr.w	r7, [r9]
 8017cfc:	4463      	add	r3, ip
 8017cfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017d02:	fb0a c70b 	mla	r7, sl, fp, ip
 8017d06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017d0a:	b29b      	uxth	r3, r3
 8017d0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017d10:	4572      	cmp	r2, lr
 8017d12:	f849 3b04 	str.w	r3, [r9], #4
 8017d16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017d1a:	d8e2      	bhi.n	8017ce2 <__multiply+0xb2>
 8017d1c:	9b01      	ldr	r3, [sp, #4]
 8017d1e:	f845 c003 	str.w	ip, [r5, r3]
 8017d22:	9b03      	ldr	r3, [sp, #12]
 8017d24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017d28:	3104      	adds	r1, #4
 8017d2a:	f1b9 0f00 	cmp.w	r9, #0
 8017d2e:	d021      	beq.n	8017d74 <__multiply+0x144>
 8017d30:	682b      	ldr	r3, [r5, #0]
 8017d32:	f104 0c14 	add.w	ip, r4, #20
 8017d36:	46ae      	mov	lr, r5
 8017d38:	f04f 0a00 	mov.w	sl, #0
 8017d3c:	f8bc b000 	ldrh.w	fp, [ip]
 8017d40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017d44:	fb09 770b 	mla	r7, r9, fp, r7
 8017d48:	4457      	add	r7, sl
 8017d4a:	b29b      	uxth	r3, r3
 8017d4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017d50:	f84e 3b04 	str.w	r3, [lr], #4
 8017d54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017d58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017d5c:	f8be 3000 	ldrh.w	r3, [lr]
 8017d60:	fb09 330a 	mla	r3, r9, sl, r3
 8017d64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017d68:	4562      	cmp	r2, ip
 8017d6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017d6e:	d8e5      	bhi.n	8017d3c <__multiply+0x10c>
 8017d70:	9f01      	ldr	r7, [sp, #4]
 8017d72:	51eb      	str	r3, [r5, r7]
 8017d74:	3504      	adds	r5, #4
 8017d76:	e799      	b.n	8017cac <__multiply+0x7c>
 8017d78:	3e01      	subs	r6, #1
 8017d7a:	e79b      	b.n	8017cb4 <__multiply+0x84>
 8017d7c:	08018e6c 	.word	0x08018e6c
 8017d80:	08018e7d 	.word	0x08018e7d

08017d84 <__pow5mult>:
 8017d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d88:	4615      	mov	r5, r2
 8017d8a:	f012 0203 	ands.w	r2, r2, #3
 8017d8e:	4607      	mov	r7, r0
 8017d90:	460e      	mov	r6, r1
 8017d92:	d007      	beq.n	8017da4 <__pow5mult+0x20>
 8017d94:	4c25      	ldr	r4, [pc, #148]	@ (8017e2c <__pow5mult+0xa8>)
 8017d96:	3a01      	subs	r2, #1
 8017d98:	2300      	movs	r3, #0
 8017d9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017d9e:	f7ff fe9f 	bl	8017ae0 <__multadd>
 8017da2:	4606      	mov	r6, r0
 8017da4:	10ad      	asrs	r5, r5, #2
 8017da6:	d03d      	beq.n	8017e24 <__pow5mult+0xa0>
 8017da8:	69fc      	ldr	r4, [r7, #28]
 8017daa:	b97c      	cbnz	r4, 8017dcc <__pow5mult+0x48>
 8017dac:	2010      	movs	r0, #16
 8017dae:	f7fe f83d 	bl	8015e2c <malloc>
 8017db2:	4602      	mov	r2, r0
 8017db4:	61f8      	str	r0, [r7, #28]
 8017db6:	b928      	cbnz	r0, 8017dc4 <__pow5mult+0x40>
 8017db8:	4b1d      	ldr	r3, [pc, #116]	@ (8017e30 <__pow5mult+0xac>)
 8017dba:	481e      	ldr	r0, [pc, #120]	@ (8017e34 <__pow5mult+0xb0>)
 8017dbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017dc0:	f000 fc20 	bl	8018604 <__assert_func>
 8017dc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017dc8:	6004      	str	r4, [r0, #0]
 8017dca:	60c4      	str	r4, [r0, #12]
 8017dcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017dd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017dd4:	b94c      	cbnz	r4, 8017dea <__pow5mult+0x66>
 8017dd6:	f240 2171 	movw	r1, #625	@ 0x271
 8017dda:	4638      	mov	r0, r7
 8017ddc:	f7ff ff12 	bl	8017c04 <__i2b>
 8017de0:	2300      	movs	r3, #0
 8017de2:	f8c8 0008 	str.w	r0, [r8, #8]
 8017de6:	4604      	mov	r4, r0
 8017de8:	6003      	str	r3, [r0, #0]
 8017dea:	f04f 0900 	mov.w	r9, #0
 8017dee:	07eb      	lsls	r3, r5, #31
 8017df0:	d50a      	bpl.n	8017e08 <__pow5mult+0x84>
 8017df2:	4631      	mov	r1, r6
 8017df4:	4622      	mov	r2, r4
 8017df6:	4638      	mov	r0, r7
 8017df8:	f7ff ff1a 	bl	8017c30 <__multiply>
 8017dfc:	4631      	mov	r1, r6
 8017dfe:	4680      	mov	r8, r0
 8017e00:	4638      	mov	r0, r7
 8017e02:	f7ff fe4b 	bl	8017a9c <_Bfree>
 8017e06:	4646      	mov	r6, r8
 8017e08:	106d      	asrs	r5, r5, #1
 8017e0a:	d00b      	beq.n	8017e24 <__pow5mult+0xa0>
 8017e0c:	6820      	ldr	r0, [r4, #0]
 8017e0e:	b938      	cbnz	r0, 8017e20 <__pow5mult+0x9c>
 8017e10:	4622      	mov	r2, r4
 8017e12:	4621      	mov	r1, r4
 8017e14:	4638      	mov	r0, r7
 8017e16:	f7ff ff0b 	bl	8017c30 <__multiply>
 8017e1a:	6020      	str	r0, [r4, #0]
 8017e1c:	f8c0 9000 	str.w	r9, [r0]
 8017e20:	4604      	mov	r4, r0
 8017e22:	e7e4      	b.n	8017dee <__pow5mult+0x6a>
 8017e24:	4630      	mov	r0, r6
 8017e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e2a:	bf00      	nop
 8017e2c:	08018ed8 	.word	0x08018ed8
 8017e30:	08018dfd 	.word	0x08018dfd
 8017e34:	08018e7d 	.word	0x08018e7d

08017e38 <__lshift>:
 8017e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e3c:	460c      	mov	r4, r1
 8017e3e:	6849      	ldr	r1, [r1, #4]
 8017e40:	6923      	ldr	r3, [r4, #16]
 8017e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017e46:	68a3      	ldr	r3, [r4, #8]
 8017e48:	4607      	mov	r7, r0
 8017e4a:	4691      	mov	r9, r2
 8017e4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017e50:	f108 0601 	add.w	r6, r8, #1
 8017e54:	42b3      	cmp	r3, r6
 8017e56:	db0b      	blt.n	8017e70 <__lshift+0x38>
 8017e58:	4638      	mov	r0, r7
 8017e5a:	f7ff fddf 	bl	8017a1c <_Balloc>
 8017e5e:	4605      	mov	r5, r0
 8017e60:	b948      	cbnz	r0, 8017e76 <__lshift+0x3e>
 8017e62:	4602      	mov	r2, r0
 8017e64:	4b28      	ldr	r3, [pc, #160]	@ (8017f08 <__lshift+0xd0>)
 8017e66:	4829      	ldr	r0, [pc, #164]	@ (8017f0c <__lshift+0xd4>)
 8017e68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017e6c:	f000 fbca 	bl	8018604 <__assert_func>
 8017e70:	3101      	adds	r1, #1
 8017e72:	005b      	lsls	r3, r3, #1
 8017e74:	e7ee      	b.n	8017e54 <__lshift+0x1c>
 8017e76:	2300      	movs	r3, #0
 8017e78:	f100 0114 	add.w	r1, r0, #20
 8017e7c:	f100 0210 	add.w	r2, r0, #16
 8017e80:	4618      	mov	r0, r3
 8017e82:	4553      	cmp	r3, sl
 8017e84:	db33      	blt.n	8017eee <__lshift+0xb6>
 8017e86:	6920      	ldr	r0, [r4, #16]
 8017e88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017e8c:	f104 0314 	add.w	r3, r4, #20
 8017e90:	f019 091f 	ands.w	r9, r9, #31
 8017e94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017e98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017e9c:	d02b      	beq.n	8017ef6 <__lshift+0xbe>
 8017e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8017ea2:	468a      	mov	sl, r1
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	6818      	ldr	r0, [r3, #0]
 8017ea8:	fa00 f009 	lsl.w	r0, r0, r9
 8017eac:	4310      	orrs	r0, r2
 8017eae:	f84a 0b04 	str.w	r0, [sl], #4
 8017eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017eb6:	459c      	cmp	ip, r3
 8017eb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8017ebc:	d8f3      	bhi.n	8017ea6 <__lshift+0x6e>
 8017ebe:	ebac 0304 	sub.w	r3, ip, r4
 8017ec2:	3b15      	subs	r3, #21
 8017ec4:	f023 0303 	bic.w	r3, r3, #3
 8017ec8:	3304      	adds	r3, #4
 8017eca:	f104 0015 	add.w	r0, r4, #21
 8017ece:	4584      	cmp	ip, r0
 8017ed0:	bf38      	it	cc
 8017ed2:	2304      	movcc	r3, #4
 8017ed4:	50ca      	str	r2, [r1, r3]
 8017ed6:	b10a      	cbz	r2, 8017edc <__lshift+0xa4>
 8017ed8:	f108 0602 	add.w	r6, r8, #2
 8017edc:	3e01      	subs	r6, #1
 8017ede:	4638      	mov	r0, r7
 8017ee0:	612e      	str	r6, [r5, #16]
 8017ee2:	4621      	mov	r1, r4
 8017ee4:	f7ff fdda 	bl	8017a9c <_Bfree>
 8017ee8:	4628      	mov	r0, r5
 8017eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eee:	f842 0f04 	str.w	r0, [r2, #4]!
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	e7c5      	b.n	8017e82 <__lshift+0x4a>
 8017ef6:	3904      	subs	r1, #4
 8017ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017efc:	f841 2f04 	str.w	r2, [r1, #4]!
 8017f00:	459c      	cmp	ip, r3
 8017f02:	d8f9      	bhi.n	8017ef8 <__lshift+0xc0>
 8017f04:	e7ea      	b.n	8017edc <__lshift+0xa4>
 8017f06:	bf00      	nop
 8017f08:	08018e6c 	.word	0x08018e6c
 8017f0c:	08018e7d 	.word	0x08018e7d

08017f10 <__mcmp>:
 8017f10:	690a      	ldr	r2, [r1, #16]
 8017f12:	4603      	mov	r3, r0
 8017f14:	6900      	ldr	r0, [r0, #16]
 8017f16:	1a80      	subs	r0, r0, r2
 8017f18:	b530      	push	{r4, r5, lr}
 8017f1a:	d10e      	bne.n	8017f3a <__mcmp+0x2a>
 8017f1c:	3314      	adds	r3, #20
 8017f1e:	3114      	adds	r1, #20
 8017f20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017f24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017f28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017f30:	4295      	cmp	r5, r2
 8017f32:	d003      	beq.n	8017f3c <__mcmp+0x2c>
 8017f34:	d205      	bcs.n	8017f42 <__mcmp+0x32>
 8017f36:	f04f 30ff 	mov.w	r0, #4294967295
 8017f3a:	bd30      	pop	{r4, r5, pc}
 8017f3c:	42a3      	cmp	r3, r4
 8017f3e:	d3f3      	bcc.n	8017f28 <__mcmp+0x18>
 8017f40:	e7fb      	b.n	8017f3a <__mcmp+0x2a>
 8017f42:	2001      	movs	r0, #1
 8017f44:	e7f9      	b.n	8017f3a <__mcmp+0x2a>
	...

08017f48 <__mdiff>:
 8017f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f4c:	4689      	mov	r9, r1
 8017f4e:	4606      	mov	r6, r0
 8017f50:	4611      	mov	r1, r2
 8017f52:	4648      	mov	r0, r9
 8017f54:	4614      	mov	r4, r2
 8017f56:	f7ff ffdb 	bl	8017f10 <__mcmp>
 8017f5a:	1e05      	subs	r5, r0, #0
 8017f5c:	d112      	bne.n	8017f84 <__mdiff+0x3c>
 8017f5e:	4629      	mov	r1, r5
 8017f60:	4630      	mov	r0, r6
 8017f62:	f7ff fd5b 	bl	8017a1c <_Balloc>
 8017f66:	4602      	mov	r2, r0
 8017f68:	b928      	cbnz	r0, 8017f76 <__mdiff+0x2e>
 8017f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8018068 <__mdiff+0x120>)
 8017f6c:	f240 2137 	movw	r1, #567	@ 0x237
 8017f70:	483e      	ldr	r0, [pc, #248]	@ (801806c <__mdiff+0x124>)
 8017f72:	f000 fb47 	bl	8018604 <__assert_func>
 8017f76:	2301      	movs	r3, #1
 8017f78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017f7c:	4610      	mov	r0, r2
 8017f7e:	b003      	add	sp, #12
 8017f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f84:	bfbc      	itt	lt
 8017f86:	464b      	movlt	r3, r9
 8017f88:	46a1      	movlt	r9, r4
 8017f8a:	4630      	mov	r0, r6
 8017f8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017f90:	bfba      	itte	lt
 8017f92:	461c      	movlt	r4, r3
 8017f94:	2501      	movlt	r5, #1
 8017f96:	2500      	movge	r5, #0
 8017f98:	f7ff fd40 	bl	8017a1c <_Balloc>
 8017f9c:	4602      	mov	r2, r0
 8017f9e:	b918      	cbnz	r0, 8017fa8 <__mdiff+0x60>
 8017fa0:	4b31      	ldr	r3, [pc, #196]	@ (8018068 <__mdiff+0x120>)
 8017fa2:	f240 2145 	movw	r1, #581	@ 0x245
 8017fa6:	e7e3      	b.n	8017f70 <__mdiff+0x28>
 8017fa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017fac:	6926      	ldr	r6, [r4, #16]
 8017fae:	60c5      	str	r5, [r0, #12]
 8017fb0:	f109 0310 	add.w	r3, r9, #16
 8017fb4:	f109 0514 	add.w	r5, r9, #20
 8017fb8:	f104 0e14 	add.w	lr, r4, #20
 8017fbc:	f100 0b14 	add.w	fp, r0, #20
 8017fc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017fc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017fc8:	9301      	str	r3, [sp, #4]
 8017fca:	46d9      	mov	r9, fp
 8017fcc:	f04f 0c00 	mov.w	ip, #0
 8017fd0:	9b01      	ldr	r3, [sp, #4]
 8017fd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017fd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017fda:	9301      	str	r3, [sp, #4]
 8017fdc:	fa1f f38a 	uxth.w	r3, sl
 8017fe0:	4619      	mov	r1, r3
 8017fe2:	b283      	uxth	r3, r0
 8017fe4:	1acb      	subs	r3, r1, r3
 8017fe6:	0c00      	lsrs	r0, r0, #16
 8017fe8:	4463      	add	r3, ip
 8017fea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017fee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017ff8:	4576      	cmp	r6, lr
 8017ffa:	f849 3b04 	str.w	r3, [r9], #4
 8017ffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018002:	d8e5      	bhi.n	8017fd0 <__mdiff+0x88>
 8018004:	1b33      	subs	r3, r6, r4
 8018006:	3b15      	subs	r3, #21
 8018008:	f023 0303 	bic.w	r3, r3, #3
 801800c:	3415      	adds	r4, #21
 801800e:	3304      	adds	r3, #4
 8018010:	42a6      	cmp	r6, r4
 8018012:	bf38      	it	cc
 8018014:	2304      	movcc	r3, #4
 8018016:	441d      	add	r5, r3
 8018018:	445b      	add	r3, fp
 801801a:	461e      	mov	r6, r3
 801801c:	462c      	mov	r4, r5
 801801e:	4544      	cmp	r4, r8
 8018020:	d30e      	bcc.n	8018040 <__mdiff+0xf8>
 8018022:	f108 0103 	add.w	r1, r8, #3
 8018026:	1b49      	subs	r1, r1, r5
 8018028:	f021 0103 	bic.w	r1, r1, #3
 801802c:	3d03      	subs	r5, #3
 801802e:	45a8      	cmp	r8, r5
 8018030:	bf38      	it	cc
 8018032:	2100      	movcc	r1, #0
 8018034:	440b      	add	r3, r1
 8018036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801803a:	b191      	cbz	r1, 8018062 <__mdiff+0x11a>
 801803c:	6117      	str	r7, [r2, #16]
 801803e:	e79d      	b.n	8017f7c <__mdiff+0x34>
 8018040:	f854 1b04 	ldr.w	r1, [r4], #4
 8018044:	46e6      	mov	lr, ip
 8018046:	0c08      	lsrs	r0, r1, #16
 8018048:	fa1c fc81 	uxtah	ip, ip, r1
 801804c:	4471      	add	r1, lr
 801804e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018052:	b289      	uxth	r1, r1
 8018054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018058:	f846 1b04 	str.w	r1, [r6], #4
 801805c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018060:	e7dd      	b.n	801801e <__mdiff+0xd6>
 8018062:	3f01      	subs	r7, #1
 8018064:	e7e7      	b.n	8018036 <__mdiff+0xee>
 8018066:	bf00      	nop
 8018068:	08018e6c 	.word	0x08018e6c
 801806c:	08018e7d 	.word	0x08018e7d

08018070 <__d2b>:
 8018070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018074:	460f      	mov	r7, r1
 8018076:	2101      	movs	r1, #1
 8018078:	ec59 8b10 	vmov	r8, r9, d0
 801807c:	4616      	mov	r6, r2
 801807e:	f7ff fccd 	bl	8017a1c <_Balloc>
 8018082:	4604      	mov	r4, r0
 8018084:	b930      	cbnz	r0, 8018094 <__d2b+0x24>
 8018086:	4602      	mov	r2, r0
 8018088:	4b23      	ldr	r3, [pc, #140]	@ (8018118 <__d2b+0xa8>)
 801808a:	4824      	ldr	r0, [pc, #144]	@ (801811c <__d2b+0xac>)
 801808c:	f240 310f 	movw	r1, #783	@ 0x30f
 8018090:	f000 fab8 	bl	8018604 <__assert_func>
 8018094:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801809c:	b10d      	cbz	r5, 80180a2 <__d2b+0x32>
 801809e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80180a2:	9301      	str	r3, [sp, #4]
 80180a4:	f1b8 0300 	subs.w	r3, r8, #0
 80180a8:	d023      	beq.n	80180f2 <__d2b+0x82>
 80180aa:	4668      	mov	r0, sp
 80180ac:	9300      	str	r3, [sp, #0]
 80180ae:	f7ff fd7c 	bl	8017baa <__lo0bits>
 80180b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80180b6:	b1d0      	cbz	r0, 80180ee <__d2b+0x7e>
 80180b8:	f1c0 0320 	rsb	r3, r0, #32
 80180bc:	fa02 f303 	lsl.w	r3, r2, r3
 80180c0:	430b      	orrs	r3, r1
 80180c2:	40c2      	lsrs	r2, r0
 80180c4:	6163      	str	r3, [r4, #20]
 80180c6:	9201      	str	r2, [sp, #4]
 80180c8:	9b01      	ldr	r3, [sp, #4]
 80180ca:	61a3      	str	r3, [r4, #24]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	bf0c      	ite	eq
 80180d0:	2201      	moveq	r2, #1
 80180d2:	2202      	movne	r2, #2
 80180d4:	6122      	str	r2, [r4, #16]
 80180d6:	b1a5      	cbz	r5, 8018102 <__d2b+0x92>
 80180d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80180dc:	4405      	add	r5, r0
 80180de:	603d      	str	r5, [r7, #0]
 80180e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80180e4:	6030      	str	r0, [r6, #0]
 80180e6:	4620      	mov	r0, r4
 80180e8:	b003      	add	sp, #12
 80180ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180ee:	6161      	str	r1, [r4, #20]
 80180f0:	e7ea      	b.n	80180c8 <__d2b+0x58>
 80180f2:	a801      	add	r0, sp, #4
 80180f4:	f7ff fd59 	bl	8017baa <__lo0bits>
 80180f8:	9b01      	ldr	r3, [sp, #4]
 80180fa:	6163      	str	r3, [r4, #20]
 80180fc:	3020      	adds	r0, #32
 80180fe:	2201      	movs	r2, #1
 8018100:	e7e8      	b.n	80180d4 <__d2b+0x64>
 8018102:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018106:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801810a:	6038      	str	r0, [r7, #0]
 801810c:	6918      	ldr	r0, [r3, #16]
 801810e:	f7ff fd2d 	bl	8017b6c <__hi0bits>
 8018112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018116:	e7e5      	b.n	80180e4 <__d2b+0x74>
 8018118:	08018e6c 	.word	0x08018e6c
 801811c:	08018e7d 	.word	0x08018e7d

08018120 <__sfputc_r>:
 8018120:	6893      	ldr	r3, [r2, #8]
 8018122:	3b01      	subs	r3, #1
 8018124:	2b00      	cmp	r3, #0
 8018126:	b410      	push	{r4}
 8018128:	6093      	str	r3, [r2, #8]
 801812a:	da08      	bge.n	801813e <__sfputc_r+0x1e>
 801812c:	6994      	ldr	r4, [r2, #24]
 801812e:	42a3      	cmp	r3, r4
 8018130:	db01      	blt.n	8018136 <__sfputc_r+0x16>
 8018132:	290a      	cmp	r1, #10
 8018134:	d103      	bne.n	801813e <__sfputc_r+0x1e>
 8018136:	f85d 4b04 	ldr.w	r4, [sp], #4
 801813a:	f7fe bca4 	b.w	8016a86 <__swbuf_r>
 801813e:	6813      	ldr	r3, [r2, #0]
 8018140:	1c58      	adds	r0, r3, #1
 8018142:	6010      	str	r0, [r2, #0]
 8018144:	7019      	strb	r1, [r3, #0]
 8018146:	4608      	mov	r0, r1
 8018148:	f85d 4b04 	ldr.w	r4, [sp], #4
 801814c:	4770      	bx	lr

0801814e <__sfputs_r>:
 801814e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018150:	4606      	mov	r6, r0
 8018152:	460f      	mov	r7, r1
 8018154:	4614      	mov	r4, r2
 8018156:	18d5      	adds	r5, r2, r3
 8018158:	42ac      	cmp	r4, r5
 801815a:	d101      	bne.n	8018160 <__sfputs_r+0x12>
 801815c:	2000      	movs	r0, #0
 801815e:	e007      	b.n	8018170 <__sfputs_r+0x22>
 8018160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018164:	463a      	mov	r2, r7
 8018166:	4630      	mov	r0, r6
 8018168:	f7ff ffda 	bl	8018120 <__sfputc_r>
 801816c:	1c43      	adds	r3, r0, #1
 801816e:	d1f3      	bne.n	8018158 <__sfputs_r+0xa>
 8018170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018174 <_vfiprintf_r>:
 8018174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018178:	460d      	mov	r5, r1
 801817a:	b09d      	sub	sp, #116	@ 0x74
 801817c:	4614      	mov	r4, r2
 801817e:	4698      	mov	r8, r3
 8018180:	4606      	mov	r6, r0
 8018182:	b118      	cbz	r0, 801818c <_vfiprintf_r+0x18>
 8018184:	6a03      	ldr	r3, [r0, #32]
 8018186:	b90b      	cbnz	r3, 801818c <_vfiprintf_r+0x18>
 8018188:	f7fe fbf2 	bl	8016970 <__sinit>
 801818c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801818e:	07d9      	lsls	r1, r3, #31
 8018190:	d405      	bmi.n	801819e <_vfiprintf_r+0x2a>
 8018192:	89ab      	ldrh	r3, [r5, #12]
 8018194:	059a      	lsls	r2, r3, #22
 8018196:	d402      	bmi.n	801819e <_vfiprintf_r+0x2a>
 8018198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801819a:	f7fe fd96 	bl	8016cca <__retarget_lock_acquire_recursive>
 801819e:	89ab      	ldrh	r3, [r5, #12]
 80181a0:	071b      	lsls	r3, r3, #28
 80181a2:	d501      	bpl.n	80181a8 <_vfiprintf_r+0x34>
 80181a4:	692b      	ldr	r3, [r5, #16]
 80181a6:	b99b      	cbnz	r3, 80181d0 <_vfiprintf_r+0x5c>
 80181a8:	4629      	mov	r1, r5
 80181aa:	4630      	mov	r0, r6
 80181ac:	f7fe fcaa 	bl	8016b04 <__swsetup_r>
 80181b0:	b170      	cbz	r0, 80181d0 <_vfiprintf_r+0x5c>
 80181b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181b4:	07dc      	lsls	r4, r3, #31
 80181b6:	d504      	bpl.n	80181c2 <_vfiprintf_r+0x4e>
 80181b8:	f04f 30ff 	mov.w	r0, #4294967295
 80181bc:	b01d      	add	sp, #116	@ 0x74
 80181be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c2:	89ab      	ldrh	r3, [r5, #12]
 80181c4:	0598      	lsls	r0, r3, #22
 80181c6:	d4f7      	bmi.n	80181b8 <_vfiprintf_r+0x44>
 80181c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181ca:	f7fe fd7f 	bl	8016ccc <__retarget_lock_release_recursive>
 80181ce:	e7f3      	b.n	80181b8 <_vfiprintf_r+0x44>
 80181d0:	2300      	movs	r3, #0
 80181d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80181d4:	2320      	movs	r3, #32
 80181d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80181da:	f8cd 800c 	str.w	r8, [sp, #12]
 80181de:	2330      	movs	r3, #48	@ 0x30
 80181e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018390 <_vfiprintf_r+0x21c>
 80181e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181e8:	f04f 0901 	mov.w	r9, #1
 80181ec:	4623      	mov	r3, r4
 80181ee:	469a      	mov	sl, r3
 80181f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181f4:	b10a      	cbz	r2, 80181fa <_vfiprintf_r+0x86>
 80181f6:	2a25      	cmp	r2, #37	@ 0x25
 80181f8:	d1f9      	bne.n	80181ee <_vfiprintf_r+0x7a>
 80181fa:	ebba 0b04 	subs.w	fp, sl, r4
 80181fe:	d00b      	beq.n	8018218 <_vfiprintf_r+0xa4>
 8018200:	465b      	mov	r3, fp
 8018202:	4622      	mov	r2, r4
 8018204:	4629      	mov	r1, r5
 8018206:	4630      	mov	r0, r6
 8018208:	f7ff ffa1 	bl	801814e <__sfputs_r>
 801820c:	3001      	adds	r0, #1
 801820e:	f000 80a7 	beq.w	8018360 <_vfiprintf_r+0x1ec>
 8018212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018214:	445a      	add	r2, fp
 8018216:	9209      	str	r2, [sp, #36]	@ 0x24
 8018218:	f89a 3000 	ldrb.w	r3, [sl]
 801821c:	2b00      	cmp	r3, #0
 801821e:	f000 809f 	beq.w	8018360 <_vfiprintf_r+0x1ec>
 8018222:	2300      	movs	r3, #0
 8018224:	f04f 32ff 	mov.w	r2, #4294967295
 8018228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801822c:	f10a 0a01 	add.w	sl, sl, #1
 8018230:	9304      	str	r3, [sp, #16]
 8018232:	9307      	str	r3, [sp, #28]
 8018234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018238:	931a      	str	r3, [sp, #104]	@ 0x68
 801823a:	4654      	mov	r4, sl
 801823c:	2205      	movs	r2, #5
 801823e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018242:	4853      	ldr	r0, [pc, #332]	@ (8018390 <_vfiprintf_r+0x21c>)
 8018244:	f7e7 ffc4 	bl	80001d0 <memchr>
 8018248:	9a04      	ldr	r2, [sp, #16]
 801824a:	b9d8      	cbnz	r0, 8018284 <_vfiprintf_r+0x110>
 801824c:	06d1      	lsls	r1, r2, #27
 801824e:	bf44      	itt	mi
 8018250:	2320      	movmi	r3, #32
 8018252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018256:	0713      	lsls	r3, r2, #28
 8018258:	bf44      	itt	mi
 801825a:	232b      	movmi	r3, #43	@ 0x2b
 801825c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018260:	f89a 3000 	ldrb.w	r3, [sl]
 8018264:	2b2a      	cmp	r3, #42	@ 0x2a
 8018266:	d015      	beq.n	8018294 <_vfiprintf_r+0x120>
 8018268:	9a07      	ldr	r2, [sp, #28]
 801826a:	4654      	mov	r4, sl
 801826c:	2000      	movs	r0, #0
 801826e:	f04f 0c0a 	mov.w	ip, #10
 8018272:	4621      	mov	r1, r4
 8018274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018278:	3b30      	subs	r3, #48	@ 0x30
 801827a:	2b09      	cmp	r3, #9
 801827c:	d94b      	bls.n	8018316 <_vfiprintf_r+0x1a2>
 801827e:	b1b0      	cbz	r0, 80182ae <_vfiprintf_r+0x13a>
 8018280:	9207      	str	r2, [sp, #28]
 8018282:	e014      	b.n	80182ae <_vfiprintf_r+0x13a>
 8018284:	eba0 0308 	sub.w	r3, r0, r8
 8018288:	fa09 f303 	lsl.w	r3, r9, r3
 801828c:	4313      	orrs	r3, r2
 801828e:	9304      	str	r3, [sp, #16]
 8018290:	46a2      	mov	sl, r4
 8018292:	e7d2      	b.n	801823a <_vfiprintf_r+0xc6>
 8018294:	9b03      	ldr	r3, [sp, #12]
 8018296:	1d19      	adds	r1, r3, #4
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	9103      	str	r1, [sp, #12]
 801829c:	2b00      	cmp	r3, #0
 801829e:	bfbb      	ittet	lt
 80182a0:	425b      	neglt	r3, r3
 80182a2:	f042 0202 	orrlt.w	r2, r2, #2
 80182a6:	9307      	strge	r3, [sp, #28]
 80182a8:	9307      	strlt	r3, [sp, #28]
 80182aa:	bfb8      	it	lt
 80182ac:	9204      	strlt	r2, [sp, #16]
 80182ae:	7823      	ldrb	r3, [r4, #0]
 80182b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80182b2:	d10a      	bne.n	80182ca <_vfiprintf_r+0x156>
 80182b4:	7863      	ldrb	r3, [r4, #1]
 80182b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80182b8:	d132      	bne.n	8018320 <_vfiprintf_r+0x1ac>
 80182ba:	9b03      	ldr	r3, [sp, #12]
 80182bc:	1d1a      	adds	r2, r3, #4
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	9203      	str	r2, [sp, #12]
 80182c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182c6:	3402      	adds	r4, #2
 80182c8:	9305      	str	r3, [sp, #20]
 80182ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80183a0 <_vfiprintf_r+0x22c>
 80182ce:	7821      	ldrb	r1, [r4, #0]
 80182d0:	2203      	movs	r2, #3
 80182d2:	4650      	mov	r0, sl
 80182d4:	f7e7 ff7c 	bl	80001d0 <memchr>
 80182d8:	b138      	cbz	r0, 80182ea <_vfiprintf_r+0x176>
 80182da:	9b04      	ldr	r3, [sp, #16]
 80182dc:	eba0 000a 	sub.w	r0, r0, sl
 80182e0:	2240      	movs	r2, #64	@ 0x40
 80182e2:	4082      	lsls	r2, r0
 80182e4:	4313      	orrs	r3, r2
 80182e6:	3401      	adds	r4, #1
 80182e8:	9304      	str	r3, [sp, #16]
 80182ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182ee:	4829      	ldr	r0, [pc, #164]	@ (8018394 <_vfiprintf_r+0x220>)
 80182f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80182f4:	2206      	movs	r2, #6
 80182f6:	f7e7 ff6b 	bl	80001d0 <memchr>
 80182fa:	2800      	cmp	r0, #0
 80182fc:	d03f      	beq.n	801837e <_vfiprintf_r+0x20a>
 80182fe:	4b26      	ldr	r3, [pc, #152]	@ (8018398 <_vfiprintf_r+0x224>)
 8018300:	bb1b      	cbnz	r3, 801834a <_vfiprintf_r+0x1d6>
 8018302:	9b03      	ldr	r3, [sp, #12]
 8018304:	3307      	adds	r3, #7
 8018306:	f023 0307 	bic.w	r3, r3, #7
 801830a:	3308      	adds	r3, #8
 801830c:	9303      	str	r3, [sp, #12]
 801830e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018310:	443b      	add	r3, r7
 8018312:	9309      	str	r3, [sp, #36]	@ 0x24
 8018314:	e76a      	b.n	80181ec <_vfiprintf_r+0x78>
 8018316:	fb0c 3202 	mla	r2, ip, r2, r3
 801831a:	460c      	mov	r4, r1
 801831c:	2001      	movs	r0, #1
 801831e:	e7a8      	b.n	8018272 <_vfiprintf_r+0xfe>
 8018320:	2300      	movs	r3, #0
 8018322:	3401      	adds	r4, #1
 8018324:	9305      	str	r3, [sp, #20]
 8018326:	4619      	mov	r1, r3
 8018328:	f04f 0c0a 	mov.w	ip, #10
 801832c:	4620      	mov	r0, r4
 801832e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018332:	3a30      	subs	r2, #48	@ 0x30
 8018334:	2a09      	cmp	r2, #9
 8018336:	d903      	bls.n	8018340 <_vfiprintf_r+0x1cc>
 8018338:	2b00      	cmp	r3, #0
 801833a:	d0c6      	beq.n	80182ca <_vfiprintf_r+0x156>
 801833c:	9105      	str	r1, [sp, #20]
 801833e:	e7c4      	b.n	80182ca <_vfiprintf_r+0x156>
 8018340:	fb0c 2101 	mla	r1, ip, r1, r2
 8018344:	4604      	mov	r4, r0
 8018346:	2301      	movs	r3, #1
 8018348:	e7f0      	b.n	801832c <_vfiprintf_r+0x1b8>
 801834a:	ab03      	add	r3, sp, #12
 801834c:	9300      	str	r3, [sp, #0]
 801834e:	462a      	mov	r2, r5
 8018350:	4b12      	ldr	r3, [pc, #72]	@ (801839c <_vfiprintf_r+0x228>)
 8018352:	a904      	add	r1, sp, #16
 8018354:	4630      	mov	r0, r6
 8018356:	f7fd fec7 	bl	80160e8 <_printf_float>
 801835a:	4607      	mov	r7, r0
 801835c:	1c78      	adds	r0, r7, #1
 801835e:	d1d6      	bne.n	801830e <_vfiprintf_r+0x19a>
 8018360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018362:	07d9      	lsls	r1, r3, #31
 8018364:	d405      	bmi.n	8018372 <_vfiprintf_r+0x1fe>
 8018366:	89ab      	ldrh	r3, [r5, #12]
 8018368:	059a      	lsls	r2, r3, #22
 801836a:	d402      	bmi.n	8018372 <_vfiprintf_r+0x1fe>
 801836c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801836e:	f7fe fcad 	bl	8016ccc <__retarget_lock_release_recursive>
 8018372:	89ab      	ldrh	r3, [r5, #12]
 8018374:	065b      	lsls	r3, r3, #25
 8018376:	f53f af1f 	bmi.w	80181b8 <_vfiprintf_r+0x44>
 801837a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801837c:	e71e      	b.n	80181bc <_vfiprintf_r+0x48>
 801837e:	ab03      	add	r3, sp, #12
 8018380:	9300      	str	r3, [sp, #0]
 8018382:	462a      	mov	r2, r5
 8018384:	4b05      	ldr	r3, [pc, #20]	@ (801839c <_vfiprintf_r+0x228>)
 8018386:	a904      	add	r1, sp, #16
 8018388:	4630      	mov	r0, r6
 801838a:	f7fe f945 	bl	8016618 <_printf_i>
 801838e:	e7e4      	b.n	801835a <_vfiprintf_r+0x1e6>
 8018390:	08018fd8 	.word	0x08018fd8
 8018394:	08018fe2 	.word	0x08018fe2
 8018398:	080160e9 	.word	0x080160e9
 801839c:	0801814f 	.word	0x0801814f
 80183a0:	08018fde 	.word	0x08018fde

080183a4 <__sflush_r>:
 80183a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80183a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183ac:	0716      	lsls	r6, r2, #28
 80183ae:	4605      	mov	r5, r0
 80183b0:	460c      	mov	r4, r1
 80183b2:	d454      	bmi.n	801845e <__sflush_r+0xba>
 80183b4:	684b      	ldr	r3, [r1, #4]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	dc02      	bgt.n	80183c0 <__sflush_r+0x1c>
 80183ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80183bc:	2b00      	cmp	r3, #0
 80183be:	dd48      	ble.n	8018452 <__sflush_r+0xae>
 80183c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80183c2:	2e00      	cmp	r6, #0
 80183c4:	d045      	beq.n	8018452 <__sflush_r+0xae>
 80183c6:	2300      	movs	r3, #0
 80183c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80183cc:	682f      	ldr	r7, [r5, #0]
 80183ce:	6a21      	ldr	r1, [r4, #32]
 80183d0:	602b      	str	r3, [r5, #0]
 80183d2:	d030      	beq.n	8018436 <__sflush_r+0x92>
 80183d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80183d6:	89a3      	ldrh	r3, [r4, #12]
 80183d8:	0759      	lsls	r1, r3, #29
 80183da:	d505      	bpl.n	80183e8 <__sflush_r+0x44>
 80183dc:	6863      	ldr	r3, [r4, #4]
 80183de:	1ad2      	subs	r2, r2, r3
 80183e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80183e2:	b10b      	cbz	r3, 80183e8 <__sflush_r+0x44>
 80183e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80183e6:	1ad2      	subs	r2, r2, r3
 80183e8:	2300      	movs	r3, #0
 80183ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80183ec:	6a21      	ldr	r1, [r4, #32]
 80183ee:	4628      	mov	r0, r5
 80183f0:	47b0      	blx	r6
 80183f2:	1c43      	adds	r3, r0, #1
 80183f4:	89a3      	ldrh	r3, [r4, #12]
 80183f6:	d106      	bne.n	8018406 <__sflush_r+0x62>
 80183f8:	6829      	ldr	r1, [r5, #0]
 80183fa:	291d      	cmp	r1, #29
 80183fc:	d82b      	bhi.n	8018456 <__sflush_r+0xb2>
 80183fe:	4a2a      	ldr	r2, [pc, #168]	@ (80184a8 <__sflush_r+0x104>)
 8018400:	410a      	asrs	r2, r1
 8018402:	07d6      	lsls	r6, r2, #31
 8018404:	d427      	bmi.n	8018456 <__sflush_r+0xb2>
 8018406:	2200      	movs	r2, #0
 8018408:	6062      	str	r2, [r4, #4]
 801840a:	04d9      	lsls	r1, r3, #19
 801840c:	6922      	ldr	r2, [r4, #16]
 801840e:	6022      	str	r2, [r4, #0]
 8018410:	d504      	bpl.n	801841c <__sflush_r+0x78>
 8018412:	1c42      	adds	r2, r0, #1
 8018414:	d101      	bne.n	801841a <__sflush_r+0x76>
 8018416:	682b      	ldr	r3, [r5, #0]
 8018418:	b903      	cbnz	r3, 801841c <__sflush_r+0x78>
 801841a:	6560      	str	r0, [r4, #84]	@ 0x54
 801841c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801841e:	602f      	str	r7, [r5, #0]
 8018420:	b1b9      	cbz	r1, 8018452 <__sflush_r+0xae>
 8018422:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018426:	4299      	cmp	r1, r3
 8018428:	d002      	beq.n	8018430 <__sflush_r+0x8c>
 801842a:	4628      	mov	r0, r5
 801842c:	f7ff faac 	bl	8017988 <_free_r>
 8018430:	2300      	movs	r3, #0
 8018432:	6363      	str	r3, [r4, #52]	@ 0x34
 8018434:	e00d      	b.n	8018452 <__sflush_r+0xae>
 8018436:	2301      	movs	r3, #1
 8018438:	4628      	mov	r0, r5
 801843a:	47b0      	blx	r6
 801843c:	4602      	mov	r2, r0
 801843e:	1c50      	adds	r0, r2, #1
 8018440:	d1c9      	bne.n	80183d6 <__sflush_r+0x32>
 8018442:	682b      	ldr	r3, [r5, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d0c6      	beq.n	80183d6 <__sflush_r+0x32>
 8018448:	2b1d      	cmp	r3, #29
 801844a:	d001      	beq.n	8018450 <__sflush_r+0xac>
 801844c:	2b16      	cmp	r3, #22
 801844e:	d11e      	bne.n	801848e <__sflush_r+0xea>
 8018450:	602f      	str	r7, [r5, #0]
 8018452:	2000      	movs	r0, #0
 8018454:	e022      	b.n	801849c <__sflush_r+0xf8>
 8018456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801845a:	b21b      	sxth	r3, r3
 801845c:	e01b      	b.n	8018496 <__sflush_r+0xf2>
 801845e:	690f      	ldr	r7, [r1, #16]
 8018460:	2f00      	cmp	r7, #0
 8018462:	d0f6      	beq.n	8018452 <__sflush_r+0xae>
 8018464:	0793      	lsls	r3, r2, #30
 8018466:	680e      	ldr	r6, [r1, #0]
 8018468:	bf08      	it	eq
 801846a:	694b      	ldreq	r3, [r1, #20]
 801846c:	600f      	str	r7, [r1, #0]
 801846e:	bf18      	it	ne
 8018470:	2300      	movne	r3, #0
 8018472:	eba6 0807 	sub.w	r8, r6, r7
 8018476:	608b      	str	r3, [r1, #8]
 8018478:	f1b8 0f00 	cmp.w	r8, #0
 801847c:	dde9      	ble.n	8018452 <__sflush_r+0xae>
 801847e:	6a21      	ldr	r1, [r4, #32]
 8018480:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018482:	4643      	mov	r3, r8
 8018484:	463a      	mov	r2, r7
 8018486:	4628      	mov	r0, r5
 8018488:	47b0      	blx	r6
 801848a:	2800      	cmp	r0, #0
 801848c:	dc08      	bgt.n	80184a0 <__sflush_r+0xfc>
 801848e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018496:	81a3      	strh	r3, [r4, #12]
 8018498:	f04f 30ff 	mov.w	r0, #4294967295
 801849c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184a0:	4407      	add	r7, r0
 80184a2:	eba8 0800 	sub.w	r8, r8, r0
 80184a6:	e7e7      	b.n	8018478 <__sflush_r+0xd4>
 80184a8:	dfbffffe 	.word	0xdfbffffe

080184ac <_fflush_r>:
 80184ac:	b538      	push	{r3, r4, r5, lr}
 80184ae:	690b      	ldr	r3, [r1, #16]
 80184b0:	4605      	mov	r5, r0
 80184b2:	460c      	mov	r4, r1
 80184b4:	b913      	cbnz	r3, 80184bc <_fflush_r+0x10>
 80184b6:	2500      	movs	r5, #0
 80184b8:	4628      	mov	r0, r5
 80184ba:	bd38      	pop	{r3, r4, r5, pc}
 80184bc:	b118      	cbz	r0, 80184c6 <_fflush_r+0x1a>
 80184be:	6a03      	ldr	r3, [r0, #32]
 80184c0:	b90b      	cbnz	r3, 80184c6 <_fflush_r+0x1a>
 80184c2:	f7fe fa55 	bl	8016970 <__sinit>
 80184c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d0f3      	beq.n	80184b6 <_fflush_r+0xa>
 80184ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80184d0:	07d0      	lsls	r0, r2, #31
 80184d2:	d404      	bmi.n	80184de <_fflush_r+0x32>
 80184d4:	0599      	lsls	r1, r3, #22
 80184d6:	d402      	bmi.n	80184de <_fflush_r+0x32>
 80184d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184da:	f7fe fbf6 	bl	8016cca <__retarget_lock_acquire_recursive>
 80184de:	4628      	mov	r0, r5
 80184e0:	4621      	mov	r1, r4
 80184e2:	f7ff ff5f 	bl	80183a4 <__sflush_r>
 80184e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80184e8:	07da      	lsls	r2, r3, #31
 80184ea:	4605      	mov	r5, r0
 80184ec:	d4e4      	bmi.n	80184b8 <_fflush_r+0xc>
 80184ee:	89a3      	ldrh	r3, [r4, #12]
 80184f0:	059b      	lsls	r3, r3, #22
 80184f2:	d4e1      	bmi.n	80184b8 <_fflush_r+0xc>
 80184f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80184f6:	f7fe fbe9 	bl	8016ccc <__retarget_lock_release_recursive>
 80184fa:	e7dd      	b.n	80184b8 <_fflush_r+0xc>

080184fc <__swhatbuf_r>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	460c      	mov	r4, r1
 8018500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018504:	2900      	cmp	r1, #0
 8018506:	b096      	sub	sp, #88	@ 0x58
 8018508:	4615      	mov	r5, r2
 801850a:	461e      	mov	r6, r3
 801850c:	da0d      	bge.n	801852a <__swhatbuf_r+0x2e>
 801850e:	89a3      	ldrh	r3, [r4, #12]
 8018510:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018514:	f04f 0100 	mov.w	r1, #0
 8018518:	bf14      	ite	ne
 801851a:	2340      	movne	r3, #64	@ 0x40
 801851c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018520:	2000      	movs	r0, #0
 8018522:	6031      	str	r1, [r6, #0]
 8018524:	602b      	str	r3, [r5, #0]
 8018526:	b016      	add	sp, #88	@ 0x58
 8018528:	bd70      	pop	{r4, r5, r6, pc}
 801852a:	466a      	mov	r2, sp
 801852c:	f000 f848 	bl	80185c0 <_fstat_r>
 8018530:	2800      	cmp	r0, #0
 8018532:	dbec      	blt.n	801850e <__swhatbuf_r+0x12>
 8018534:	9901      	ldr	r1, [sp, #4]
 8018536:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801853a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801853e:	4259      	negs	r1, r3
 8018540:	4159      	adcs	r1, r3
 8018542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018546:	e7eb      	b.n	8018520 <__swhatbuf_r+0x24>

08018548 <__smakebuf_r>:
 8018548:	898b      	ldrh	r3, [r1, #12]
 801854a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801854c:	079d      	lsls	r5, r3, #30
 801854e:	4606      	mov	r6, r0
 8018550:	460c      	mov	r4, r1
 8018552:	d507      	bpl.n	8018564 <__smakebuf_r+0x1c>
 8018554:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018558:	6023      	str	r3, [r4, #0]
 801855a:	6123      	str	r3, [r4, #16]
 801855c:	2301      	movs	r3, #1
 801855e:	6163      	str	r3, [r4, #20]
 8018560:	b003      	add	sp, #12
 8018562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018564:	ab01      	add	r3, sp, #4
 8018566:	466a      	mov	r2, sp
 8018568:	f7ff ffc8 	bl	80184fc <__swhatbuf_r>
 801856c:	9f00      	ldr	r7, [sp, #0]
 801856e:	4605      	mov	r5, r0
 8018570:	4639      	mov	r1, r7
 8018572:	4630      	mov	r0, r6
 8018574:	f7fd fc8c 	bl	8015e90 <_malloc_r>
 8018578:	b948      	cbnz	r0, 801858e <__smakebuf_r+0x46>
 801857a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801857e:	059a      	lsls	r2, r3, #22
 8018580:	d4ee      	bmi.n	8018560 <__smakebuf_r+0x18>
 8018582:	f023 0303 	bic.w	r3, r3, #3
 8018586:	f043 0302 	orr.w	r3, r3, #2
 801858a:	81a3      	strh	r3, [r4, #12]
 801858c:	e7e2      	b.n	8018554 <__smakebuf_r+0xc>
 801858e:	89a3      	ldrh	r3, [r4, #12]
 8018590:	6020      	str	r0, [r4, #0]
 8018592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018596:	81a3      	strh	r3, [r4, #12]
 8018598:	9b01      	ldr	r3, [sp, #4]
 801859a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801859e:	b15b      	cbz	r3, 80185b8 <__smakebuf_r+0x70>
 80185a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185a4:	4630      	mov	r0, r6
 80185a6:	f000 f81d 	bl	80185e4 <_isatty_r>
 80185aa:	b128      	cbz	r0, 80185b8 <__smakebuf_r+0x70>
 80185ac:	89a3      	ldrh	r3, [r4, #12]
 80185ae:	f023 0303 	bic.w	r3, r3, #3
 80185b2:	f043 0301 	orr.w	r3, r3, #1
 80185b6:	81a3      	strh	r3, [r4, #12]
 80185b8:	89a3      	ldrh	r3, [r4, #12]
 80185ba:	431d      	orrs	r5, r3
 80185bc:	81a5      	strh	r5, [r4, #12]
 80185be:	e7cf      	b.n	8018560 <__smakebuf_r+0x18>

080185c0 <_fstat_r>:
 80185c0:	b538      	push	{r3, r4, r5, lr}
 80185c2:	4d07      	ldr	r5, [pc, #28]	@ (80185e0 <_fstat_r+0x20>)
 80185c4:	2300      	movs	r3, #0
 80185c6:	4604      	mov	r4, r0
 80185c8:	4608      	mov	r0, r1
 80185ca:	4611      	mov	r1, r2
 80185cc:	602b      	str	r3, [r5, #0]
 80185ce:	f7eb fd3f 	bl	8004050 <_fstat>
 80185d2:	1c43      	adds	r3, r0, #1
 80185d4:	d102      	bne.n	80185dc <_fstat_r+0x1c>
 80185d6:	682b      	ldr	r3, [r5, #0]
 80185d8:	b103      	cbz	r3, 80185dc <_fstat_r+0x1c>
 80185da:	6023      	str	r3, [r4, #0]
 80185dc:	bd38      	pop	{r3, r4, r5, pc}
 80185de:	bf00      	nop
 80185e0:	20001b94 	.word	0x20001b94

080185e4 <_isatty_r>:
 80185e4:	b538      	push	{r3, r4, r5, lr}
 80185e6:	4d06      	ldr	r5, [pc, #24]	@ (8018600 <_isatty_r+0x1c>)
 80185e8:	2300      	movs	r3, #0
 80185ea:	4604      	mov	r4, r0
 80185ec:	4608      	mov	r0, r1
 80185ee:	602b      	str	r3, [r5, #0]
 80185f0:	f7eb fd3e 	bl	8004070 <_isatty>
 80185f4:	1c43      	adds	r3, r0, #1
 80185f6:	d102      	bne.n	80185fe <_isatty_r+0x1a>
 80185f8:	682b      	ldr	r3, [r5, #0]
 80185fa:	b103      	cbz	r3, 80185fe <_isatty_r+0x1a>
 80185fc:	6023      	str	r3, [r4, #0]
 80185fe:	bd38      	pop	{r3, r4, r5, pc}
 8018600:	20001b94 	.word	0x20001b94

08018604 <__assert_func>:
 8018604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018606:	4614      	mov	r4, r2
 8018608:	461a      	mov	r2, r3
 801860a:	4b09      	ldr	r3, [pc, #36]	@ (8018630 <__assert_func+0x2c>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	4605      	mov	r5, r0
 8018610:	68d8      	ldr	r0, [r3, #12]
 8018612:	b954      	cbnz	r4, 801862a <__assert_func+0x26>
 8018614:	4b07      	ldr	r3, [pc, #28]	@ (8018634 <__assert_func+0x30>)
 8018616:	461c      	mov	r4, r3
 8018618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801861c:	9100      	str	r1, [sp, #0]
 801861e:	462b      	mov	r3, r5
 8018620:	4905      	ldr	r1, [pc, #20]	@ (8018638 <__assert_func+0x34>)
 8018622:	f000 f841 	bl	80186a8 <fiprintf>
 8018626:	f000 f851 	bl	80186cc <abort>
 801862a:	4b04      	ldr	r3, [pc, #16]	@ (801863c <__assert_func+0x38>)
 801862c:	e7f4      	b.n	8018618 <__assert_func+0x14>
 801862e:	bf00      	nop
 8018630:	20000040 	.word	0x20000040
 8018634:	0801902e 	.word	0x0801902e
 8018638:	08019000 	.word	0x08019000
 801863c:	08018ff3 	.word	0x08018ff3

08018640 <_calloc_r>:
 8018640:	b570      	push	{r4, r5, r6, lr}
 8018642:	fba1 5402 	umull	r5, r4, r1, r2
 8018646:	b93c      	cbnz	r4, 8018658 <_calloc_r+0x18>
 8018648:	4629      	mov	r1, r5
 801864a:	f7fd fc21 	bl	8015e90 <_malloc_r>
 801864e:	4606      	mov	r6, r0
 8018650:	b928      	cbnz	r0, 801865e <_calloc_r+0x1e>
 8018652:	2600      	movs	r6, #0
 8018654:	4630      	mov	r0, r6
 8018656:	bd70      	pop	{r4, r5, r6, pc}
 8018658:	220c      	movs	r2, #12
 801865a:	6002      	str	r2, [r0, #0]
 801865c:	e7f9      	b.n	8018652 <_calloc_r+0x12>
 801865e:	462a      	mov	r2, r5
 8018660:	4621      	mov	r1, r4
 8018662:	f7fe faa5 	bl	8016bb0 <memset>
 8018666:	e7f5      	b.n	8018654 <_calloc_r+0x14>

08018668 <__ascii_mbtowc>:
 8018668:	b082      	sub	sp, #8
 801866a:	b901      	cbnz	r1, 801866e <__ascii_mbtowc+0x6>
 801866c:	a901      	add	r1, sp, #4
 801866e:	b142      	cbz	r2, 8018682 <__ascii_mbtowc+0x1a>
 8018670:	b14b      	cbz	r3, 8018686 <__ascii_mbtowc+0x1e>
 8018672:	7813      	ldrb	r3, [r2, #0]
 8018674:	600b      	str	r3, [r1, #0]
 8018676:	7812      	ldrb	r2, [r2, #0]
 8018678:	1e10      	subs	r0, r2, #0
 801867a:	bf18      	it	ne
 801867c:	2001      	movne	r0, #1
 801867e:	b002      	add	sp, #8
 8018680:	4770      	bx	lr
 8018682:	4610      	mov	r0, r2
 8018684:	e7fb      	b.n	801867e <__ascii_mbtowc+0x16>
 8018686:	f06f 0001 	mvn.w	r0, #1
 801868a:	e7f8      	b.n	801867e <__ascii_mbtowc+0x16>

0801868c <__ascii_wctomb>:
 801868c:	4603      	mov	r3, r0
 801868e:	4608      	mov	r0, r1
 8018690:	b141      	cbz	r1, 80186a4 <__ascii_wctomb+0x18>
 8018692:	2aff      	cmp	r2, #255	@ 0xff
 8018694:	d904      	bls.n	80186a0 <__ascii_wctomb+0x14>
 8018696:	228a      	movs	r2, #138	@ 0x8a
 8018698:	601a      	str	r2, [r3, #0]
 801869a:	f04f 30ff 	mov.w	r0, #4294967295
 801869e:	4770      	bx	lr
 80186a0:	700a      	strb	r2, [r1, #0]
 80186a2:	2001      	movs	r0, #1
 80186a4:	4770      	bx	lr
	...

080186a8 <fiprintf>:
 80186a8:	b40e      	push	{r1, r2, r3}
 80186aa:	b503      	push	{r0, r1, lr}
 80186ac:	4601      	mov	r1, r0
 80186ae:	ab03      	add	r3, sp, #12
 80186b0:	4805      	ldr	r0, [pc, #20]	@ (80186c8 <fiprintf+0x20>)
 80186b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80186b6:	6800      	ldr	r0, [r0, #0]
 80186b8:	9301      	str	r3, [sp, #4]
 80186ba:	f7ff fd5b 	bl	8018174 <_vfiprintf_r>
 80186be:	b002      	add	sp, #8
 80186c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80186c4:	b003      	add	sp, #12
 80186c6:	4770      	bx	lr
 80186c8:	20000040 	.word	0x20000040

080186cc <abort>:
 80186cc:	b508      	push	{r3, lr}
 80186ce:	2006      	movs	r0, #6
 80186d0:	f000 f82c 	bl	801872c <raise>
 80186d4:	2001      	movs	r0, #1
 80186d6:	f7eb fc6b 	bl	8003fb0 <_exit>

080186da <_raise_r>:
 80186da:	291f      	cmp	r1, #31
 80186dc:	b538      	push	{r3, r4, r5, lr}
 80186de:	4605      	mov	r5, r0
 80186e0:	460c      	mov	r4, r1
 80186e2:	d904      	bls.n	80186ee <_raise_r+0x14>
 80186e4:	2316      	movs	r3, #22
 80186e6:	6003      	str	r3, [r0, #0]
 80186e8:	f04f 30ff 	mov.w	r0, #4294967295
 80186ec:	bd38      	pop	{r3, r4, r5, pc}
 80186ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80186f0:	b112      	cbz	r2, 80186f8 <_raise_r+0x1e>
 80186f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80186f6:	b94b      	cbnz	r3, 801870c <_raise_r+0x32>
 80186f8:	4628      	mov	r0, r5
 80186fa:	f000 f831 	bl	8018760 <_getpid_r>
 80186fe:	4622      	mov	r2, r4
 8018700:	4601      	mov	r1, r0
 8018702:	4628      	mov	r0, r5
 8018704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018708:	f000 b818 	b.w	801873c <_kill_r>
 801870c:	2b01      	cmp	r3, #1
 801870e:	d00a      	beq.n	8018726 <_raise_r+0x4c>
 8018710:	1c59      	adds	r1, r3, #1
 8018712:	d103      	bne.n	801871c <_raise_r+0x42>
 8018714:	2316      	movs	r3, #22
 8018716:	6003      	str	r3, [r0, #0]
 8018718:	2001      	movs	r0, #1
 801871a:	e7e7      	b.n	80186ec <_raise_r+0x12>
 801871c:	2100      	movs	r1, #0
 801871e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018722:	4620      	mov	r0, r4
 8018724:	4798      	blx	r3
 8018726:	2000      	movs	r0, #0
 8018728:	e7e0      	b.n	80186ec <_raise_r+0x12>
	...

0801872c <raise>:
 801872c:	4b02      	ldr	r3, [pc, #8]	@ (8018738 <raise+0xc>)
 801872e:	4601      	mov	r1, r0
 8018730:	6818      	ldr	r0, [r3, #0]
 8018732:	f7ff bfd2 	b.w	80186da <_raise_r>
 8018736:	bf00      	nop
 8018738:	20000040 	.word	0x20000040

0801873c <_kill_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4d07      	ldr	r5, [pc, #28]	@ (801875c <_kill_r+0x20>)
 8018740:	2300      	movs	r3, #0
 8018742:	4604      	mov	r4, r0
 8018744:	4608      	mov	r0, r1
 8018746:	4611      	mov	r1, r2
 8018748:	602b      	str	r3, [r5, #0]
 801874a:	f7eb fc21 	bl	8003f90 <_kill>
 801874e:	1c43      	adds	r3, r0, #1
 8018750:	d102      	bne.n	8018758 <_kill_r+0x1c>
 8018752:	682b      	ldr	r3, [r5, #0]
 8018754:	b103      	cbz	r3, 8018758 <_kill_r+0x1c>
 8018756:	6023      	str	r3, [r4, #0]
 8018758:	bd38      	pop	{r3, r4, r5, pc}
 801875a:	bf00      	nop
 801875c:	20001b94 	.word	0x20001b94

08018760 <_getpid_r>:
 8018760:	f7eb bc0e 	b.w	8003f80 <_getpid>

08018764 <_init>:
 8018764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018766:	bf00      	nop
 8018768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801876a:	bc08      	pop	{r3}
 801876c:	469e      	mov	lr, r3
 801876e:	4770      	bx	lr

08018770 <_fini>:
 8018770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018772:	bf00      	nop
 8018774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018776:	bc08      	pop	{r3}
 8018778:	469e      	mov	lr, r3
 801877a:	4770      	bx	lr
